import React, { useState, useEffect, useRef } from 'react';

// CSS for contentEditable placeholder
const contentEditableStyles = `
  [data-empty="true"]:empty::before {
    content: attr(data-placeholder);
    color: #9ca3af;
    pointer-events: none;
    position: absolute;
    top: 0.5rem;
    left: 0.75rem;
  }
  
  [data-empty="true"]:not(:empty)::before {
    display: none;
  }
`;
import {
  Send,
  Users,
  MessageSquare,
  Clock,
  CheckCircle,
  AlertCircle,
  RefreshCw,
  Bell,
  X,
  Settings,
  Info,
  FileText,
  Smile,
  Paperclip,
  Mic,
  Image,
  File,
  Bold,
  Italic,
  Underline,
  List,
  ListOrdered,
  Quote,
  Code,
  Link,
  Table,
  Eye,
  Shield,
  Zap,
  Star,
  TrendingUp,
  AlertTriangle,
  HelpCircle,
  Calendar,
  Target,
  Activity,
  UserPlus,
  Video,
  Phone,
  MoreHorizontal,
  Pin,
  Archive,
  Trash2,
  Edit,
  Copy,
  Download,
  Plus,
  Hash,
  Lock,
  Globe,
  Search,
  Filter,
  FolderOpen,
  FolderPlus,
  Folder,
  Grid,
  Share,
  MoreVertical,
  ClipboardList,
  GitFork,
  PieChart,
  ArrowLeft,
  MapPin,
  Mail
} from 'lucide-react';
import { format } from 'date-fns';
import { tr } from 'date-fns/locale';
import { toast } from 'react-hot-toast';
import { useSupabase } from '../hooks/useSupabase';

interface ChatMessage {
  id: string;
  content: string;
  senderId: string;
  senderName: string;
  senderRole: string;
  senderAvatar: string;
  channelId: string;
  messageType: 'text' | 'file' | 'image' | 'system' | 'announcement';
  attachments?: string[];
  timestamp: Date;
  isPinned?: boolean;
  isEdited?: boolean;
  editedAt?: Date;
  reactions?: { [key: string]: string[] }; // emoji: [userId1, userId2]
  mentions?: string[];
  isDirectMessage?: boolean;
  recipientId?: string;
}

interface Employee {
  id: string;
  name: string;
  role: string;
  department: string;
  avatar: string;
  status: 'online' | 'away' | 'busy' | 'offline';
  lastSeen: Date;
  isTyping: boolean;
  availability: 'available' | 'busy' | 'do_not_disturb';
}

interface ChatChannel {
  id: string;
  name: string;
  description: string;
  type: 'public' | 'private' | 'direct';
  members: string[];
  isPinned?: boolean;
  unreadCount: number;
  lastMessage?: string;
  lastMessageTime?: Date;
}

// Push Notification Interfaces
interface PushNotification {
  id: string;
  title: string;
  body: string;
  icon?: string;
  image?: string;
  badge?: string;
  tag?: string;
  data?: any;
  actions?: NotificationAction[];
  requireInteraction?: boolean;
  silent?: boolean;
  timestamp: Date;
  type: 'message' | 'mention' | 'direct' | 'channel' | 'system';
  senderId?: string;
  senderName?: string;
  senderAvatar?: string;
  channelId?: string;
  channelName?: string;
  messageId?: string;
  priority: 'low' | 'normal' | 'high' | 'urgent';
  isRead: boolean;
}

interface NotificationAction {
  action: string;
  title: string;
  icon?: string;
}

interface NotificationSettings {
  enabled: boolean;
  silentHours: {
    enabled: boolean;
    start: string; // "22:00"
    end: string;   // "08:00"
  };
  priorityContacts: string[]; // User IDs
  urgentKeywords: string[]; // ["acil", "önemli", "deadline"]
  doNotDisturb: boolean;
  notificationTypes: {
    newMessage: boolean;
    mention: boolean;
    directMessage: boolean;
    channelAnnouncement: boolean;
    systemNotification: boolean;
  };
  soundEnabled: boolean;
  vibrationEnabled: boolean;
  showPreview: boolean;
  autoMarkAsRead: boolean;
}

interface NotificationPermission {
  granted: boolean;
  denied: boolean;
  default: boolean;
}

interface EmployeeChatProps {
  currentUserId: string;
  currentUserName: string;
  currentUserRole: string;
  currentUserDepartment: string;
  className?: string;
  onNotification?: (notification: any) => void; // Dashboard bildirimleri için callback
  initialChannelId?: string; // Başlangıçta seçilecek kanal ID'si
}

const EmployeeChat: React.FC<EmployeeChatProps> = ({
  currentUserId,
  currentUserName,
  currentUserRole,
  currentUserDepartment,
  className = '',
  onNotification,
  initialChannelId
}) => {
  const { supabase } = useSupabase();
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const editorRef = useRef<HTMLDivElement>(null);

  // Chat state
  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [newMessage, setNewMessage] = useState('');
  const [isConnected, setIsConnected] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [attachments, setAttachments] = useState<File[]>([]);
  const [filePreview, setFilePreview] = useState<{ file: File; preview: string } | null>(null);
  const [uploadProgress, setUploadProgress] = useState<{ [key: string]: number }>({});
  
  // Hide notification icons state
  const [hideNotificationIcons, setHideNotificationIcons] = useState(false);

  // Function to toggle notification icons visibility
  const toggleNotificationIcons = () => {
    setHideNotificationIcons(!hideNotificationIcons);
  };

  // Gelişmiş Dosya Yönetimi State'leri
  const [showFileManager, setShowFileManager] = useState(false);
  const [showExtractedTasks, setShowExtractedTasks] = useState(false);
  const [fileManagerView, setFileManagerView] = useState<'list' | 'grid' | 'timeline'>('list');
  const [fileManagerSort, setFileManagerSort] = useState<'name' | 'size' | 'date' | 'type'>('date');
  const [fileManagerFilter, setFileManagerFilter] = useState({
    type: 'all',
    size: 'all',
    date: 'all',
    sender: 'all'
  });
  const [fileFolders, setFileFolders] = useState<Array<{
    id: string;
    name: string;
    files: string[];
    createdAt: Date;
    updatedAt: Date;
  }>>([]);
  const [fileVersions, setFileVersions] = useState<{ [key: string]: Array<{
    version: number;
    file: File;
    uploadedBy: string;
    uploadedAt: Date;
    changes: string;
  }> }>({});
  const [fileSharing, setFileSharing] = useState<{ [key: string]: {
    sharedWith: string[];
    permissions: 'view' | 'edit' | 'admin';
    expiresAt?: Date;
    password?: string;
  } }>({});
  const [showEmojiPicker, setShowEmojiPicker] = useState(false);
  const [emojiPickerPosition, setEmojiPickerPosition] = useState({ x: 0, y: 0 });
  const [selectedMessageForReaction, setSelectedMessageForReaction] = useState<string | null>(null);
  
  // Dosya Önizleme State'leri
  const [showFilePreviewModal, setShowFilePreviewModal] = useState(false);
  const [filePreviewData, setFilePreviewData] = useState<{ file: File; type: string; content?: any } | null>(null);
  const [previewLoading, setPreviewLoading] = useState(false);
  const [previewError, setPreviewError] = useState<string | null>(null);

  // Channel state
  const [channels, setChannels] = useState<ChatChannel[]>([]);
  const [selectedChannel, setSelectedChannel] = useState<ChatChannel | null>(null);
  const [showChannelList, setShowChannelList] = useState(true);
  const [showCreateChannel, setShowCreateChannel] = useState(false);
  const [newChannelName, setNewChannelName] = useState('');
  const [newChannelDescription, setNewChannelDescription] = useState('');
  const [newChannelType, setNewChannelType] = useState<'public' | 'private'>('public');

  // Employee state
  const [employees, setEmployees] = useState<Employee[]>([]);
  const [onlineEmployees, setOnlineEmployees] = useState<Employee[]>([]);
  const [typingEmployees, setTypingEmployees] = useState<string[]>([]);
  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(null);

  // UI state
  const [activeView, setActiveView] = useState<'channels' | 'direct' | 'search'>('channels');
  const [searchTerm, setSearchTerm] = useState('');
  const [showAdvancedSearch, setShowAdvancedSearch] = useState(false);
  const [searchFilters, setSearchFilters] = useState({
    sender: '',
    dateFrom: '',
    dateTo: '',
    messageType: 'all',
    channel: 'all',
    messageLength: 'all',
    minReactions: '',
    mentionedUser: '',
    hasAttachments: false,
    isPinned: false,
    isEdited: false,
    hasReactions: false,
    priority: 'all' as 'all' | 'low' | 'medium' | 'high' | 'urgent',
    category: 'all' as 'all' | 'announcement' | 'question' | 'suggestion' | 'general'
  });
  const [searchResults, setSearchResults] = useState<ChatMessage[]>([]);
  const [isSearching, setIsSearching] = useState(false);

  // Gelişmiş arama state'leri
  const [searchSuggestions, setSearchSuggestions] = useState<string[]>([]);
  const [showSearchSuggestions, setShowSearchSuggestions] = useState(false);
  const [searchHistory, setSearchHistory] = useState<string[]>([]);
  const [isVoiceSearchActive, setIsVoiceSearchActive] = useState(false);
  const [voiceSearchText, setVoiceSearchText] = useState('');
  const [semanticSearchEnabled, setSemanticSearchEnabled] = useState(false);
  const [searchSynonyms, setSearchSynonyms] = useState<string[]>([]);
  const [showVoiceSearchHelp, setShowVoiceSearchHelp] = useState(false);
  const [showKeyboardShortcuts, setShowKeyboardShortcuts] = useState(false);
  
  // Gelişmiş Arama ve Filtreleme State'leri
  const [showAdvancedSearchModal, setShowAdvancedSearchModal] = useState(false);
  const [searchMode, setSearchMode] = useState<'simple' | 'advanced' | 'semantic'>('simple');
  const [searchAnalytics, setSearchAnalytics] = useState({
    totalResults: 0,
    searchTime: 0,
    filtersApplied: 0
  });

  const [showMemberList, setShowMemberList] = useState(true);
  const [selectedMessage, setSelectedMessage] = useState<ChatMessage | null>(null);
  const [showMessageActions, setShowMessageActions] = useState(false);
  const [editingMessage, setEditingMessage] = useState<string | null>(null);
  const [editMessageContent, setEditMessageContent] = useState('');
  const [pinnedMessages, setPinnedMessages] = useState<ChatMessage[]>([]);
  const [showPinnedMessages, setShowPinnedMessages] = useState(false);
  const [viewMode, setViewMode] = useState<'standard'>('standard');
  const [messageCategories, setMessageCategories] = useState<{
    [key: string]: 'announcement' | 'question' | 'suggestion' | 'general'
  }>({});
  const [favoriteMessages, setFavoriteMessages] = useState<string[]>([]);
  const [showFavorites, setShowFavorites] = useState(false);
  const [favoriteEmployees, setFavoriteEmployees] = useState<string[]>([]);
  const [showChannelSettings, setShowChannelSettings] = useState(false);
  const [channelMembers, setChannelMembers] = useState<{ [key: string]: Employee[] }>({});
  const [showInviteModal, setShowInviteModal] = useState(false);
  const [inviteEmail, setInviteEmail] = useState('');
  const [channelStats, setChannelStats] = useState<{ [key: string]: { messageCount: number; memberCount: number; lastActivity: Date } }>({});
  const [blockedUsers, setBlockedUsers] = useState<string[]>([]);
  const [showPrivacySettings, setShowPrivacySettings] = useState(false);
  const [privacySettings, setPrivacySettings] = useState({
    showOnlineStatus: true,
    allowDirectMessages: true,
    allowMentions: true,
    messageHistory: '30days' as '7days' | '30days' | '90days' | 'forever'
  });
  const [showIntegrations, setShowIntegrations] = useState(false);
  const [integrations, setIntegrations] = useState({
    calendar: false,
    tasks: false,
    drive: false
  });
  
  // İş Akışı Entegrasyonları State'leri
  const [showWorkflowModal, setShowWorkflowModal] = useState(false);
  const [workflowType, setWorkflowType] = useState<'task' | 'meeting' | 'approval' | 'project'>('task');
  
  // Çalışan Profili State'leri
  const [showEmployeeProfile, setShowEmployeeProfile] = useState(false);
  const [selectedProfileEmployee, setSelectedProfileEmployee] = useState<Employee | null>(null);
  const [previousView, setPreviousView] = useState<'channel' | 'employee' | 'search' | null>(null);
  const [workflowData, setWorkflowData] = useState({
    title: '',
    description: '',
    assignee: '',
    dueDate: '',
    priority: 'medium' as 'low' | 'medium' | 'high' | 'urgent',
    meetingTime: '',
    participants: [] as string[],
    approvalType: 'simple' as 'simple' | 'multi-step',
    projectName: '',
    projectStatus: 'planning' as 'planning' | 'active' | 'completed' | 'on-hold'
  });
  
  // Otomatik Görev Çıkarma State'leri
  const [autoTaskExtraction, setAutoTaskExtraction] = useState({
    enabled: true,
    keywords: ['yapılacak', 'görev', 'task', 'deadline', 'son tarih', 'bitir', 'tamamla', 'kontrol et', 'incele'],
    autoAssign: false,
    defaultAssignee: '',
    defaultPriority: 'medium' as 'low' | 'medium' | 'high' | 'urgent',
    notificationEnabled: true
  });
  
  const [extractedTasks, setExtractedTasks] = useState<Array<{
    id: string;
    title: string;
    description: string;
    assignee: string;
    priority: 'low' | 'medium' | 'high' | 'urgent';
    dueDate?: Date;
    sourceMessage: string;
    sourceChannel: string;
    sourceUser: string;
    status: 'pending' | 'in-progress' | 'completed' | 'cancelled';
    createdAt: Date;
    completedAt?: Date;
  }>>([]);
  
  // Gelişmiş Proje Yönetimi State'leri
  const [projectTemplates, setProjectTemplates] = useState<Array<{
    id: string;
    name: string;
    description: string;
    phases: Array<{
      name: string;
      duration: number; // gün cinsinden
      tasks: Array<{
        title: string;
        description: string;
        assignee?: string;
        priority: 'low' | 'medium' | 'high' | 'urgent';
      }>;
    }>;
    createdAt: Date;
    createdBy: string;
  }>>([]);
  
  const [projectProgress, setProjectProgress] = useState<{ [key: string]: {
    overallProgress: number;
    phaseProgress: { [phaseName: string]: number };
    taskProgress: { [taskId: string]: number };
    timeSpent: number;
    budgetUsed: number;
    teamMembers: Array<{
      id: string;
      name: string;
      role: string;
      timeSpent: number;
      tasksCompleted: number;
    }>;
    milestones: Array<{
      id: string;
      name: string;
      description: string;
      dueDate: Date;
      completed: boolean;
      completedAt?: Date;
    }>;
    risks: Array<{
      id: string;
      title: string;
      description: string;
      severity: 'low' | 'medium' | 'high' | 'critical';
      status: 'open' | 'mitigated' | 'closed';
      assignedTo?: string;
    }>;
  } } >({});
  
  const [projectAnalytics, setProjectAnalytics] = useState<{ [key: string]: {
    totalTasks: number;
    completedTasks: number;
    overdueTasks: number;
    averageTaskDuration: number;
    teamProductivity: number;
    budgetUtilization: number;
    riskLevel: 'low' | 'medium' | 'high';
    completionTrend: Array<{ date: string; completed: number; total: number }>;
  } }>({});
  
  // Sesli Mesajlar State'leri
  const [voiceMessages, setVoiceMessages] = useState<Array<{
    id: string;
    senderId: string;
    senderName: string;
    channelId: string;
    audioUrl: string;
    duration: number; // saniye cinsinden
    transcription?: string;
    timestamp: Date;
    isPlaying: boolean;
    playbackRate: number;
  }>>([]);
  
  const [isRecordingVoice, setIsRecordingVoice] = useState(false);
  const [recordingDuration, setRecordingDuration] = useState(0);
  const [recordingStartTime, setRecordingStartTime] = useState<Date | null>(null);
  const [mediaRecorder, setMediaRecorder] = useState<MediaRecorder | null>(null);
  const [audioChunks, setAudioChunks] = useState<Blob[]>([]);
  const [showVoiceRecorder, setShowVoiceRecorder] = useState(false);
  
  // Bulk İşlemler State'leri
  const [selectedMessages, setSelectedMessages] = useState<string[]>([]);
  const [isBulkMode, setIsBulkMode] = useState(false);
  const [bulkActions, setBulkActions] = useState<{
    delete: boolean;
    archive: boolean;
    pin: boolean;
    createTasks: boolean;
  }>({
    delete: false,
    archive: false,
    pin: false,
    createTasks: false
  });
  
  // Gelişmiş İş Akışı State'leri
  const [autoCategorization, setAutoCategorization] = useState({
    enabled: true,
    categories: ['genel', 'proje', 'toplantı', 'sorun', 'öneri', 'acil'] as const,
    keywords: {
      genel: ['merhaba', 'teşekkür', 'görüşürüz'],
      proje: ['proje', 'geliştirme', 'planlama', 'deadline'],
      toplantı: ['toplantı', 'meeting', 'görüşme', 'agenda'],
      sorun: ['sorun', 'problem', 'hata', 'bug', 'issue'],
      öneri: ['öneri', 'suggestion', 'fikir', 'idea'],
      acil: ['acil', 'urgent', 'kritik', 'critical']
    }
  });
  
  const [autoResponses, setAutoResponses] = useState<Array<{
    id: string;
    trigger: string;
    response: string;
    enabled: boolean;
    category: string;
  }>>([
    {
      id: '1',
      trigger: 'merhaba',
      response: 'Merhaba! Size nasıl yardımcı olabilirim?',
      enabled: true,
      category: 'genel'
    },
    {
      id: '2',
      trigger: 'teşekkür',
      response: 'Rica ederim! Başka bir konuda yardıma ihtiyacınız var mı?',
      enabled: true,
      category: 'genel'
    }
  ]);
  
  const [workflowRules, setWorkflowRules] = useState<Array<{
    id: string;
    name: string;
    condition: string;
    action: string;
    enabled: boolean;
    priority: number;
  }>>([
    {
      id: '1',
      name: 'Acil Mesaj Yönlendirme',
      condition: 'message contains "acil" or "urgent"',
      action: 'forward to manager',
      enabled: true,
      priority: 1
    },
    {
      id: '2',
      name: 'Proje Mesaj Kategorizasyonu',
      condition: 'message contains "proje" or "project"',
      action: 'categorize as project',
      enabled: true,
      priority: 2
    }
  ]);
  
  // Gelişmiş Arama State'leri
  const [semanticSearch, setSemanticSearch] = useState({
    enabled: true,
    searchHistory: [] as string[],
    searchSuggestions: [] as string[],
    searchFilters: {
      dateRange: 'all',
      messageType: 'all',
      sender: 'all',
      category: 'all',
      hasAttachments: false,
      hasVoiceMessages: false,
      priority: 'all'
    }
  });
  
  const [advancedSearchResults, setAdvancedSearchResults] = useState<{
    messages: ChatMessage[];
    voiceMessages: typeof voiceMessages;
    files: any[];
    totalResults: number;
    searchTime: number;
    relevance: number;
  }>({
    messages: [],
    voiceMessages: [],
    files: [],
    totalResults: 0,
    searchTime: 0,
    relevance: 0
  });
  
  const [visualSearch, setVisualSearch] = useState({
    enabled: false,
    imageResults: [] as any[],
    colorFilter: null as string | null,
    sizeFilter: null as string | null
  });
  const [meetingReminders, setMeetingReminders] = useState<Array<{
    id: string;
    title: string;
    time: Date;
    participants: string[];
  }>>([]);
  const [showAnalytics, setShowAnalytics] = useState(false);
  const [analyticsData, setAnalyticsData] = useState({
    totalMessages: 0,
    activeUsers: 0,
    popularChannels: [] as Array<{ name: string; messageCount: number }>,
    messageTrends: [] as Array<{ date: string; count: number }>,
    topUsers: [] as Array<{ name: string; messageCount: number }>
  });
  const [theme, setTheme] = useState<'light' | 'dark'>('light');
  const [draftMessages, setDraftMessages] = useState<{ [key: string]: string }>({});
  const [keyboardShortcuts, setKeyboardShortcuts] = useState({
    sendMessage: 'Enter',
    newLine: 'Shift+Enter',
    search: 'Ctrl+K',
    emoji: 'Ctrl+E',
    newChannel: 'Ctrl+N',
    newDirectMessage: 'Ctrl+D',
    toggleSidebar: 'Ctrl+B',
    toggleTheme: 'Ctrl+T',
    focusInput: 'Ctrl+L',
    clearInput: 'Escape',
    uploadFile: 'Ctrl+U',
    showWorkflow: 'Ctrl+W'
  });
  const [showPolls, setShowPolls] = useState(false);
  const [polls, setPolls] = useState<Array<{
    id: string;
    question: string;
    options: Array<{ text: string; votes: number; voters: string[] }>;
    createdBy: string;
    createdAt: Date;
    isActive: boolean;
  }>>([]);
  const [messageTemplates, setMessageTemplates] = useState<Array<{
    id: string;
    title: string;
    content: string;
    category: string;
  }>>([
    { id: '1', title: 'Merhaba', content: 'Merhaba! Nasılsınız?', category: 'genel' },
    { id: '2', title: 'Toplantı Hatırlatması', content: 'Yarın saat 14:00\'da toplantımız var.', category: 'toplantı' },
    { id: '3', title: 'Teşekkür', content: 'Teşekkür ederim!', category: 'genel' }
  ]);
  const [showTemplates, setShowTemplates] = useState(false);
  const [showNotifications, setShowNotifications] = useState(false);
  const [unreadNotifications, setUnreadNotifications] = useState(0);

  // Push Notification States
  const [notificationPermission, setNotificationPermission] = useState<NotificationPermission>({
    granted: false,
    denied: false,
    default: false
  });
  const [notificationSettings, setNotificationSettings] = useState<NotificationSettings>({
    enabled: true,
    silentHours: {
      enabled: true,
      start: "22:00",
      end: "08:00"
    },
    priorityContacts: [],
    urgentKeywords: ["acil", "önemli", "deadline", "urgent", "kritik"],
    doNotDisturb: false,
    notificationTypes: {
      newMessage: true,
      mention: true,
      directMessage: true,
      channelAnnouncement: true,
      systemNotification: true
    },
    soundEnabled: true,
    vibrationEnabled: true,
    showPreview: true,
    autoMarkAsRead: false
  });
  
  // Gelişmiş Bildirim Sistemi State'leri
  const [smartNotifications, setSmartNotifications] = useState({
    enabled: true,
    learningMode: true,
    userPreferences: {} as { [key: string]: any },
    notificationSchedule: {
      workHours: { start: "09:00", end: "18:00" },
      breakTime: { start: "12:00", end: "13:00" },
      weekendMode: true
    },
    notificationGrouping: {
      enabled: true,
      timeWindow: 5, // dakika
      maxGroupSize: 5
    },
    notificationPriority: {
      autoDetect: true,
      keywords: ["acil", "önemli", "deadline", "urgent", "kritik", "toplantı", "proje"],
      senderPriority: {} as { [key: string]: number }
    }
  });
  const [pushNotifications, setPushNotifications] = useState<PushNotification[]>([]);
  const [serviceWorkerRegistration, setServiceWorkerRegistration] = useState<ServiceWorkerRegistration | null>(null);
  const [showNotificationSettings, setShowNotificationSettings] = useState(false);
  const [notificationHistory, setNotificationHistory] = useState<PushNotification[]>([]);
  const [isNotificationSupported, setIsNotificationSupported] = useState(false);

  // 3 noktalı menü state'leri
  const [showEmployeeMenu, setShowEmployeeMenu] = useState<string | null>(null);
  const [employeeMenuPosition, setEmployeeMenuPosition] = useState({ x: 0, y: 0 });

  // Rich editor state
  const [isRichEditor, setIsRichEditor] = useState(false);
  const [textSelection, setTextSelection] = useState({ start: 0, end: 0 });
  const [isBold, setIsBold] = useState(false);
  const [isItalic, setIsItalic] = useState(false);
  const [isUnderline, setIsUnderline] = useState(false);
  const [characterCount, setCharacterCount] = useState(0);
  const maxCharacters = 2000;

  // Mention system state
  const [showMentionSuggestions, setShowMentionSuggestions] = useState(false);
  const [mentionQuery, setMentionQuery] = useState('');
  const [mentionPosition, setMentionPosition] = useState({ start: 0, end: 0 });
  const [filteredEmployees, setFilteredEmployees] = useState<Employee[]>([]);

  // Bildirim verilerini yükle
  const loadNotifications = async () => {
    try {
      // Geçici olarak notifications tablosu sorunu için mock data kullan
      console.log('📧 Notifications yükleniyor (mock data)...');
      setUnreadNotifications(0);
      
      // Gerçek notifications tablosu düzeltildiğinde bu kısmı aktif edin
      /*
      const { data: notifications, error } = await supabase
        .from('notifications')
        .select('*')
        .eq('user_id', currentUserId)
        .eq('read', false)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Bildirimler yüklenirken hata:', error);
        return;
      }

      setUnreadNotifications(notifications?.length || 0);
      */
    } catch (error) {
      console.error('Bildirimler yüklenirken hata:', error);
    }
  };

  // Push Notification Functions
  const setupPushNotifications = async () => {
    try {
      // Notification API desteğini kontrol et
      if (!('Notification' in window)) {
        console.log('Bu tarayıcı push notification desteklemiyor');
        setIsNotificationSupported(false);
        return;
      }

      setIsNotificationSupported(true);

      // Mevcut izin durumunu kontrol et
      const permission = Notification.permission;
      setNotificationPermission({
        granted: permission === 'granted',
        denied: permission === 'denied',
        default: permission === 'default'
      });

      // Service Worker kaydı
      if ('serviceWorker' in navigator) {
        try {
          const registration = await navigator.serviceWorker.register('/sw.js');
          setServiceWorkerRegistration(registration);
          console.log('Service Worker başarıyla kaydedildi:', registration);
        } catch (error) {
          console.error('Service Worker kaydı başarısız:', error);
        }
      }

      // Notification ayarlarını localStorage'dan yükle
      const savedSettings = localStorage.getItem('notificationSettings');
      if (savedSettings) {
        setNotificationSettings(JSON.parse(savedSettings));
      }

      // Notification geçmişini yükle
      const savedHistory = localStorage.getItem('notificationHistory');
      if (savedHistory) {
        setNotificationHistory(JSON.parse(savedHistory));
      }
    } catch (error) {
      console.error('Push notification setup hatası:', error);
    }
  };

  const requestNotificationPermission = async () => {
    try {
      if (!('Notification' in window)) {
        toast.error('Bu tarayıcı push notification desteklemiyor');
        return false;
      }

      const permission = await Notification.requestPermission();
      setNotificationPermission({
        granted: permission === 'granted',
        denied: permission === 'denied',
        default: permission === 'default'
      });

      if (permission === 'granted') {
        toast.success('Bildirim izni verildi!');
        return true;
      } else {
        toast.error('Bildirim izni reddedildi');
        return false;
      }
    } catch (error) {
      console.error('Bildirim izni isteme hatası:', error);
      toast.error('Bildirim izni alınamadı');
      return false;
    }
  };

  const isSilentHours = (): boolean => {
    if (!notificationSettings.silentHours.enabled) return false;
    
    const now = new Date();
    const currentTime = now.getHours() * 60 + now.getMinutes();
    
    const [startHour, startMin] = notificationSettings.silentHours.start.split(':').map(Number);
    const [endHour, endMin] = notificationSettings.silentHours.end.split(':').map(Number);
    
    const startTime = startHour * 60 + startMin;
    const endTime = endHour * 60 + endMin;
    
    if (startTime > endTime) {
      // Gece yarısını kapsayan sessiz saatler (22:00 - 08:00)
      return currentTime >= startTime || currentTime <= endTime;
    } else {
      return currentTime >= startTime && currentTime <= endTime;
    }
  };

  const isPriorityContact = (senderId: string): boolean => {
    return notificationSettings.priorityContacts.includes(senderId);
  };

  const hasUrgentKeywords = (message: string): boolean => {
    const lowerMessage = message.toLowerCase();
    return notificationSettings.urgentKeywords.some(keyword => 
      lowerMessage.includes(keyword.toLowerCase())
    );
  };

  const shouldShowNotification = (message: ChatMessage): boolean => {
    if (!notificationSettings.enabled || notificationPermission.denied) return false;
    if (notificationSettings.doNotDisturb) return false;
    if (isSilentHours() && !isPriorityContact(message.senderId) && !hasUrgentKeywords(message.content)) return false;
    
    // Akıllı bildirim kontrolleri
    if (smartNotifications.enabled) {
      // Çalışma saatleri kontrolü
      if (!isWorkHours() && !isUrgentMessage(message)) return false;
      
      // Mola saatleri kontrolü
      if (isBreakTime() && !isUrgentMessage(message)) return false;
      
      // Hafta sonu kontrolü
      if (isWeekend() && smartNotifications.notificationSchedule.weekendMode && !isUrgentMessage(message)) return false;
      
      // Kullanıcı tercihleri kontrolü
      if (shouldSuppressNotification(message)) return false;
    }
    
    // Notification türü kontrolü
    switch (message.messageType) {
      case 'text':
        return notificationSettings.notificationTypes.newMessage;
      case 'announcement':
        return notificationSettings.notificationTypes.channelAnnouncement;
      default:
        return true;
    }
  };

  // Akıllı Bildirim Fonksiyonları
  const isWorkHours = (): boolean => {
    const now = new Date();
    const currentTime = now.getHours() * 60 + now.getMinutes();
    const [startHour, startMin] = smartNotifications.notificationSchedule.workHours.start.split(':').map(Number);
    const [endHour, endMin] = smartNotifications.notificationSchedule.workHours.end.split(':').map(Number);
    const startTime = startHour * 60 + startMin;
    const endTime = endHour * 60 + endMin;
    
    return currentTime >= startTime && currentTime <= endTime;
  };

  const isBreakTime = (): boolean => {
    const now = new Date();
    const currentTime = now.getHours() * 60 + now.getMinutes();
    const [startHour, startMin] = smartNotifications.notificationSchedule.breakTime.start.split(':').map(Number);
    const [endHour, endMin] = smartNotifications.notificationSchedule.breakTime.end.split(':').map(Number);
    const startTime = startHour * 60 + startMin;
    const endTime = endHour * 60 + endMin;
    
    return currentTime >= startTime && currentTime <= endTime;
  };

  const isWeekend = (): boolean => {
    const now = new Date();
    return now.getDay() === 0 || now.getDay() === 6; // 0 = Pazar, 6 = Cumartesi
  };

  const isUrgentMessage = (message: ChatMessage): boolean => {
    // Acil kelime kontrolü
    const hasUrgentKeyword = smartNotifications.notificationPriority.keywords.some(keyword =>
      message.content.toLowerCase().includes(keyword.toLowerCase())
    );
    
    // Gönderen öncelik kontrolü
    const senderPriority = smartNotifications.notificationPriority.senderPriority[message.senderId] || 0;
    
    // Mention kontrolü
    const isMentioned = message.mentions?.includes(currentUserId);
    
    // Direkt mesaj kontrolü
    const isDirectMessage = message.isDirectMessage || false;
    
    return hasUrgentKeyword || senderPriority > 7 || isMentioned || isDirectMessage;
  };

  const shouldSuppressNotification = (message: ChatMessage): boolean => {
    const userPrefs = smartNotifications.userPreferences;
    
    // Belirli kanallardan gelen mesajları bastır
    if (userPrefs.suppressedChannels?.includes(message.channelId)) {
      return true;
    }
    
    // Belirli kullanıcılardan gelen mesajları bastır
    if (userPrefs.suppressedUsers?.includes(message.senderId)) {
      return true;
    }
    
    // Belirli kelime içeren mesajları bastır
    if (userPrefs.suppressedKeywords) {
      const hasSuppressedKeyword = userPrefs.suppressedKeywords.some((keyword: string) =>
        message.content.toLowerCase().includes(keyword.toLowerCase())
      );
      if (hasSuppressedKeyword) return true;
    }
    
    return false;
  };

  const createSmartNotification = async (message: ChatMessage): Promise<void> => {
    if (!shouldShowNotification(message)) return;

    // Bildirim gruplandırma
    if (smartNotifications.notificationGrouping.enabled) {
      const groupedNotification = await groupNotifications(message);
      if (groupedNotification) {
        return; // Gruplandırılmış bildirim gösterildi
      }
    }

    // Akıllı öncelik belirleme
    const priority = determineNotificationPriority(message);
    
    // Özelleştirilmiş bildirim oluştur
    const notification: PushNotification = {
      id: `smart_${Date.now()}_${Math.random()}`,
      title: getSmartNotificationTitle(message),
      body: getSmartNotificationBody(message),
      icon: message.senderAvatar || '/default-avatar.png',
      image: message.attachments?.[0],
      badge: '/badge-icon.png',
      tag: `smart_${message.channelId || 'dm'}`,
      data: {
        messageId: message.id,
        channelId: message.channelId,
        senderId: message.senderId,
        type: message.messageType,
        priority: priority
      },
      actions: getSmartNotificationActions(message),
      requireInteraction: priority === 'urgent',
      silent: !notificationSettings.soundEnabled || priority === 'low',
      timestamp: new Date(),
      type: message.isDirectMessage ? 'direct' : 'message',
      senderId: message.senderId,
      senderName: message.senderName,
      senderAvatar: message.senderAvatar,
      channelId: message.channelId,
      channelName: selectedChannel?.name,
      messageId: message.id,
      priority: priority,
      isRead: false
    };

    // Bildirim göster
    if (Notification.permission === 'granted') {
      const browserNotification = new Notification(notification.title, {
        body: notification.body,
        icon: notification.icon,
        badge: notification.badge,
        tag: notification.tag,
        data: notification.data,
        requireInteraction: notification.requireInteraction,
        silent: notification.silent
      });

      browserNotification.onclick = () => {
        handleNotificationClick(notification);
      };

      // Akıllı otomatik kapatma
      const autoCloseTime = priority === 'urgent' ? 10000 : priority === 'high' ? 8000 : 5000;
      setTimeout(() => {
        browserNotification.close();
      }, autoCloseTime);
    }

    // Bildirim geçmişine ekle
    setNotificationHistory(prev => [notification, ...prev.slice(0, 49)]);
    setPushNotifications(prev => [notification, ...prev.slice(0, 9)]);
  };

  const groupNotifications = async (message: ChatMessage): Promise<boolean> => {
    const recentNotifications = notificationHistory.filter(n => 
      n.timestamp > new Date(Date.now() - smartNotifications.notificationGrouping.timeWindow * 60 * 1000)
    );

    if (recentNotifications.length >= smartNotifications.notificationGrouping.maxGroupSize) {
      // Gruplandırılmış bildirim oluştur
      const groupedNotification: PushNotification = {
        id: `grouped_${Date.now()}`,
        title: `${recentNotifications.length + 1} yeni mesaj`,
        body: `${recentNotifications.length + 1} yeni mesaj aldınız`,
        icon: '/grouped-icon.png',
        badge: '/badge-icon.png',
        tag: 'grouped_notifications',
        data: { type: 'grouped', count: recentNotifications.length + 1 },
        actions: [
          { action: 'view_all', title: 'Tümünü Görüntüle', icon: '/view-icon.png' },
          { action: 'mark_all_read', title: 'Tümünü Okundu İşaretle', icon: '/read-icon.png' }
        ],
        requireInteraction: false,
        silent: false,
        timestamp: new Date(),
        type: 'system',
        priority: 'normal',
        isRead: false
      };

      if (Notification.permission === 'granted') {
        new Notification(groupedNotification.title, {
          body: groupedNotification.body,
          icon: groupedNotification.icon,
          badge: groupedNotification.badge,
          tag: groupedNotification.tag,
          data: groupedNotification.data
        });
      }

      return true;
    }

    return false;
  };

  const determineNotificationPriority = (message: ChatMessage): 'low' | 'normal' | 'high' | 'urgent' => {
    if (isUrgentMessage(message)) return 'urgent';
    if (isPriorityContact(message.senderId)) return 'high';
    if (message.mentions?.includes(currentUserId)) return 'high';
    if (message.isDirectMessage) return 'high';
    if (message.messageType === 'announcement') return 'normal';
    
    // Kullanıcı davranış analizi
    const userPrefs = smartNotifications.userPreferences;
    const senderPriority = userPrefs.senderPriority?.[message.senderId] || 5;
    
    if (senderPriority > 8) return 'high';
    if (senderPriority < 3) return 'low';
    
    return 'normal';
  };

  const getSmartNotificationTitle = (message: ChatMessage): string => {
    const priority = determineNotificationPriority(message);
    const priorityIcon = priority === 'urgent' ? '🚨' : priority === 'high' ? '⚠️' : '💬';
    
    if (message.isDirectMessage) {
      return `${priorityIcon} ${message.senderName} size özel mesaj gönderdi`;
    }
    
    if (message.mentions?.includes(currentUserId)) {
      return `${priorityIcon} ${message.senderName} sizi etiketledi`;
    }
    
    if (message.messageType === 'announcement') {
      return `${priorityIcon} 📢 ${selectedChannel?.name} kanalında duyuru`;
    }
    
    return `${priorityIcon} ${message.senderName} - ${selectedChannel?.name || 'Özel Mesaj'}`;
  };

  const getSmartNotificationBody = (message: ChatMessage): string => {
    if (!notificationSettings.showPreview) {
      return 'Yeni bir mesaj aldınız';
    }
    
    const content = message.content.length > 100 
      ? message.content.substring(0, 100) + '...' 
      : message.content;
    
    // Akıllı özet
    if (smartNotifications.enabled && content.length > 50) {
      const words = content.split(' ');
      if (words.length > 10) {
        return words.slice(0, 10).join(' ') + '...';
      }
    }
    
    return content;
  };

  const getSmartNotificationActions = (message: ChatMessage): NotificationAction[] => {
    const actions: NotificationAction[] = [
      { action: 'reply', title: 'Yanıtla', icon: '/reply-icon.png' }
    ];

    if (message.isDirectMessage) {
      actions.push({ action: 'view_profile', title: 'Profili Görüntüle', icon: '/profile-icon.png' });
    }

    if (message.attachments && message.attachments.length > 0) {
      actions.push({ action: 'view_attachments', title: 'Dosyaları Görüntüle', icon: '/file-icon.png' });
    }

    if (message.mentions?.includes(currentUserId)) {
      actions.push({ action: 'view_mentions', title: 'Mention\'ları Görüntüle', icon: '/mention-icon.png' });
    }

    return actions;
  };

  const createNotification = async (message: ChatMessage): Promise<void> => {
    try {
      if (!shouldShowNotification(message)) return;

      const notification: PushNotification = {
        id: `notification_${Date.now()}_${Math.random()}`,
        title: getNotificationTitle(message),
        body: getNotificationBody(message),
        icon: message.senderAvatar || '/default-avatar.png',
        image: message.attachments?.[0],
        badge: '/badge-icon.png',
        tag: `message_${message.channelId || 'dm'}`,
        data: {
          messageId: message.id,
          channelId: message.channelId,
          senderId: message.senderId,
          type: message.messageType
        },
        actions: [
          {
            action: 'reply',
            title: 'Yanıtla',
            icon: '/reply-icon.png'
          },
          {
            action: 'mark_read',
            title: 'Okundu İşaretle',
            icon: '/read-icon.png'
          }
        ],
        requireInteraction: false,
        silent: !notificationSettings.soundEnabled,
        timestamp: new Date(),
        type: message.isDirectMessage ? 'direct' : 'message',
        senderId: message.senderId,
        senderName: message.senderName,
        senderAvatar: message.senderAvatar,
        channelId: message.channelId,
        channelName: selectedChannel?.name,
        messageId: message.id,
        priority: getNotificationPriority(message),
        isRead: false
      };

      // Tarayıcı notification'ı göster
      if (Notification.permission === 'granted') {
        const browserNotification = new Notification(notification.title, {
          body: notification.body,
          icon: notification.icon,
          badge: notification.badge,
          tag: notification.tag,
          data: notification.data,
          requireInteraction: notification.requireInteraction,
          silent: notification.silent
        });

        // Notification event handlers
        browserNotification.onclick = () => {
          handleNotificationClick(notification);
        };

        // Notification'ı otomatik kapat
        setTimeout(() => {
          browserNotification.close();
        }, 5000);
      }

      // Notification'ı geçmişe ekle
      setNotificationHistory(prev => [notification, ...prev.slice(0, 49)]); // Son 50 notification'ı tut
      localStorage.setItem('notificationHistory', JSON.stringify([notification, ...notificationHistory.slice(0, 49)]));

      // Push notification'ı geçmişe ekle
      setPushNotifications(prev => [notification, ...prev.slice(0, 9)]); // Son 10 notification'ı tut

    } catch (error) {
      console.error('Notification oluşturma hatası:', error);
    }
  };

  const getNotificationTitle = (message: ChatMessage): string => {
    if (message.isDirectMessage) {
      return `${message.senderName} size özel mesaj gönderdi`;
    }
    
    if (message.mentions?.includes(currentUserId)) {
      return `${message.senderName} sizi etiketledi`;
    }
    
    if (message.messageType === 'announcement') {
      return `📢 ${selectedChannel?.name} kanalında duyuru`;
    }
    
    return `${message.senderName} - ${selectedChannel?.name || 'Özel Mesaj'}`;
  };

  const getNotificationBody = (message: ChatMessage): string => {
    if (!notificationSettings.showPreview) {
      return 'Yeni bir mesaj aldınız';
    }
    
    const content = message.content.length > 100 
      ? message.content.substring(0, 100) + '...' 
      : message.content;
    
    return content;
  };

  const getNotificationPriority = (message: ChatMessage): 'low' | 'normal' | 'high' | 'urgent' => {
    if (isPriorityContact(message.senderId)) return 'high';
    if (hasUrgentKeywords(message.content)) return 'urgent';
    if (message.mentions?.includes(currentUserId)) return 'high';
    if (message.isDirectMessage) return 'high';
    if (message.messageType === 'announcement') return 'normal';
    return 'low';
  };

  const handleNotificationClick = (notification: PushNotification) => {
    // Notification'a tıklandığında yapılacak işlemler
    if (notification.channelId) {
      const channel = channels.find(c => c.id === notification.channelId);
      if (channel) {
        setSelectedChannel(channel);
        setSelectedEmployee(null);
      }
    }
    
    if (notification.messageId) {
      // Mesaja scroll yap
      setTimeout(() => {
        const messageElement = document.getElementById(`message-${notification.messageId}`);
        if (messageElement) {
          messageElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
          messageElement.classList.add('highlight-message');
          setTimeout(() => {
            messageElement.classList.remove('highlight-message');
          }, 3000);
        }
      }, 500);
    }
    
    // Notification'ı okundu olarak işaretle
    markNotificationAsRead(notification.id);
  };

  const handleNotificationAction = (notification: PushNotification, action: string) => {
    switch (action) {
      case 'reply':
        // Yanıtla butonuna tıklandığında
        if (notification.channelId) {
          const channel = channels.find(c => c.id === notification.channelId);
          if (channel) {
            setSelectedChannel(channel);
            setSelectedEmployee(null);
            setNewMessage(`@${notification.senderName} `);
            editorRef.current?.focus();
          }
        }
        break;
      case 'mark_read':
        // Okundu işaretle butonuna tıklandığında
        markNotificationAsRead(notification.id);
        break;
    }
  };

  const markNotificationAsRead = (notificationId: string) => {
    setNotificationHistory(prev => 
      prev.map(notification => 
        notification.id === notificationId 
          ? { ...notification, isRead: true }
          : notification
      )
    );
    
    setPushNotifications(prev => 
      prev.map(notification => 
        notification.id === notificationId 
          ? { ...notification, isRead: true }
          : notification
      )
    );
    
    // localStorage'ı güncelle
    const updatedHistory = notificationHistory.map(notification => 
      notification.id === notificationId 
        ? { ...notification, isRead: true }
        : notification
    );
    localStorage.setItem('notificationHistory', JSON.stringify(updatedHistory));
  };

  const updateNotificationSettings = (newSettings: Partial<NotificationSettings>) => {
    const updatedSettings = { ...notificationSettings, ...newSettings };
    setNotificationSettings(updatedSettings);
    localStorage.setItem('notificationSettings', JSON.stringify(updatedSettings));
    toast.success('Bildirim ayarları güncellendi');
  };

  const clearNotificationHistory = () => {
    setNotificationHistory([]);
    setPushNotifications([]);
    localStorage.removeItem('notificationHistory');
    toast.success('Bildirim geçmişi temizlendi');
  };

  const testNotification = async () => {
    try {
      if (!notificationPermission.granted) {
        toast.error('Önce bildirim izni vermeniz gerekiyor');
        return;
      }

      const testMessage: ChatMessage = {
        id: `test_${Date.now()}`,
        content: 'Bu bir test bildirimidir. Push notification sistemi çalışıyor!',
        senderId: 'test-sender',
        senderName: 'Test Kullanıcı',
        senderRole: 'Test',
        senderAvatar: 'TK',
        channelId: selectedChannel?.id || '',
        messageType: 'text',
        timestamp: new Date(),
        mentions: [],
        isDirectMessage: false
      };

      await createNotification(testMessage);
      toast.success('Test bildirimi gönderildi!');
    } catch (error) {
      console.error('Test notification hatası:', error);
      toast.error('Test bildirimi gönderilemedi');
    }
  };

  // Mock data for demonstration
  const mockEmployees: Employee[] = [
    {
      id: '1',
      name: 'Ahmet Yılmaz',
      role: 'İK Müdürü',
      department: 'İnsan Kaynakları',
      avatar: 'AY',
      status: 'online',
      lastSeen: new Date(),
      isTyping: false,
      availability: 'available'
    },
    {
      id: '2',
      name: 'Fatma Demir',
      role: 'Muhasebe Uzmanı',
      department: 'Muhasebe',
      avatar: 'FD',
      status: 'busy',
      lastSeen: new Date(Date.now() - 5 * 60 * 1000),
      isTyping: true,
      availability: 'busy'
    },
    {
      id: '3',
      name: 'Mehmet Kaya',
      role: 'Yazılım Geliştirici',
      department: 'Teknoloji',
      avatar: 'MK',
      status: 'online',
      lastSeen: new Date(),
      isTyping: false,
      availability: 'available'
    },
    {
      id: '4',
      name: 'Ayşe Özkan',
      role: 'Satış Temsilcisi',
      department: 'Satış',
      avatar: 'AÖ',
      status: 'away',
      lastSeen: new Date(Date.now() - 15 * 60 * 1000),
      isTyping: false,
      availability: 'available'
    }
  ];

  const mockChannels: ChatChannel[] = [
    {
      id: 'general',
      name: 'genel',
      description: 'Tüm şirket duyuruları ve genel konular',
      type: 'public',
      members: ['1', '2', '3', '4'],
      isPinned: true,
      unreadCount: 0,
      lastMessage: 'Merhaba herkese!',
      lastMessageTime: new Date(Date.now() - 30 * 60 * 1000)
    },
    {
      id: 'hr',
      name: 'ik',
      description: 'İnsan Kaynakları departmanı',
      type: 'public',
      members: ['1', '2'],
      unreadCount: 2,
      lastMessage: 'Yeni çalışan oryantasyonu hakkında',
      lastMessageTime: new Date(Date.now() - 10 * 60 * 1000)
    },
    {
      id: 'tech',
      name: 'teknoloji',
      description: 'Teknoloji departmanı',
      type: 'public',
      members: ['3'],
      unreadCount: 0,
      lastMessage: 'Sistem güncellemesi tamamlandı',
      lastMessageTime: new Date(Date.now() - 45 * 60 * 1000)
    },
    {
      id: 'sales',
      name: 'satış',
      description: 'Satış departmanı',
      type: 'public',
      members: ['4'],
      unreadCount: 1,
      lastMessage: 'Bu ayki hedeflerimiz',
      lastMessageTime: new Date(Date.now() - 20 * 60 * 1000)
    },
    // Proje kanalları
    {
      id: '1',
      name: 'e-ticaret-platformu',
      description: 'E-ticaret Platformu Geliştirme projesi',
      type: 'public',
      members: ['1', '2', '3', '4'],
      unreadCount: 0,
      lastMessage: 'Proje durumu güncellemesi',
      lastMessageTime: new Date(Date.now() - 15 * 60 * 1000)
    },
    {
      id: '2',
      name: 'mobil-uygulama',
      description: 'Mobil Uygulama Geliştirme projesi',
      type: 'public',
      members: ['1', '2', '3'],
      unreadCount: 1,
      lastMessage: 'React Native kurulumu tamamlandı',
      lastMessageTime: new Date(Date.now() - 5 * 60 * 1000)
    },
    {
      id: '3',
      name: 'crm-entegrasyonu',
      description: 'CRM Sistemi Entegrasyonu projesi',
      type: 'public',
      members: ['1', '3', '4'],
      unreadCount: 0,
      lastMessage: 'API entegrasyonu test edildi',
      lastMessageTime: new Date(Date.now() - 25 * 60 * 1000)
    },
    {
      id: '4',
      name: 'web-sitesi-yenileme',
      description: 'Web Sitesi Yenileme projesi',
      type: 'public',
      members: ['2', '4'],
      unreadCount: 0,
      lastMessage: 'Proje tamamlandı!',
      lastMessageTime: new Date(Date.now() - 2 * 60 * 60 * 1000)
    }
  ];

  useEffect(() => {
    loadEmployeeData();
    loadChannelData();
    loadNotifications();
    setupRealtimeSubscriptions();
    setupPushNotifications();
    setSelectedChannel(mockChannels[0]); // Genel kanalı varsayılan olarak seç
    
    // Arama geçmişini yükle
    const history = JSON.parse(localStorage.getItem('searchHistory') || '[]');
    setSearchHistory(history);
    
    // Debug için employees yüklendiğinde console'a yazdır
    console.log('🚀 useEffect çalıştı - employees yükleniyor...');
  }, []);

  // Kanal veya çalışan seçildiğinde mesajları yükle
  useEffect(() => {
    if (selectedChannel) {
      loadMessages(selectedChannel.id);
    } else if (selectedEmployee) {
      loadMessages(undefined, selectedEmployee.id);
    }
  }, [selectedChannel, selectedEmployee]);

  // initialChannelId prop'u varsa o kanalı seç
  useEffect(() => {
    if (initialChannelId && channels.length > 0) {
      const targetChannel = channels.find(channel => channel.id === initialChannelId);
      if (targetChannel) {
        setSelectedChannel(targetChannel);
      }
    }
  }, [initialChannelId, channels]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Emoji picker'ı dışarı tıklandığında kapat
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (showEmojiPicker) {
        const target = event.target as HTMLElement;
        if (!target.closest('.emoji-picker')) {
          setShowEmojiPicker(false);
          setSelectedMessageForReaction(null);
        }
      }
      
      if (showEmployeeMenu) {
        const target = event.target as HTMLElement;
        if (!target.closest('.employee-menu')) {
          closeEmployeeMenu();
        }
      }
    };

    const handleKeyDown = (event: KeyboardEvent) => {
      if (showEmojiPicker && event.key === 'Escape') {
        setShowEmojiPicker(false);
        setSelectedMessageForReaction(null);
      }
      
      if (showEmployeeMenu && event.key === 'Escape') {
        closeEmployeeMenu();
      }
    };

    if (showEmojiPicker || showEmployeeMenu) {
      document.addEventListener('click', handleClickOutside);
      document.addEventListener('keydown', handleKeyDown);
      return () => {
        document.removeEventListener('click', handleClickOutside);
        document.removeEventListener('keydown', handleKeyDown);
      };
    }
  }, [showEmojiPicker, showEmployeeMenu]);

  const loadEmployeeData = async () => {
    try {
      // Gerçek veritabanından çalışanları yükle
      const { data: employeesData, error } = await supabase
        .from('employees')
        .select('id, name, position, department, status')
        .eq('status', 'active')
        .order('name');

      if (error) {
        console.error('Çalışan verisi yükleme hatası:', error);
        toast.error('Çalışan verisi yüklenirken hata oluştu');
        // Hata durumunda mock data kullan
        setEmployees(mockEmployees);
        setOnlineEmployees(mockEmployees.filter(emp => emp.status === 'online'));
        return;
      }

      if (employeesData && employeesData.length > 0) {
        const formattedEmployees: Employee[] = employeesData.map(emp => ({
          id: emp.id,
          name: emp.name,
          role: emp.position,
          department: emp.department,
          avatar: emp.name.split(' ').map((n: string) => n[0]).join(''),
          status: 'online' as const, // Varsayılan olarak online
          lastSeen: new Date(),
          isTyping: false,
          availability: 'available' as const
        }));
        
        setEmployees(formattedEmployees);
        setOnlineEmployees(formattedEmployees);
      } else {
        // Veri yoksa mock data kullan
        setEmployees(mockEmployees);
        setOnlineEmployees(mockEmployees.filter(emp => emp.status === 'online'));
        console.log('✅ Mock employees yüklendi:', mockEmployees.length, 'çalışan');
      }
    } catch (error) {
      console.error('Çalışan verisi yükleme hatası:', error);
      toast.error('Çalışan verisi yüklenirken hata oluştu');
      // Hata durumunda mock data kullan
      setEmployees(mockEmployees);
      setOnlineEmployees(mockEmployees.filter(emp => emp.status === 'online'));
    }
  };

  const loadChannelData = async () => {
    try {
      // Gerçek veri yerine mock data kullanıyoruz
      setChannels(mockChannels);
    } catch (error) {
      console.error('Kanal verisi yükleme hatası:', error);
      toast.error('Kanal verisi yüklenirken hata oluştu');
    }
  };

  const loadMessages = async (channelId?: string, recipientId?: string) => {
    try {
      console.log('Mesajlar yükleniyor - Channel ID:', channelId, 'Recipient ID:', recipientId);
      console.log('Current User ID:', currentUserId);
      
      let data;
      let error;

      if (channelId) {
        // Kanal mesajları
        const result = await supabase
          .from('employee_messages')
          .select('*')
          .eq('channel_id', channelId)
          .order('created_at', { ascending: true });
        data = result.data;
        error = result.error;
      } else if (recipientId) {
        // DM mesajları için: mevcut kullanıcı ile seçili çalışan arasındaki mesajları bul
        const result = await supabase
          .from('employee_messages')
          .select('*')
          .eq('is_direct_message', true)
          .or(`sender_id.eq.${currentUserId},sender_id.eq.${recipientId}`)
          .order('created_at', { ascending: true });
        
        // Sonuçları filtrele - sadece iki kişi arasındaki mesajları al
        data = result.data?.filter(msg => 
          (msg.sender_id === currentUserId && msg.recipient_id === recipientId) ||
          (msg.sender_id === recipientId && msg.recipient_id === currentUserId)
        ) || [];
        error = result.error;
      } else {
        // Hiçbir seçim yoksa boş veri
        data = [];
        error = null;
      }

      if (error) {
        console.error('Mesaj yükleme hatası:', error);
        // Hata durumunda boş mesaj listesi göster
        setMessages([]);
        return;
      }

      if (data && data.length > 0) {
        const formattedMessages: ChatMessage[] = data.map(msg => ({
          id: msg.id,
          content: msg.content,
          senderId: msg.sender_id,
          senderName: msg.sender_name,
          senderRole: msg.sender_role,
          senderAvatar: msg.sender_avatar,
          channelId: msg.channel_id,
          messageType: msg.message_type,
          attachments: msg.attachments || [],
          timestamp: new Date(msg.created_at),
          isPinned: msg.is_pinned,
          isEdited: msg.is_edited,
          editedAt: msg.edited_at ? new Date(msg.edited_at) : undefined,
          reactions: msg.reactions || {},
          mentions: msg.mentions || [],
          isDirectMessage: msg.is_direct_message,
          recipientId: msg.recipient_id
        }));
        setMessages(formattedMessages);
      } else {
        // Veri yoksa boş liste göster
        setMessages([]);
      }
    } catch (error) {
      console.error('Mesaj yükleme hatası:', error);
      toast.error('Mesajlar yüklenirken hata oluştu');
      // Hata durumunda boş mesaj listesi göster
      setMessages([]);
    }
  };

  const setupRealtimeSubscriptions = () => {
    // Mesaj subscription
    const messagesSubscription = supabase
      .channel('employee_messages')
      .on('postgres_changes', 
        { 
          event: '*', 
          schema: 'public', 
          table: 'employee_messages'
        }, 
        (payload: any) => {
          if (payload.eventType === 'INSERT') {
            const newMsg = {
              id: payload.new.id,
              content: payload.new.content,
              senderId: payload.new.sender_id,
              senderName: payload.new.sender_name,
              senderRole: payload.new.sender_role,
              senderAvatar: payload.new.sender_avatar,
              channelId: payload.new.channel_id,
              messageType: payload.new.message_type,
              attachments: payload.new.attachments || [],
              timestamp: new Date(payload.new.created_at),
              isPinned: payload.new.is_pinned,
              isEdited: payload.new.is_edited,
              editedAt: payload.new.edited_at ? new Date(payload.new.edited_at) : undefined,
              reactions: payload.new.reactions || {},
              mentions: payload.new.mentions || [],
              isDirectMessage: payload.new.is_direct_message,
              recipientId: payload.new.recipient_id
            };
            
            // Sadece seçili kanal veya çalışan için mesajları ekle
            if (selectedChannel && payload.new.channel_id === selectedChannel.id) {
              setMessages(prev => [...prev, newMsg]);
            } else if (selectedEmployee && payload.new.is_direct_message &&
              ((payload.new.sender_id === currentUserId && payload.new.recipient_id === selectedEmployee.id) ||
               (payload.new.sender_id === selectedEmployee.id && payload.new.recipient_id === currentUserId))) {
              setMessages(prev => [...prev, newMsg]);
            }

            // Push notification gönder (başka kullanıcılardan gelen mesajlar için)
            if (payload.new.sender_id !== currentUserId) {
              // Kanal mesajları için
              if (payload.new.channel_id && !payload.new.is_direct_message) {
                // Kullanıcının bu kanalın üyesi olup olmadığını kontrol et
                const channel = channels.find(c => c.id === payload.new.channel_id);
                if (channel && channel.members.includes(currentUserId)) {
                  createNotification(newMsg);
                }
              }
              
              // Direkt mesajlar için
              if (payload.new.is_direct_message && payload.new.recipient_id === currentUserId) {
                createNotification(newMsg);
              }
            }
          }
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(messagesSubscription);
    };
  };

  const sendMessage = async () => {
    console.log('Mesaj gönderiliyor...');
    console.log('Selected Channel:', selectedChannel);
    console.log('Selected Employee:', selectedEmployee);
    console.log('Current User ID:', currentUserId);
    
    if (!newMessage.trim() && attachments.length === 0) return;
    if (!selectedChannel && !selectedEmployee) return;

    try {
      // Mention'ları kontrol et ve bildirim gönder
      const mentionMatches = newMessage.match(/@([^@\s]+)/g);
      if (mentionMatches) {
        mentionMatches.forEach(mention => {
          const mentionedName = mention.substring(1); // @ işaretini kaldır
          const mentionedEmployee = employees.find(emp => 
            emp.name.toLowerCase().includes(mentionedName.toLowerCase()) ||
            generateUsername(emp.name) === mentionedName.toLowerCase()
          );
          
          if (mentionedEmployee && mentionedEmployee.id !== currentUserId) {
            sendNotification({
              type: 'mention',
              title: 'Mention Bildirimi',
              message: `${currentUserName} sizi bir mesajda etiketledi: "${newMessage.substring(0, 50)}${newMessage.length > 50 ? '...' : ''}"`,
              channelId: selectedChannel?.id || '',
              messageId: `msg_${Date.now()}`
            });
          }
        });
      }

      // HTML formatlamasını markdown'a çevir
      const messageDiv = document.getElementById('message-input') as HTMLDivElement;
      let content = newMessage;
      
      if (messageDiv) {
        // HTML içeriğini al ve markdown'a çevir
        const htmlContent = messageDiv.innerHTML;
        content = htmlContent
          .replace(/<strong[^>]*>(.*?)<\/strong>/g, '**$1**')
          .replace(/<em[^>]*>(.*?)<\/em>/g, '*$1*')
          .replace(/<u[^>]*>(.*?)<\/u>/g, '__$1__')
          .replace(/<span[^>]*>(.*?)<\/span>/g, '$1')
          .replace(/<div[^>]*>(.*?)<\/div>/g, '$1')
          .replace(/<br>/g, '\n');
      }

      const messageData = {
        content: content,
        sender_id: currentUserId || '00000000-0000-0000-0000-000000000001', // Fallback UUID
        sender_name: currentUserName,
        sender_role: currentUserRole,
        sender_avatar: currentUserName.split(' ').map(n => n[0]).join(''),
        channel_id: selectedChannel?.id || null,
        message_type: 'text',
        attachments: attachments.map(file => file.name),
        created_at: new Date().toISOString(),
        is_direct_message: !!selectedEmployee,
        recipient_id: selectedEmployee?.id || null
      };

      const { error } = await supabase
        .from('employee_messages')
        .insert([messageData]);

      if (error) throw error;

      // Mesaj gönderildikten sonra mesajları yeniden yükle
      if (selectedChannel) {
        await loadMessages(selectedChannel.id);
      } else if (selectedEmployee) {
        await loadMessages(undefined, selectedEmployee.id);
      }

      // Push notification gönder (başka kullanıcılar için)
      const newMessageObj: ChatMessage = {
        id: `msg_${Date.now()}`,
        content: newMessage,
        senderId: currentUserId,
        senderName: currentUserName,
        senderRole: currentUserRole,
        senderAvatar: currentUserName.split(' ').map(n => n[0]).join(''),
        channelId: selectedChannel?.id || '',
        messageType: 'text',
        attachments: attachments.map(file => file.name),
        timestamp: new Date(),
        mentions: mentionMatches?.map(mention => mention.substring(1)) || [],
        isDirectMessage: !!selectedEmployee,
        recipientId: selectedEmployee?.id
      };

      // Başka kullanıcılar için notification gönder
      if (selectedChannel) {
        const channelMembers = selectedChannel.members.filter(memberId => memberId !== currentUserId);
        channelMembers.forEach(memberId => {
          // Burada gerçek uygulamada WebSocket veya Server-Sent Events ile notification gönderilir
          console.log(`Notification gönderiliyor: ${memberId} kullanıcısına`);
        });
      } else if (selectedEmployee) {
        // Direkt mesaj için notification gönder
        console.log(`Direkt mesaj notification'ı gönderiliyor: ${selectedEmployee.id} kullanıcısına`);
      }

      // Otomatik görev çıkarma
      extractTaskFromMessage(newMessageObj);

      setNewMessage('');
      setAttachments([]);
      setIsTyping(false);
      setShowMentionSuggestions(false);
      
      // ContentEditable div'i temizle
      const clearDiv = document.getElementById('message-input') as HTMLDivElement;
      if (clearDiv) {
        clearDiv.innerHTML = '';
        clearDiv.setAttribute('data-empty', 'true');
      }
    } catch (error) {
      console.error('Mesaj gönderme hatası:', error);
      toast.error('Mesaj gönderilirken hata oluştu');
    }
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || []);
    
    files.forEach(file => {
      // Dosya boyutu kontrolü (10MB limit)
      if (file.size > 10 * 1024 * 1024) {
        toast.error(`${file.name} dosyası çok büyük. Maksimum 10MB olmalıdır.`);
        return;
      }

      // Dosya türü kontrolü - genişletilmiş destek
      const allowedTypes = [
        'image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/svg+xml',
        'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'application/vnd.ms-powerpoint', 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
        'text/plain', 'text/csv', 'text/html', 'application/json',
        'application/zip', 'application/x-rar-compressed', 'application/x-7z-compressed',
        'video/mp4', 'video/webm', 'video/ogg', 'audio/mp3', 'audio/wav', 'audio/ogg'
      ];

      if (!allowedTypes.includes(file.type)) {
        toast.error(`${file.name} dosya türü desteklenmiyor.`);
        return;
      }

      // Resim dosyaları için önizleme oluştur
      if (file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = (e) => {
          setFilePreview({ file, preview: e.target?.result as string });
        };
        reader.readAsDataURL(file);
      }

      setAttachments(prev => [...prev, file]);
      
      // Gelişmiş dosya yönetimi - dosya versiyonları
      const fileId = `${file.name}_${Date.now()}`;
      const newVersion = {
        version: 1,
        file: file,
        uploadedBy: currentUserId,
        uploadedAt: new Date(),
        changes: 'İlk yükleme'
      };
      
      setFileVersions(prev => ({
        ...prev,
        [fileId]: [newVersion]
      }));
      
      // Upload progress simülasyonu
      setUploadProgress(prev => ({ ...prev, [file.name]: 0 }));
      simulateUploadProgress(file.name);
    });
  };

  const simulateUploadProgress = (fileName: string) => {
    let progress = 0;
    const interval = setInterval(() => {
      progress += Math.random() * 20;
      if (progress >= 100) {
        progress = 100;
        clearInterval(interval);
      }
      setUploadProgress(prev => ({ ...prev, [fileName]: progress }));
    }, 100);
  };

  const removeAttachment = (index: number) => {
    const file = attachments[index];
    setAttachments(prev => prev.filter((_, i) => i !== index));
    setUploadProgress(prev => {
      const newProgress = { ...prev };
      delete newProgress[file.name];
      return newProgress;
    });
    if (filePreview?.file === file) {
      setFilePreview(null);
    }
  };

  // Dosya Önizleme Fonksiyonları
  const getFileType = (file: File): string => {
    if (file.type.startsWith('image/')) return 'image';
    if (file.type.startsWith('video/')) return 'video';
    if (file.type.startsWith('audio/')) return 'audio';
    if (file.type === 'application/pdf') return 'pdf';
    if (file.type.includes('word') || file.type.includes('document')) return 'document';
    if (file.type.includes('excel') || file.type.includes('spreadsheet')) return 'spreadsheet';
    if (file.type.includes('powerpoint') || file.type.includes('presentation')) return 'presentation';
    if (file.type.includes('text/') || file.type.includes('json') || file.type.includes('csv')) return 'text';
    if (file.type.includes('zip') || file.type.includes('rar') || file.type.includes('7z')) return 'archive';
    return 'unknown';
  };

  const getFileIcon = (fileType: string) => {
    switch (fileType) {
      case 'image': return '🖼️';
      case 'video': return '🎥';
      case 'audio': return '🎵';
      case 'pdf': return '📄';
      case 'document': return '📝';
      case 'spreadsheet': return '📊';
      case 'presentation': return '📽️';
      case 'text': return '📄';
      case 'archive': return '📦';
      default: return '📎';
    }
  };

  const formatFileSize = (bytes: number): string => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  // Gelişmiş Dosya Yönetimi Fonksiyonları
  const openFileManager = () => {
    setShowFileManager(true);
  };

  const closeFileManager = () => {
    setShowFileManager(false);
  };

  const createFileFolder = (name: string) => {
    const newFolder = {
      id: `folder_${Date.now()}`,
      name: name,
      files: [],
      createdAt: new Date(),
      updatedAt: new Date()
    };
    
    setFileFolders(prev => [...prev, newFolder]);
    toast.success(`"${name}" klasörü oluşturuldu`);
  };

  const addFileToFolder = (fileId: string, folderId: string) => {
    setFileFolders(prev => prev.map(folder => {
      if (folder.id === folderId) {
        return {
          ...folder,
          files: [...folder.files, fileId],
          updatedAt: new Date()
        };
      }
      return folder;
    }));
    
    toast.success('Dosya klasöre eklendi');
  };

  const removeFileFromFolder = (fileId: string, folderId: string) => {
    setFileFolders(prev => prev.map(folder => {
      if (folder.id === folderId) {
        return {
          ...folder,
          files: folder.files.filter(id => id !== fileId),
          updatedAt: new Date()
        };
      }
      return folder;
    }));
    
    toast.success('Dosya klasörden çıkarıldı');
  };

  const shareFileAdvanced = (fileId: string, users: string[], permissions: 'view' | 'edit' | 'admin', expiresAt?: Date, password?: string) => {
    setFileSharing(prev => ({
      ...prev,
      [fileId]: {
        sharedWith: users,
        permissions: permissions,
        expiresAt: expiresAt,
        password: password
      }
    }));
    
    toast.success(`Dosya ${users.length} kullanıcı ile paylaşıldı`);
  };

  const getFileVersions = (fileId: string) => {
    return fileVersions[fileId] || [];
  };

  const uploadNewVersion = (fileId: string, file: File, changes: string) => {
    const versions = getFileVersions(fileId);
    const newVersion = {
      version: versions.length + 1,
      file: file,
      uploadedBy: currentUserId,
      uploadedAt: new Date(),
      changes: changes
    };
    
    setFileVersions(prev => ({
      ...prev,
      [fileId]: [...versions, newVersion]
    }));
    
    toast.success(`Dosya v${newVersion.version} yüklendi`);
  };

  const downloadFileVersion = (fileId: string, version: number) => {
    const versions = getFileVersions(fileId);
    const targetVersion = versions.find(v => v.version === version);
    
    if (targetVersion) {
      const url = URL.createObjectURL(targetVersion.file);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${targetVersion.file.name}_v${version}`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }
  };

  const getFileSharingInfo = (fileId: string) => {
    return fileSharing[fileId];
  };

  const getAllFiles = () => {
    // Tüm dosyaları topla (attachments + message attachments)
    const allFiles: Array<{
      id: string;
      name: string;
      size: number;
      type: string;
      uploadedBy: string;
      uploadedAt: Date;
      folder?: string;
      shared?: boolean;
    }> = [];
    
    // Mevcut attachments
    attachments.forEach((file, index) => {
      allFiles.push({
        id: `attachment_${index}`,
        name: file.name,
        size: file.size,
        type: file.type,
        uploadedBy: currentUserId,
        uploadedAt: new Date()
      });
    });
    
    // Mesaj attachmentları
    messages.forEach(message => {
      if (message.attachments) {
        message.attachments.forEach((attachment, index) => {
          allFiles.push({
            id: `msg_${message.id}_${index}`,
            name: attachment,
            size: 0, // Mock size
            type: 'unknown',
            uploadedBy: message.senderId,
            uploadedAt: message.timestamp
          });
        });
      }
    });
    
    return allFiles;
  };

  const getFilteredFiles = () => {
    let files = getAllFiles();
    
    // Filtreleme
    if (fileManagerFilter.type !== 'all') {
      files = files.filter(file => file.type.startsWith(fileManagerFilter.type));
    }
    
    if (fileManagerFilter.size !== 'all') {
      const sizeRanges = {
        'small': [0, 1024 * 1024], // 0-1MB
        'medium': [1024 * 1024, 10 * 1024 * 1024], // 1-10MB
        'large': [10 * 1024 * 1024, Infinity] // 10MB+
      };
      const [min, max] = sizeRanges[fileManagerFilter.size as keyof typeof sizeRanges];
      files = files.filter(file => file.size >= min && file.size < max);
    }
    
    if (fileManagerFilter.date !== 'all') {
      const now = new Date();
      const dateRanges = {
        'today': [new Date(now.getFullYear(), now.getMonth(), now.getDate()), now],
        'week': [new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000), now],
        'month': [new Date(now.getFullYear(), now.getMonth(), 1), now],
        'year': [new Date(now.getFullYear(), 0, 1), now]
      };
      const [start, end] = dateRanges[fileManagerFilter.date as keyof typeof dateRanges];
      files = files.filter(file => file.uploadedAt >= start && file.uploadedAt <= end);
    }
    
    if (fileManagerFilter.sender !== 'all') {
      files = files.filter(file => file.uploadedBy === fileManagerFilter.sender);
    }
    
    // Sıralama
    files.sort((a, b) => {
      switch (fileManagerSort) {
        case 'name':
          return a.name.localeCompare(b.name);
        case 'size':
          return b.size - a.size;
        case 'date':
          return b.uploadedAt.getTime() - a.uploadedAt.getTime();
        case 'type':
          return a.type.localeCompare(b.type);
        default:
          return 0;
      }
    });
    
    return files;
  };

  const openFilePreview = async (file: File) => {
    setPreviewLoading(true);
    setPreviewError(null);
    setFilePreviewData({ file, type: getFileType(file) });
    setShowFilePreviewModal(true);

    try {
      const fileType = getFileType(file);
      
      if (fileType === 'image') {
        // Resim dosyaları için önizleme
        const reader = new FileReader();
        reader.onload = (e) => {
          setFilePreviewData(prev => prev ? { ...prev, content: e.target?.result } : null);
          setPreviewLoading(false);
        };
        reader.readAsDataURL(file);
      } else if (fileType === 'video' || fileType === 'audio') {
        // Video/Audio dosyaları için önizleme
        const url = URL.createObjectURL(file);
        setFilePreviewData(prev => prev ? { ...prev, content: url } : null);
        setPreviewLoading(false);
      } else if (fileType === 'text') {
        // Metin dosyaları için önizleme
        const reader = new FileReader();
        reader.onload = (e) => {
          const content = e.target?.result as string;
          // İlk 1000 karakteri göster
          const preview = content.length > 1000 ? content.substring(0, 1000) + '...' : content;
          setFilePreviewData(prev => prev ? { ...prev, content: preview } : null);
          setPreviewLoading(false);
        };
        reader.readAsText(file);
      } else if (fileType === 'pdf') {
        // PDF dosyaları için önizleme
        const url = URL.createObjectURL(file);
        setFilePreviewData(prev => prev ? { ...prev, content: url } : null);
        setPreviewLoading(false);
      } else {
        // Diğer dosya türleri için bilgi göster
        setFilePreviewData(prev => prev ? { 
          ...prev, 
          content: {
            name: file.name,
            size: formatFileSize(file.size),
            type: file.type,
            lastModified: new Date(file.lastModified).toLocaleString('tr-TR')
          }
        } : null);
        setPreviewLoading(false);
      }
    } catch (error) {
      console.error('Dosya önizleme hatası:', error);
      setPreviewError('Dosya önizlenirken hata oluştu');
      setPreviewLoading(false);
    }
  };

  const closeFilePreview = () => {
    setShowFilePreviewModal(false);
    setFilePreviewData(null);
    setPreviewLoading(false);
    setPreviewError(null);
    
    // URL'leri temizle
    if (filePreviewData?.content && typeof filePreviewData.content === 'string' && filePreviewData.content.startsWith('blob:')) {
      URL.revokeObjectURL(filePreviewData.content);
    }
  };

  const createChannel = async () => {
    if (!newChannelName.trim()) {
      toast.error('Kanal adı gereklidir');
      return;
    }

    // Kanal adı validasyonu
    const channelNameRegex = /^[a-z0-9-]+$/;
    if (!channelNameRegex.test(newChannelName.trim())) {
      toast.error('Kanal adı sadece küçük harfler, sayılar ve tire içerebilir');
      return;
    }

    if (channels.some(channel => channel.name.toLowerCase() === newChannelName.toLowerCase())) {
      toast.error('Bu isimde bir kanal zaten mevcut');
      return;
    }

    try {
      const newChannel: ChatChannel = {
        id: `channel_${Date.now()}`,
        name: newChannelName.trim(),
        description: newChannelDescription.trim(),
        type: newChannelType,
        members: [currentUserId],
        unreadCount: 0
      };

      setChannels(prev => [...prev, newChannel]);
      setSelectedChannel(newChannel);
      setShowCreateChannel(false);
      setNewChannelName('');
      setNewChannelDescription('');
      setNewChannelType('public');
      toast.success('Kanal başarıyla oluşturuldu');
    } catch (error) {
      console.error('Kanal oluşturma hatası:', error);
      toast.error('Kanal oluşturulurken hata oluştu');
    }
  };

  const startDirectMessage = (employee: Employee) => {
    console.log('Direkt mesaj başlatılıyor:', employee);
    console.log('Current User ID:', currentUserId);
    setSelectedEmployee(employee);
    setSelectedChannel(null);
    setActiveView('direct');
    // Direkt mesaj geçmişini yükle
    loadMessages(undefined, employee.id);
  };

  const renderChannelList = () => (
    <div className={`w-64 bg-white dark:bg-gray-700 border-r border-gray-200 dark:border-gray-600 flex-shrink-0 h-full rounded-lg shadow-sm ${showChannelList ? 'lg:block' : 'hidden lg:block'}`}>
      {/* Ana Başlık */}
      <div className="p-6 border-b border-gray-200 dark:border-gray-700">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-bold text-gray-900 dark:text-white">Çalışan Mesajlaşma Sistemi</h2>
          <button
            onClick={() => setShowChannelSettings(true)}
            className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors"
            title="Ayarlar"
          >
            <Settings className="w-5 h-5" />
          </button>
        </div>
      </div>
      
      {/* Kanallar Bölümü */}
      <div className="p-6 border-b border-gray-200 dark:border-gray-700">
        <div className="flex items-center justify-between mb-4">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Kanallar</h3>
          <button
            onClick={() => setShowCreateChannel(true)}
            className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors"
            title="Yeni kanal oluştur"
          >
            <Plus className="w-5 h-5" />
          </button>
        </div>
        
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
          <input
            type="text"
            placeholder="Kanal ara..."
            value={searchTerm}
            onChange={(e) => {
              const value = e.target.value;
              setSearchTerm(value);
              getSearchSuggestions(value);
              setShowSearchSuggestions(value.length > 0);
            }}
            onFocus={() => {
              if (searchTerm.length > 0) {
                setShowSearchSuggestions(true);
              }
            }}
            onKeyDown={(e) => {
              if (e.key === 'Enter') {
                performSearch();
                setShowSearchSuggestions(false);
              }
            }}
            className="w-full pl-10 pr-20 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm"
          />
          
          {/* Sesli arama butonu */}
          <button
            onClick={startVoiceSearch}
            disabled={isVoiceSearchActive}
            className={`absolute right-14 top-1/2 transform -translate-y-1/2 p-1 rounded transition-colors ${
              isVoiceSearchActive 
                ? 'text-red-500 animate-pulse bg-red-50 dark:bg-red-900/20' 
                : 'text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-600'
            }`}
            title={isVoiceSearchActive ? "Sesli arama aktif - Konuşun" : "Sesli arama başlat"}
          >
            <Mic className="w-4 h-4" />
          </button>
          
          {/* Sesli arama yardım butonu */}
          <button
            onClick={() => setShowVoiceSearchHelp(true)}
            className="absolute right-8 top-1/2 transform -translate-y-1/2 p-1 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-600 rounded transition-colors"
            title="Sesli arama yardımı"
          >
            <HelpCircle className="w-4 h-4" />
          </button>

          
          {/* Gelişmiş arama butonu */}
          <button
            onClick={() => setShowAdvancedSearch(true)}
            className="absolute right-2 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
            title="Gelişmiş arama"
          >
            <Filter className="w-4 h-4" />
          </button>
          
          {/* Arama önerileri */}
          {showSearchSuggestions && searchSuggestions.length > 0 && (
            <div className="absolute top-full left-0 right-0 mt-1 bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg shadow-lg z-50 max-h-48 overflow-y-auto">
              <div className="p-2">
                <div className="text-xs text-gray-500 dark:text-gray-400 mb-2 px-2">
                  Öneriler:
                </div>
                {searchSuggestions.map((suggestion, index) => (
                  <button
                    key={index}
                    onClick={() => {
                      setSearchTerm(suggestion);
                      setShowSearchSuggestions(false);
                      performSearch();
                    }}
                    className="w-full flex items-center space-x-2 p-2 hover:bg-gray-100 dark:hover:bg-gray-600 rounded-lg text-left"
                  >
                    <Search className="w-3 h-3 text-gray-400" />
                    <span className="text-sm text-gray-900 dark:text-white">{suggestion}</span>
                  </button>
                ))}
              </div>
            </div>
          )}
          
          {/* Sesli arama durumu */}
          {isVoiceSearchActive && (
            <div className="absolute top-full left-0 right-0 mt-1 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-3 z-50">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                  <div className="flex flex-col">
                    <span className="text-sm font-medium text-blue-700 dark:text-blue-300">
                      {voiceSearchText}
                    </span>
                    <span className="text-xs text-blue-600 dark:text-blue-400">
                      Konuşmaya başlayın...
                    </span>
                  </div>
                </div>
                <button
                  onClick={() => {
                    setIsVoiceSearchActive(false);
                    setVoiceSearchText('');
                  }}
                  className="text-blue-500 hover:text-blue-700 dark:hover:text-blue-300"
                  title="Sesli aramayı durdur"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
      
      <div className="flex-1 overflow-y-auto" style={{ height: 'calc(100vh - 300px)' }}>
        <div className="p-4 space-y-2">
          {channels
            .filter(channel => 
              channel.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
              channel.description.toLowerCase().includes(searchTerm.toLowerCase())
            )
            .map((channel) => (
              <button
                key={channel.id}
                onClick={() => {
                  setSelectedChannel(channel);
                  setSelectedEmployee(null);
                  setActiveView('channels');
                }}
                className={`w-full flex items-center space-x-3 p-3 rounded-lg text-left transition-colors ${
                  selectedChannel?.id === channel.id
                    ? 'bg-primary text-white'
                    : 'hover:bg-gray-100 dark:hover:bg-gray-700'
                }`}
              >
                <Hash className="w-4 h-4 flex-shrink-0" />
                <div className="flex-1 min-w-0">
                  <p className={`text-sm font-medium truncate ${
                    selectedChannel?.id === channel.id ? 'text-white' : 'text-gray-900 dark:text-white'
                  }`}>
                    {channel.name}
                  </p>
                  {/* Channel unread count badge hidden */}
                  {/* {channel.unreadCount > 0 && (
                    <span className="inline-flex items-center justify-center w-5 h-5 text-xs font-medium bg-red-500 text-white rounded-full">
                      {channel.unreadCount}
                    </span>
                  )} */}
                </div>
                {channel.isPinned && (
                  <Pin className="w-3 h-3 text-yellow-500" />
                )}
              </button>
            ))}
        </div>
        
        <div className="p-6 border-t border-gray-200 dark:border-gray-700">
          <h4 className="text-sm font-medium text-gray-900 dark:text-white mb-3">Direkt Mesajlar</h4>
          <div className="space-y-2">
            {employees
              .filter(emp => emp.id !== currentUserId && !isUserBlocked(emp.id))
              .map((employee) => (
                <button
                  key={employee.id}
                  onClick={() => startDirectMessage(employee)}
                  className="w-full flex items-center space-x-3 p-3 rounded-lg text-left hover:bg-gray-100 dark:hover:bg-gray-700"
                >
                  <div className="relative">
                    <div className="w-6 h-6 bg-primary text-white rounded-full flex items-center justify-center text-xs font-medium">
                      {employee.avatar}
                    </div>
                    <div className={`absolute -bottom-1 -right-1 w-2 h-2 rounded-full border border-white dark:border-gray-700 ${
                      employee.status === 'online' ? 'bg-green-500' :
                      employee.status === 'away' ? 'bg-yellow-500' :
                      employee.status === 'busy' ? 'bg-red-500' : 'bg-gray-500'
                    }`}></div>
                  </div>
                  <div className="flex-1 min-w-0">
                    <p className="text-sm font-medium text-gray-900 dark:text-white truncate">
                      {employee.name}
                    </p>
                    <p className="text-xs text-gray-500 dark:text-gray-400 truncate">
                      {employee.role}
                    </p>
                  </div>
                </button>
              ))}
          </div>
        </div>
      </div>
    </div>
  );

  const renderChatArea = () => (
    <div className="flex-1 flex flex-col min-w-0 bg-white dark:bg-gray-700 rounded-lg shadow-sm h-full">
      {/* Chat Header */}
      <div className="bg-white dark:bg-gray-700 border-b border-gray-200 dark:border-gray-600 p-6 pt-16 rounded-t-lg">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            {selectedChannel ? (
              <>
                <Hash className="w-5 h-5 text-gray-400" />
                <div>
                  <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
                    #{selectedChannel.name}
                  </h2>
                  <p className="text-sm text-gray-500 dark:text-gray-400">
                    {selectedChannel.description}
                  </p>
                </div>
              </>
            ) : selectedEmployee ? (
              <>
                <div className="relative">
                  <div className="w-8 h-8 bg-primary text-white rounded-full flex items-center justify-center text-sm font-medium">
                    {selectedEmployee.avatar}
                  </div>
                  <div className={`absolute -bottom-1 -right-1 w-3 h-3 rounded-full border-2 border-white dark:border-gray-700 ${
                    selectedEmployee.status === 'online' ? 'bg-green-500' :
                    selectedEmployee.status === 'away' ? 'bg-yellow-500' :
                    selectedEmployee.status === 'busy' ? 'bg-red-500' : 'bg-gray-500'
                  }`}></div>
                </div>
                <div>
                  <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
                    {selectedEmployee.name}
                  </h2>
                  <p className="text-sm text-gray-500 dark:text-gray-400">
                    {selectedEmployee.role} • {selectedEmployee.department}
                  </p>
                </div>
              </>
            ) : (
              <div>
                <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
                  Mesajlaşma
                </h2>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  Bir kanal veya kişi seçin
                </p>
              </div>
            )}
          </div>
          
          <div className="flex items-center space-x-2">
            <button
              onClick={() => {
                setActiveView('search');
                // Arama butonuna tıklandığında arama çubuğunu otomatik olarak aç
                setTimeout(() => {
                  const searchInput = document.getElementById('search-input') as HTMLInputElement;
                  if (searchInput) {
                    searchInput.focus();
                  }
                }, 100);
              }}
              className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
              title="Mesajlarda ara"
            >
              <Search className="w-5 h-5" />
            </button>
            <button
              onClick={() => setShowAdvancedSearch(true)}
              className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
              title="Gelişmiş arama"
            >
              <Filter className="w-5 h-5" />
            </button>
            <button
              onClick={() => setShowIntegrations(true)}
              className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
              title="Entegrasyonlar"
            >
              <Zap className="w-5 h-5" />
            </button>
            <button
              onClick={() => setShowAnalytics(true)}
              className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
              title="Analitik"
            >
              <TrendingUp className="w-5 h-5" />
            </button>
            {pinnedMessages.length > 0 && (
              <button
                onClick={() => setShowPinnedMessages(true)}
                className="relative p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
              >
                <Pin className="w-5 h-5" />
                <span className="absolute -top-1 -right-1 w-5 h-5 bg-yellow-500 text-white text-xs rounded-full flex items-center justify-center">
                  {pinnedMessages.length}
                </span>
              </button>
            )}
            {favoriteMessages.length > 0 && (
              <button
                onClick={() => setShowFavorites(true)}
                className="relative p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
              >
                <Star className="w-5 h-5" />
                <span className="absolute -top-1 -right-1 w-5 h-5 bg-yellow-500 text-white text-xs rounded-full flex items-center justify-center">
                  {favoriteMessages.length}
                </span>
              </button>
            )}
            <button
              onClick={() => setShowNotificationSettings(true)}
              className={`relative p-2 rounded-lg transition-colors ${
                notificationPermission.granted 
                  ? 'text-green-500 hover:text-green-600' 
                  : 'text-gray-400 hover:text-gray-600 dark:hover:text-gray-300'
              }`}
              title="Push Bildirim Ayarları"
            >
              <Bell className="w-5 h-5" />
              {/* Notification badge hidden */}
            </button>
            <button 
              onClick={() => setShowChannelSettings(true)}
              className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
            >
              <Settings className="w-5 h-5" />
            </button>
            <button
              onClick={() => setShowPrivacySettings(true)}
              className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
            >
              <Shield className="w-5 h-5" />
            </button>


            {renderThemeToggle()}

          </div>
        </div>
      </div>

      {/* Messages Area */}
      {selectedChannel || selectedEmployee ? (
        <div className="flex flex-col h-full">
          {/* Mesaj Listesi */}
          <div className="flex-1 overflow-y-auto p-6 space-y-6" style={{ height: 'calc(100vh - 300px)' }}>
            {messages.length === 0 ? (
              <div className="flex items-center justify-center h-full">
                <div className="text-center">
                  <MessageSquare className="w-16 h-16 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                    {selectedEmployee ? `${selectedEmployee.name} ile sohbet` : 'Kanal mesajları'}
                  </h3>
                  <p className="text-gray-500 dark:text-gray-400">
                    {selectedEmployee ? 'Henüz mesaj yok. İlk mesajı siz gönderin!' : 'Bu kanalda henüz mesaj yok.'}
                  </p>
                </div>
              </div>
            ) : (
              <div className="space-y-6">
            {messages.map((message) => (
              <div key={message.id} className="flex items-start space-x-3 group">
                <div className="flex-shrink-0">
                  <div className="w-10 h-10 bg-primary text-white rounded-full flex items-center justify-center text-base font-medium">
                    {message.senderAvatar}
                  </div>
                </div>
                
                <div className="flex-1 min-w-0">
                  <div className="flex items-center space-x-2 mb-2">
                    <span className="text-base font-medium text-gray-900 dark:text-white">
                      {message.senderName}
                    </span>
                    <span className="text-sm text-gray-500 dark:text-gray-400">
                      {message.senderRole}
                    </span>
                    <span className="text-sm text-gray-400 dark:text-gray-500">
                      {format(message.timestamp, 'HH:mm', { locale: tr })}
                    </span>
                    {message.isPinned && (
                      <Pin className="w-3 h-3 text-yellow-500" />
                    )}
                    {message.isEdited && (
                      <span className="text-xs text-gray-400 dark:text-gray-500">(düzenlendi)</span>
                    )}
                    {messageCategories[message.id] && (
                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs ${getMessageCategoryColor(messageCategories[message.id])}`}>
                        {getMessageCategoryIcon(messageCategories[message.id])} {messageCategories[message.id]}
                      </span>
                    )}
                  </div>
                  
                  <div className="bg-white dark:bg-gray-700 rounded-lg p-5 shadow-sm">
                    {editingMessage === message.id ? (
                      <div className="space-y-2">
                        <textarea
                          value={editMessageContent}
                          onChange={(e) => setEditMessageContent(e.target.value)}
                          className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white resize-none"
                          rows={2}
                        />
                        <div className="flex items-center space-x-2">
                          <button
                            onClick={() => editMessage(message.id, editMessageContent)}
                            className="px-3 py-1 text-xs bg-primary text-white rounded hover:bg-primary-600"
                          >
                            Kaydet
                          </button>
                          <button
                            onClick={cancelEditing}
                            className="px-3 py-1 text-xs text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
                          >
                            İptal
                          </button>
                        </div>
                      </div>
                    ) : (
                      <div 
                        className="text-base text-gray-900 dark:text-white"
                        dangerouslySetInnerHTML={{ 
                          __html: formatMessageContent(message.content)
                        }}
                      />
                    )}
                    
                    {message.attachments && message.attachments.length > 0 && (
                      <div className="mt-2 space-y-1">
                        {message.attachments.map((attachment, index) => (
                          <div key={index} className="flex items-center space-x-2 text-xs text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-800 rounded-lg p-2">
                            <span className="text-sm">{getFileIcon('document')}</span>
                            <span className="flex-1 truncate">{attachment}</span>
                            <div className="flex items-center space-x-1">
                              <button 
                                className="text-blue-500 hover:text-blue-700"
                                title="Önizle"
                                onClick={() => {
                                  toast.success('Dosya önizleme özelliği aktif');
                                }}
                              >
                                <Eye className="w-3 h-3" />
                              </button>
                              <button className="text-primary hover:text-primary-600" title="İndir">
                              <Download className="w-3 h-3" />
                            </button>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                    
                                         {message.reactions && Object.keys(message.reactions).length > 0 && (
                       <div className="mt-2 flex flex-wrap gap-1">
                         {Object.entries(message.reactions).map(([emoji, users]) => (
                           <button
                             key={emoji}
                             onClick={() => addReactionToMessage(message.id, emoji)}
                             className={`inline-flex items-center space-x-1 px-2 py-1 rounded-full text-xs transition-colors ${
                               users.includes(currentUserId)
                                 ? 'bg-primary text-white'
                                 : 'bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600'
                             }`}
                           >
                             <span>{emoji}</span>
                             <span className={users.includes(currentUserId) ? 'text-white' : 'text-gray-600 dark:text-gray-400'}>
                               {users.length}
                             </span>
                           </button>
                         ))}
                       </div>
                     )}
                  </div>
                  
                                     {/* Mesaj Aksiyonları */}
                   <div className="opacity-0 group-hover:opacity-100 transition-opacity mt-2 flex items-center space-x-2">
                     <button 
                       onClick={() => {
                         setNewMessage(`@${message.senderName} `);
                         document.getElementById('message-input')?.focus();
                       }}
                       className="text-xs text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
                     >
                       Yanıtla
                     </button>
                     <button 
                       onClick={(e) => {
                         e.stopPropagation();
                         setSelectedMessageForReaction(message.id);
                         setEmojiPickerPosition({ x: e.clientX, y: e.clientY });
                         setShowEmojiPicker(true);
                       }}
                       className="text-xs text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
                     >
                       😊
                     </button>
                     {message.senderId === currentUserId && (
                       <>
                         <button 
                           onClick={() => startEditingMessage(message)}
                           className="text-xs text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
                         >
                           Düzenle
                         </button>
                         <button 
                           onClick={() => deleteMessage(message.id)}
                           className="text-xs text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300"
                         >
                           Sil
                         </button>
                       </>
                     )}
                     <button 
                       onClick={() => pinMessage(message)}
                       className={`text-xs ${
                         pinnedMessages.some(pm => pm.id === message.id)
                           ? 'text-yellow-500 hover:text-yellow-700'
                           : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
                       }`}
                     >
                       Pin
                     </button>
                     <button 
                       onClick={() => toggleFavoriteMessage(message.id)}
                       className={`text-xs ${
                         favoriteMessages.includes(message.id)
                           ? 'text-yellow-500 hover:text-yellow-700'
                           : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
                       }`}
                     >
                       <Star className={`w-3 h-3 ${favoriteMessages.includes(message.id) ? 'fill-current' : ''}`} />
                     </button>
                     <div className="relative">
                       <button className="text-xs text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300">
                         📋
                       </button>
                       <div className="absolute bottom-full right-0 mb-2 bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg shadow-lg p-2 space-y-1 opacity-0 group-hover:opacity-100 transition-opacity">
                         <button
                           onClick={() => categorizeMessage(message.id, 'announcement')}
                           className="block w-full text-left text-xs px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
                         >
                           📢 Duyuru
                         </button>
                         <button
                           onClick={() => categorizeMessage(message.id, 'question')}
                           className="block w-full text-left text-xs px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
                         >
                           ❓ Soru
                         </button>
                         <button
                           onClick={() => categorizeMessage(message.id, 'suggestion')}
                           className="block w-full text-left text-xs px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
                         >
                           💡 Öneri
                         </button>
                         <button
                           onClick={() => categorizeMessage(message.id, 'general')}
                           className="block w-full text-left text-xs px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-700 rounded"
                         >
                           💬 Genel
                         </button>
                       </div>
                     </div>
                   </div>
                </div>
              </div>
            ))}
              </div>
            )}
            
            {typingEmployees.length > 0 && (
              <div className="flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                </div>
                <span>{typingEmployees.join(', ')} yazıyor...</span>
              </div>
            )}
            
            <div ref={messagesEndRef} />
          </div>

          {/* Mesaj Gönderme Alanı */}
          <div className="border-t border-gray-200 dark:border-gray-700 p-6 flex-shrink-0 rounded-b-lg">
            <div className="flex items-end space-x-2">
              <div className="flex-1 min-w-0">
                <div className="flex items-center space-x-2 mb-2">
                  <button
                    onClick={() => fileInputRef.current?.click()}
                    className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-600"
                    title="Dosya ekle"
                  >
                    <Paperclip className="w-4 h-4" />
                  </button>
                  <button
                    onClick={(e) => {
                      e.preventDefault();
                      e.stopPropagation();
                      const rect = e.currentTarget.getBoundingClientRect();
                      setEmojiPickerPosition({ x: rect.left + rect.width / 2, y: rect.top });
                      setShowEmojiPicker(!showEmojiPicker);
                    }}
                    className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-600"
                    title="Emoji ekle"
                  >
                    <Smile className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => applyTextFormatting('bold')}
                    className={`p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-600 ${
                      isBold 
                        ? 'text-primary bg-primary/10' 
                        : 'text-gray-400 hover:text-gray-600 dark:hover:text-gray-300'
                    }`}
                    title="Kalın yazı (Ctrl+B)"
                  >
                    <Bold className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => applyTextFormatting('italic')}
                    className={`p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-600 ${
                      isItalic 
                        ? 'text-primary bg-primary/10' 
                        : 'text-gray-400 hover:text-gray-600 dark:hover:text-gray-300'
                    }`}
                    title="İtalik yazı (Ctrl+I)"
                  >
                    <Italic className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => applyTextFormatting('underline')}
                    className={`p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-600 ${
                      isUnderline 
                        ? 'text-primary bg-primary/10' 
                        : 'text-gray-400 hover:text-gray-600 dark:hover:text-gray-300'
                    }`}
                    title="Altı çizili yazı (Ctrl+U)"
                  >
                    <Underline className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => setShowTemplates(true)}
                    className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-600"
                    title="Mesaj şablonları"
                  >
                    <Edit className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => setShowPolls(true)}
                    className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-600"
                    title="Anket oluştur"
                  >
                    <PieChart className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => openWorkflowModal('task')}
                    className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-600"
                    title="İş akışı oluştur"
                  >
                    <GitFork className="w-4 h-4" />
                  </button>
                  <button
                    onClick={openFileManager}
                    className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-600"
                    title="Dosya yöneticisi"
                  >
                    <FolderOpen className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => setShowKeyboardShortcuts(true)}
                    className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-600"
                    title="Klavye kısayolları"
                  >
                    <span className="text-sm">⌨️</span>
                  </button>
                  <button
                    onClick={() => setShowExtractedTasks(true)}
                    className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-600"
                    title="Otomatik çıkarılan görevler"
                  >
                    <ClipboardList className="w-4 h-4" />
                    {extractedTasks.length > 0 && (
                      <span className="absolute -top-1 -right-1 bg-green-500 text-white text-xs rounded-full w-4 h-4 flex items-center justify-center">
                        {extractedTasks.length}
                      </span>
                    )}
                  </button>
                  <button
                    onClick={() => setShowVoiceRecorder(true)}
                    className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-600"
                    title="Sesli mesaj kaydet"
                  >
                    <Mic className="w-4 h-4" />
                  </button>
                  {draftMessages[selectedChannel?.id || ''] && (
                    <button
                      onClick={() => loadDraft(selectedChannel?.id || '')}
                      className="text-yellow-600 hover:text-yellow-800 dark:text-yellow-400 dark:hover:text-yellow-300 p-1 rounded hover:bg-yellow-50 dark:hover:bg-yellow-900/20"
                      title="Taslak mesajı yükle"
                    >
                      <FileText className="w-4 h-4" />
                    </button>
                  )}
                </div>
                
                <div
                  id="message-input"
                  contentEditable
                  onInput={(e) => {
                    const value = e.currentTarget.innerText;
                    setNewMessage(value);
                    setCharacterCount(value.length);
                    
                    // Mention sistemi kontrolü
                    const selection = window.getSelection();
                    if (selection) {
                      const cursorPosition = selection.anchorOffset;
                      handleMentionInput(value, cursorPosition);
                    }
                    
                    // Taslak mesajı otomatik kaydet
                    if (selectedChannel) {
                      saveDraft(selectedChannel.id, value);
                    }
                  }}
                  onSelect={handleTextSelection}
                  onKeyPress={(e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                      e.preventDefault();
                      sendMessage();
                    }
                  }}
                  onKeyDown={(e) => {
                    // Klavye kısayolları
                    if (e.ctrlKey || e.metaKey) {
                      switch (e.key.toLowerCase()) {
                        case 'b':
                          e.preventDefault();
                          applyTextFormatting('bold');
                          break;
                        case 'i':
                          e.preventDefault();
                          applyTextFormatting('italic');
                          break;
                        case 'u':
                          e.preventDefault();
                          applyTextFormatting('underline');
                          break;
                      }
                    }
                  }}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white resize-none min-w-0 min-h-[60px] max-h-[120px] overflow-y-auto focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                  style={{ 
                    whiteSpace: 'pre-wrap',
                    wordWrap: 'break-word',
                    position: 'relative'
                  }}
                  data-placeholder="Mesajınızı yazın... (@ ile mention yapabilirsiniz)"
                  data-empty={!newMessage ? 'true' : undefined}
                  onFocus={(e) => {
                    if (!e.currentTarget.textContent) {
                      e.currentTarget.setAttribute('data-empty', 'true');
                    }
                  }}
                  onBlur={(e) => {
                    if (!e.currentTarget.textContent) {
                      e.currentTarget.setAttribute('data-empty', 'true');
                    } else {
                      e.currentTarget.removeAttribute('data-empty');
                    }
                  }}
                />
                
                <div className="flex items-center justify-between mt-1">
                  <span className="text-xs text-gray-500 dark:text-gray-400">
                    {characterCount}/{maxCharacters}
                  </span>
                  <span className="text-xs text-gray-400 dark:text-gray-500">@ ile mention yapabilirsiniz</span>
                </div>
                
                {/* Mention Suggestions */}
                {/* Mention Suggestions - Test için geçici olarak her zaman göster */}
                {(showMentionSuggestions || newMessage.includes('@')) && (
                  <div className="absolute bottom-full left-0 mb-2 w-80 bg-white dark:bg-gray-700 border-2 border-blue-300 dark:border-blue-600 rounded-lg shadow-2xl max-h-64 overflow-y-auto z-[9999]">
                    <div className="p-3">
                      <div className="text-xs text-blue-600 dark:text-blue-400 mb-3 px-2 font-medium border-b border-gray-200 dark:border-gray-600 pb-2">
                        Çalışan seçin ({(filteredEmployees.length > 0 ? filteredEmployees : employees).length} sonuç):
                      </div>
                      {(filteredEmployees.length > 0 ? filteredEmployees : employees).map((employee) => (
                        <button
                          key={employee.id}
                          onClick={() => selectMention(employee)}
                          className="w-full flex items-center space-x-3 p-3 hover:bg-gray-100 dark:hover:bg-gray-600 rounded-lg text-left transition-colors"
                        >
                          <div className="relative">
                            <div className="w-8 h-8 bg-primary text-white rounded-full flex items-center justify-center text-sm font-medium">
                              {employee.avatar}
                            </div>
                            <div className={`absolute -bottom-0.5 -right-0.5 w-3 h-3 rounded-full border-2 border-white dark:border-gray-700 ${
                              employee.status === 'online' ? 'bg-green-500' :
                              employee.status === 'away' ? 'bg-yellow-500' :
                              employee.status === 'busy' ? 'bg-red-500' : 'bg-gray-500'
                            }`}></div>
                          </div>
                          <div className="flex-1 min-w-0">
                            <p className="text-sm font-medium text-gray-900 dark:text-white truncate">
                              {employee.name}
                            </p>
                            <p className="text-xs text-gray-500 dark:text-gray-400 truncate">
                              {employee.role} • {employee.department}
                            </p>
                          </div>
                          <div className="text-xs text-gray-400 dark:text-gray-500">
                            @{employee.name.toLowerCase().replace(/\s+/g, '')}
                          </div>
                        </button>
                      ))}
                    </div>
                  </div>
                )}
              </div>
              
              <button
                onClick={sendMessage}
                disabled={!newMessage.trim() && attachments.length === 0}
                className="px-4 py-2 bg-primary hover:bg-primary-600 text-white rounded-lg disabled:opacity-50 disabled:cursor-not-allowed flex-shrink-0 self-end transition-colors"
              >
                <Send className="w-4 h-4" />
              </button>
            </div>
            
            {attachments.length > 0 && (
              <div className="mt-2 space-y-1">
                {attachments.map((file, index) => (
                  <div key={index} className="flex items-center justify-between bg-gray-50 dark:bg-gray-700 rounded-lg p-2">
                    <div className="flex items-center space-x-2 flex-1">
                      <div className="w-8 h-8 flex items-center justify-center bg-gray-200 dark:bg-gray-600 rounded">
                            <span className="text-lg">{getFileIcon(getFileType(file))}</span>
                      </div>
                      <div className="flex-1 min-w-0">
                        <p className="text-sm text-gray-600 dark:text-gray-400 truncate">{file.name}</p>
                        <p className="text-xs text-gray-500 dark:text-gray-500">
                              {formatFileSize(file.size)}
                        </p>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      {uploadProgress[file.name] !== undefined && uploadProgress[file.name] < 100 && (
                        <div className="w-16 h-2 bg-gray-200 dark:bg-gray-600 rounded-full overflow-hidden">
                          <div 
                            className="h-full bg-primary transition-all duration-300"
                            style={{ width: `${uploadProgress[file.name]}%` }}
                          />
                        </div>
                      )}
                      
                        <button
                            onClick={() => openFilePreview(file)}
                          className="text-blue-500 hover:text-blue-700"
                            title="Önizle"
                        >
                          <Eye className="w-4 h-4" />
                        </button>
                      
                      <button
                        onClick={() => removeAttachment(index)}
                        className="text-red-500 hover:text-red-700"
                            title="Kaldır"
                      >
                        <X className="w-4 h-4" />
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
          
          <input
            ref={fileInputRef}
            type="file"
            multiple
            onChange={handleFileUpload}
            className="hidden"
          />
        </div>
      ) : (
        <div className="flex-1 flex items-center justify-center">
          <div className="text-center p-8">
            <MessageSquare className="w-20 h-20 text-gray-400 mx-auto mb-6" />
            <h3 className="text-xl font-medium text-gray-900 dark:text-white mb-3">
              Mesajlaşmaya Başlayın
            </h3>
            <p className="text-gray-500 dark:text-gray-400 text-lg">
              Sol taraftan bir kanal veya kişi seçin
            </p>
          </div>
        </div>
      )}
    </div>
  );

  const renderMemberList = () => (
    <div className={`w-80 bg-white dark:bg-gray-700 border-l border-gray-200 dark:border-gray-600 flex-shrink-0 h-full rounded-lg shadow-sm ${showMemberList ? 'lg:block' : 'hidden lg:block'}`}>
      {/* Ana Başlık */}
      <div className="p-6 pt-16 border-b border-gray-200 dark:border-gray-700">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-bold text-gray-900 dark:text-white">Çalışan Mesajlaşma Sistemi</h2>
          <div className="flex items-center space-x-2">
            <button
              onClick={() => setShowNotifications(!showNotifications)}
              className="relative text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors"
              title="Bildirimler"
            >
              <Bell className="w-5 h-5" />
              {unreadNotifications > 0 && (
                <span className="absolute -top-1 -right-1 w-4 h-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">
                  {unreadNotifications}
                </span>
              )}
            </button>
            <button
              onClick={() => setShowPrivacySettings(true)}
              className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors"
              title="Gizlilik Ayarları"
            >
              <Shield className="w-5 h-5" />
            </button>
          </div>
        </div>
      </div>
      
      {/* Çalışanlar Bölümü */}
      <div className="p-6 border-b border-gray-200 dark:border-gray-700">
        <div className="flex items-center justify-between mb-2">
          <h3 className="text-lg font-semibold text-gray-900 dark:text-white">Çalışanlar</h3>
          <button
            onClick={() => setShowInviteModal(true)}
            className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-1 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors"
            title="Çalışan davet et"
          >
            <UserPlus className="w-4 h-4" />
          </button>
        </div>
        <p className="text-sm text-gray-500 dark:text-gray-400">
          {onlineEmployees.length} çevrimiçi • {employees.length} toplam
        </p>
      </div>
      
      <div className="overflow-y-auto" style={{ height: 'calc(100vh - 300px)' }}>
        <div className="p-6 space-y-3">
          {employees
            .sort((a, b) => {
              // Favori çalışanları önce göster
              const aIsFavorite = isEmployeeFavorite(a.id);
              const bIsFavorite = isEmployeeFavorite(b.id);
              if (aIsFavorite && !bIsFavorite) return -1;
              if (!aIsFavorite && bIsFavorite) return 1;
              
              // Sonra çevrimiçi durumuna göre sırala
              if (a.status === 'online' && b.status !== 'online') return -1;
              if (a.status !== 'online' && b.status === 'online') return 1;
              
              // Son olarak isme göre sırala
              return a.name.localeCompare(b.name, 'tr');
            })
            .map((employee) => (
            <div key={employee.id} className="group flex items-start justify-between p-4 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-600 transition-colors">
              <div className="flex items-center space-x-2 min-w-0 flex-1">
                <div className="relative">
                  <div className="w-8 h-8 bg-gray-300 dark:bg-gray-600 text-white rounded-full flex items-center justify-center text-sm font-medium flex-shrink-0">
                    {employee.avatar}
                  </div>
                  <div className={`absolute -bottom-1 -right-1 w-3 h-3 rounded-full border-2 border-white dark:border-gray-700 ${
                    employee.status === 'online' ? 'bg-green-500' :
                    employee.status === 'away' ? 'bg-yellow-500' :
                    employee.status === 'busy' ? 'bg-red-500' : 'bg-gray-400'
                  }`} />
                </div>
                
                <div className="min-w-0 flex-1">
                  <div className="flex items-center space-x-1">
                    <p 
                      className="text-sm font-medium text-gray-900 dark:text-white break-words"
                      title={employee.name}
                    >
                      {employee.name}
                    </p>
                    {isEmployeeFavorite(employee.id) && (
                      <Star className="w-3 h-3 text-yellow-500 fill-current flex-shrink-0" />
                    )}
                  </div>
                  <p 
                    className="text-xs text-gray-500 dark:text-gray-400 break-words"
                    title={employee.role}
                  >
                    {employee.role}
                  </p>
                </div>
              </div>
              
              <div className="flex items-start space-x-1 opacity-0 group-hover:opacity-100 transition-opacity flex-shrink-0">
                {employee.isTyping && (
                  <div className="flex space-x-1 mr-1">
                    <div className="w-1 h-1 bg-blue-500 rounded-full animate-bounce"></div>
                    <div className="w-1 h-1 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-1 h-1 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                )}
                
                <button 
                  onClick={() => isUserBlocked(employee.id) ? unblockUser(employee.id) : blockUser(employee.id)}
                  className={`text-xs px-2 py-1 rounded transition-colors ${
                    isUserBlocked(employee.id)
                      ? 'text-green-600 hover:text-green-800 dark:text-green-400 dark:hover:text-green-300 hover:bg-green-50 dark:hover:bg-green-900/20'
                      : 'text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 hover:bg-red-50 dark:hover:bg-red-900/20'
                  }`}
                  title={isUserBlocked(employee.id) ? 'Engeli kaldır' : 'Engelle'}
                >
                  {isUserBlocked(employee.id) ? 'Engeli Kaldır' : 'Engelle'}
                </button>
                
                <button 
                  onClick={(e) => openEmployeeMenu(employee.id, e)}
                  className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 p-1 rounded hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors"
                  title="Daha fazla seçenek"
                >
                  <MoreHorizontal className="w-4 h-4" />
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );

  const renderEmployeeMenu = () => {
    if (!showEmployeeMenu) return null;

    const employee = employees.find(emp => emp.id === showEmployeeMenu);
    if (!employee) return null;

    // Ekran sınırlarını kontrol et
    const menuWidth = 200; // Menü genişliği
    const menuHeight = 400; // Menü yüksekliği (tahmini)
    const padding = 20; // Kenar boşluğu
    
    let x = employeeMenuPosition.x;
    let y = employeeMenuPosition.y;
    
    // Menü sağ tarafta açılacak, eğer sağ tarafta yer yoksa sol tarafta aç
    if (x + menuWidth > window.innerWidth - padding) {
      // Sağ tarafta yer yok, sol tarafta aç
      x = x - menuWidth;
    }
    
    // Sol tarafta da yer yoksa, ekranın ortasında aç
    if (x < padding) {
      x = window.innerWidth / 2 - menuWidth / 2;
    }
    
    // Y koordinatını sınırlar içinde tut
    if (y + menuHeight > window.innerHeight - padding) {
      // Alt tarafta yer yok, yukarıda aç
      y = y - menuHeight;
    }
    if (y < padding) y = padding;

    // Mobil cihazlarda menüyü farklı konumlandır
    const isMobile = window.innerWidth < 768;
    const menuStyle: React.CSSProperties = isMobile ? {
      left: '50%',
      top: '50%',
      transform: 'translate(-50%, -50%)',
      width: '90vw',
      maxWidth: '320px',
      maxHeight: '80vh',
      overflowY: 'auto' as const
    } : {
      left: x,
      top: y,
      transform: 'none', // Pozisyon zaten hesaplandı
      maxHeight: '80vh',
      overflowY: 'auto' as const
    };

    return (
      <div 
        className={`fixed z-50 bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg shadow-lg p-1 employee-menu ${
          isMobile ? 'min-w-64 max-w-80' : 'min-w-48 max-w-64'
        }`}
        style={menuStyle}
        onClick={(e) => e.stopPropagation()}
      >
        <div className="py-1">
          <button
            onClick={() => startDirectMessageFromMenu(employee)}
            className="w-full flex items-center space-x-3 px-3 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg text-left transition-colors"
          >
            <MessageSquare className="w-4 h-4 flex-shrink-0" />
            <span className="truncate">Mesaj Gönder</span>
          </button>
          
          <button
            onClick={() => viewEmployeeProfile(employee)}
            className="w-full flex items-center space-x-3 px-3 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg text-left transition-colors"
          >
            <Eye className="w-4 h-4 flex-shrink-0" />
            <span className="truncate">Profili Görüntüle</span>
          </button>
          
          <button
            onClick={() => sendFileToEmployee(employee)}
            className="w-full flex items-center space-x-3 px-3 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg text-left transition-colors"
          >
            <Paperclip className="w-4 h-4 flex-shrink-0" />
            <span className="truncate">Dosya Gönder</span>
          </button>
          
          <button
            onClick={() => scheduleMeetingWithEmployee(employee)}
            className="w-full flex items-center space-x-3 px-3 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg text-left transition-colors"
          >
            <Video className="w-4 h-4 flex-shrink-0" />
            <span className="truncate">Toplantı Planla</span>
          </button>
          
          <button
            onClick={() => addEmployeeToFavorites(employee)}
            className="w-full flex items-center space-x-3 px-3 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg text-left transition-colors"
          >
            <Star className={`w-4 h-4 flex-shrink-0 ${isEmployeeFavorite(employee.id) ? 'fill-current text-yellow-500' : ''}`} />
            <span className="truncate">{isEmployeeFavorite(employee.id) ? 'Favorilerden Çıkar' : 'Favorilere Ekle'}</span>
          </button>
          
          <div className="border-t border-gray-200 dark:border-gray-600 my-1"></div>
          
          <div className="px-3 py-2 text-xs text-gray-500 dark:text-gray-400">
            Durum Değiştir:
          </div>
          
          <button
            onClick={() => changeEmployeeStatus(employee, 'online')}
            className={`w-full flex items-center space-x-3 px-3 py-2 text-sm rounded-lg text-left transition-colors ${
              employee.status === 'online' 
                ? 'bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-200' 
                : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
            }`}
          >
            <div className="w-3 h-3 bg-green-500 rounded-full flex-shrink-0"></div>
            <span className="truncate">Çevrimiçi {employee.status === 'online' && '(Mevcut)'}</span>
          </button>
          
          <button
            onClick={() => changeEmployeeStatus(employee, 'away')}
            className={`w-full flex items-center space-x-3 px-3 py-2 text-sm rounded-lg text-left transition-colors ${
              employee.status === 'away' 
                ? 'bg-yellow-100 dark:bg-yellow-900 text-yellow-700 dark:text-yellow-200' 
                : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
            }`}
          >
            <div className="w-3 h-3 bg-yellow-500 rounded-full flex-shrink-0"></div>
            <span className="truncate">Uzakta {employee.status === 'away' && '(Mevcut)'}</span>
          </button>
          
          <button
            onClick={() => changeEmployeeStatus(employee, 'busy')}
            className={`w-full flex items-center space-x-3 px-3 py-2 text-sm rounded-lg text-left transition-colors ${
              employee.status === 'busy' 
                ? 'bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-200' 
                : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
            }`}
          >
            <div className="w-3 h-3 bg-red-500 rounded-full flex-shrink-0"></div>
            <span className="truncate">Meşgul {employee.status === 'busy' && '(Mevcut)'}</span>
          </button>
          
          <button
            onClick={() => changeEmployeeStatus(employee, 'offline')}
            className={`w-full flex items-center space-x-3 px-3 py-2 text-sm rounded-lg text-left transition-colors ${
              employee.status === 'offline' 
                ? 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-200' 
                : 'text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700'
            }`}
          >
            <div className="w-3 h-3 bg-gray-500 rounded-full flex-shrink-0"></div>
            <span className="truncate">Çevrimdışı {employee.status === 'offline' && '(Mevcut)'}</span>
          </button>
        </div>
      </div>
    );
  };

  const renderEmojiPicker = () => {
    const emojis = ['😊', '😂', '❤️', '👍', '👎', '🎉', '🔥', '💯', '👏', '🙏', '😍', '🤔', '😮', '😢', '😡', '🤯', '🥳', '🤝', '💪', '🚀'];
    
    // Ekran sınırlarını kontrol et
    const maxX = window.innerWidth - 200; // Emoji picker genişliği
    const maxY = window.innerHeight - 200; // Emoji picker yüksekliği
    
    let x = emojiPickerPosition.x;
    let y = emojiPickerPosition.y;
    
    // X koordinatını sınırlar içinde tut
    if (x > maxX) x = maxX;
    if (x < 100) x = 100;
    
    // Y koordinatını sınırlar içinde tut
    if (y > maxY) y = maxY;
    if (y < 100) y = 100;
    
    return (
      <div 
        className="fixed z-[9999] bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg shadow-lg p-2 emoji-picker"
        style={{ 
          left: x, 
          top: y,
          transform: 'translate(-50%, -100%)',
          marginTop: '-10px'
        }}
        onClick={(e) => e.stopPropagation()}
      >
        <div className="grid grid-cols-5 gap-1">
          {emojis.map((emoji) => (
            <button
              key={emoji}
              onClick={(e) => {
                e.preventDefault();
                e.stopPropagation();
                if (selectedMessageForReaction) {
                  addReactionToMessage(selectedMessageForReaction, emoji);
                } else {
                  setNewMessage(prev => prev + emoji);
                }
                setShowEmojiPicker(false);
                setSelectedMessageForReaction(null);
              }}
              className="w-8 h-8 flex items-center justify-center text-lg hover:bg-gray-100 dark:hover:bg-gray-600 rounded transition-colors cursor-pointer"
            >
              {emoji}
            </button>
          ))}
        </div>
      </div>
    );
  };

  const addReactionToMessage = (messageId: string, emoji: string) => {
    setMessages(prev => prev.map(message => {
      if (message.id === messageId) {
        const reactions = message.reactions || {};
        const users = reactions[emoji] || [];
        
        if (users.includes(currentUserId)) {
          // Reaksiyonu kaldır
          const updatedUsers = users.filter(id => id !== currentUserId);
          if (updatedUsers.length === 0) {
            const { [emoji]: removed, ...rest } = reactions;
            return { ...message, reactions: rest };
          } else {
            return { ...message, reactions: { ...reactions, [emoji]: updatedUsers } };
          }
        } else {
          // Reaksiyonu ekle
          return { 
            ...message, 
            reactions: { ...reactions, [emoji]: [...users, currentUserId] } 
          };
        }
      }
      return message;
    }));
  };

  const renderCreateChannelModal = () => (
    <div className="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-50">
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl w-full max-w-md mx-4">
        <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">Yeni Kanal Oluştur</h2>
          <button
            onClick={() => {
              setShowCreateChannel(false);
              setNewChannelName('');
              setNewChannelDescription('');
              setNewChannelType('public');
            }}
            className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
          >
            <X className="w-5 h-5" />
          </button>
        </div>
        
        <div className="p-6 space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Kanal Adı *
            </label>
            <input
              type="text"
              value={newChannelName}
              onChange={(e) => setNewChannelName(e.target.value)}
              placeholder="örn: proje-ekibi"
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              maxLength={50}
            />
            <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">
              Sadece küçük harfler, sayılar ve tire kullanın
            </p>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Açıklama
            </label>
            <textarea
              value={newChannelDescription}
              onChange={(e) => setNewChannelDescription(e.target.value)}
              placeholder="Bu kanalın amacını açıklayın..."
              rows={3}
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent resize-none"
              maxLength={200}
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Kanal Türü
            </label>
            <div className="space-y-2">
              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  name="channelType"
                  value="public"
                  checked={newChannelType === 'public'}
                  onChange={(e) => setNewChannelType(e.target.value as 'public' | 'private')}
                  className="w-4 h-4 text-primary border-gray-300 focus:ring-primary"
                />
                <div>
                  <div className="flex items-center space-x-2">
                    <Globe className="w-4 h-4 text-gray-500" />
                    <span className="text-sm font-medium text-gray-900 dark:text-white">Herkese Açık</span>
                  </div>
                  <p className="text-xs text-gray-500 dark:text-gray-400">
                    Tüm çalışanlar bu kanalı görebilir ve katılabilir
                  </p>
                </div>
              </label>
              
              <label className="flex items-center space-x-3 cursor-pointer">
                <input
                  type="radio"
                  name="channelType"
                  value="private"
                  checked={newChannelType === 'private'}
                  onChange={(e) => setNewChannelType(e.target.value as 'public' | 'private')}
                  className="w-4 h-4 text-primary border-gray-300 focus:ring-primary"
                />
                <div>
                  <div className="flex items-center space-x-2">
                    <Lock className="w-4 h-4 text-gray-500" />
                    <span className="text-sm font-medium text-gray-900 dark:text-white">Özel</span>
                  </div>
                  <p className="text-xs text-gray-500 dark:text-gray-400">
                    Sadece davet edilen kişiler katılabilir
                  </p>
                </div>
              </label>
            </div>
          </div>
        </div>
        
        <div className="flex items-center justify-end space-x-3 p-6 border-t border-gray-200 dark:border-gray-700">
          <button
            onClick={() => {
              setShowCreateChannel(false);
              setNewChannelName('');
              setNewChannelDescription('');
              setNewChannelType('public');
            }}
            className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors"
          >
            İptal
          </button>
          <button
            onClick={createChannel}
            disabled={!newChannelName.trim()}
            className="px-4 py-2 bg-primary hover:bg-primary-600 text-white text-sm font-medium rounded-lg disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            Kanal Oluştur
          </button>
        </div>
      </div>
    </div>
  );

  const renderFilePreview = () => {
    if (!filePreview) return null;

    return (
      <div className="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-75">
        <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl max-w-2xl max-h-[80vh] overflow-hidden">
          <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
              {filePreview.file.name}
            </h3>
            <button
              onClick={() => setFilePreview(null)}
              className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
          <div className="p-4">
            <img 
              src={filePreview.preview} 
              alt={filePreview.file.name}
              className="w-full h-auto max-h-[60vh] object-contain rounded-lg"
            />
          </div>
        </div>
      </div>
    );
  };

  const renderAdvancedFilePreview = () => {
    if (!showFilePreviewModal || !filePreviewData) return null;

    return (
      <div className="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-75">
        <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl max-w-4xl max-h-[90vh] overflow-hidden">
          <div className="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
            <div className="flex items-center space-x-3">
              <span className="text-2xl">{getFileIcon(filePreviewData.type)}</span>
              <div>
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                  {filePreviewData.file.name}
                </h3>
                <p className="text-sm text-gray-500 dark:text-gray-400">
                  {formatFileSize(filePreviewData.file.size)} • {filePreviewData.type}
                </p>
              </div>
            </div>
            <button
              onClick={closeFilePreview}
              className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
          
          <div className="p-6 overflow-y-auto max-h-[70vh]">
            {previewLoading ? (
              <div className="flex items-center justify-center py-12">
                <div className="flex items-center space-x-3">
                  <div className="w-6 h-6 border-2 border-primary border-t-transparent rounded-full animate-spin"></div>
                  <span className="text-gray-600 dark:text-gray-400">Dosya yükleniyor...</span>
                </div>
              </div>
            ) : previewError ? (
              <div className="flex items-center justify-center py-12">
                <div className="text-center">
                  <AlertCircle className="w-12 h-12 text-red-500 mx-auto mb-4" />
                  <p className="text-red-600 dark:text-red-400">{previewError}</p>
                </div>
              </div>
            ) : (
              <div className="space-y-4">
                {filePreviewData.type === 'image' && filePreviewData.content && (
                  <div className="flex justify-center">
                    <img 
                      src={filePreviewData.content} 
                      alt={filePreviewData.file.name}
                      className="max-w-full max-h-[60vh] object-contain rounded-lg shadow-lg"
                    />
                  </div>
                )}
                
                {filePreviewData.type === 'video' && filePreviewData.content && (
                  <div className="flex justify-center">
                    <video 
                      src={filePreviewData.content} 
                      controls
                      className="max-w-full max-h-[60vh] rounded-lg shadow-lg"
                    >
                      Tarayıcınız video oynatmayı desteklemiyor.
                    </video>
                  </div>
                )}
                
                {filePreviewData.type === 'audio' && filePreviewData.content && (
                  <div className="flex justify-center">
                    <audio 
                      src={filePreviewData.content} 
                      controls
                      className="w-full max-w-md"
                    >
                      Tarayıcınız ses oynatmayı desteklemiyor.
                    </audio>
                  </div>
                )}
                
                {filePreviewData.type === 'pdf' && filePreviewData.content && (
                  <div className="flex justify-center">
                    <iframe 
                      src={filePreviewData.content}
                      className="w-full h-[60vh] rounded-lg shadow-lg"
                      title={filePreviewData.file.name}
                    />
                  </div>
                )}
                
                {filePreviewData.type === 'text' && filePreviewData.content && (
                  <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4">
                    <pre className="text-sm text-gray-900 dark:text-white whitespace-pre-wrap font-mono overflow-x-auto">
                      {filePreviewData.content}
                    </pre>
                  </div>
                )}
                
                {filePreviewData.type !== 'image' && filePreviewData.type !== 'video' && 
                 filePreviewData.type !== 'audio' && filePreviewData.type !== 'pdf' && 
                 filePreviewData.type !== 'text' && filePreviewData.content && (
                  <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-6">
                    <div className="space-y-3">
                      <div className="flex items-center space-x-3">
                        <span className="text-2xl">{getFileIcon(filePreviewData.type)}</span>
                        <div>
                          <h4 className="font-medium text-gray-900 dark:text-white">
                            {filePreviewData.content.name}
                          </h4>
                          <p className="text-sm text-gray-500 dark:text-gray-400">
                            {filePreviewData.content.type}
                          </p>
                        </div>
                      </div>
                      <div className="grid grid-cols-2 gap-4 text-sm">
                        <div>
                          <span className="text-gray-500 dark:text-gray-400">Boyut:</span>
                          <span className="ml-2 text-gray-900 dark:text-white">{filePreviewData.content.size}</span>
                        </div>
                        <div>
                          <span className="text-gray-500 dark:text-gray-400">Son Değişiklik:</span>
                          <span className="ml-2 text-gray-900 dark:text-white">{filePreviewData.content.lastModified}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
          
          <div className="flex items-center justify-between p-4 border-t border-gray-200 dark:border-gray-700">
            <div className="flex items-center space-x-2">
              <button
                onClick={() => {
                  const link = document.createElement('a');
                  link.href = URL.createObjectURL(filePreviewData.file);
                  link.download = filePreviewData.file.name;
                  link.click();
                }}
                className="px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary-600 transition-colors"
              >
                <Download className="w-4 h-4 mr-2 inline" />
                İndir
              </button>
            </div>
            <button
              onClick={closeFilePreview}
              className="px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors"
            >
              Kapat
            </button>
          </div>
        </div>
      </div>
    );
  };

  // Gelişmiş arama fonksiyonları
  const getSearchSuggestions = async (partialQuery: string) => {
    if (!partialQuery.trim()) {
      setSearchSuggestions([]);
      return;
    }

    // Popüler aramalar
    const popularSearches = [
      'toplantı', 'proje', 'rapor', 'deadline', 'bütçe', 'müşteri', 'satış', 'pazarlama'
    ];

    // Kullanıcının geçmiş aramaları
    const history = JSON.parse(localStorage.getItem('searchHistory') || '[]');
    
    // Benzer kelimeler (basit synonym sistemi)
    const synonyms: { [key: string]: string[] } = {
      'toplantı': ['meeting', 'görüşme', 'randevu'],
      'proje': ['project', 'çalışma', 'iş'],
      'rapor': ['report', 'analiz', 'sunum'],
      'müşteri': ['customer', 'client', 'alıcı'],
      'satış': ['sale', 'sales', 'satışlar']
    };

    let suggestions = [...popularSearches, ...history];
    
    // Synonym'ları ekle
    Object.entries(synonyms).forEach(([key, values]) => {
      if (partialQuery.toLowerCase().includes(key)) {
        suggestions.push(...values);
      }
    });

    // Filtrele ve sırala
    suggestions = suggestions
      .filter(suggestion => suggestion.toLowerCase().includes(partialQuery.toLowerCase()))
      .slice(0, 8); // Maksimum 8 öneri

    setSearchSuggestions(suggestions);
  };

  const startVoiceSearch = () => {
    // HTTPS kontrolü
    if (window.location.protocol !== 'https:' && window.location.hostname !== 'localhost') {
      toast.error('Sesli arama için HTTPS gerekli. Lütfen güvenli bağlantı kullanın.');
      return;
    }

    // Tarayıcı desteği kontrolü
    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
      toast.error('Sesli arama bu tarayıcıda desteklenmiyor. Chrome, Edge veya Safari kullanın.');
      return;
    }

    // Mikrofon izni kontrolü
    if (navigator.permissions) {
      navigator.permissions.query({ name: 'microphone' as PermissionName }).then((result) => {
        if (result.state === 'denied') {
          toast.error('Mikrofon izni reddedildi. Tarayıcı ayarlarından izin verin.');
          return;
        }
        startRecognition();
      });
    } else {
      startRecognition();
    }
  };

  const startRecognition = () => {
    try {
      const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
      const recognition = new SpeechRecognition();
      
      recognition.lang = 'tr-TR';
      recognition.continuous = false;
      recognition.interimResults = false;
      recognition.maxAlternatives = 1;

      recognition.onstart = () => {
        setIsVoiceSearchActive(true);
        setVoiceSearchText('Dinleniyor... Konuşmaya başlayın');
        toast.success('Sesli arama başladı');
      };

      recognition.onresult = (event: any) => {
        const transcript = event.results[0][0].transcript;
        console.log('Sesli arama sonucu:', transcript);
        setSearchTerm(transcript);
        setVoiceSearchText(transcript);
        // Sesli arama sonucunu arama çubuğuna yazdır ve otomatik arama yap
        setTimeout(() => {
          performSearch(transcript);
          toast.success(`"${transcript}" aranıyor...`);
        }, 100);
      };

      recognition.onerror = (event: any) => {
        console.error('Sesli arama hatası:', event.error);
        setIsVoiceSearchActive(false);
        setVoiceSearchText('');
        
        let errorMessage = 'Sesli arama hatası';
        switch (event.error) {
          case 'network':
            errorMessage = 'Ağ bağlantısı hatası. İnternet bağlantınızı kontrol edin.';
            break;
          case 'not-allowed':
            errorMessage = 'Mikrofon izni reddedildi. Tarayıcı ayarlarından izin verin.';
            break;
          case 'no-speech':
            errorMessage = 'Ses algılanamadı. Daha net konuşun.';
            break;
          case 'audio-capture':
            errorMessage = 'Mikrofon erişim hatası. Mikrofonunuzu kontrol edin.';
            break;
          case 'service-not-allowed':
            errorMessage = 'Sesli arama servisi kullanılamıyor.';
            break;
          default:
            errorMessage = `Sesli arama hatası: ${event.error}`;
        }
        
        toast.error(errorMessage);
      };

      recognition.onend = () => {
        setIsVoiceSearchActive(false);
        setVoiceSearchText('');
        console.log('Sesli arama sonlandı');
      };

      recognition.start();
      
    } catch (error) {
      console.error('Sesli arama başlatma hatası:', error);
      toast.error('Sesli arama başlatılamadı. Lütfen tekrar deneyin.');
      setIsVoiceSearchActive(false);
      setVoiceSearchText('');
    }
  };

  const addToSearchHistory = (query: string) => {
    if (!query.trim()) return;
    
    const history = JSON.parse(localStorage.getItem('searchHistory') || '[]');
    const newHistory = [query, ...history.filter((item: string) => item !== query)].slice(0, 10);
    localStorage.setItem('searchHistory', JSON.stringify(newHistory));
    setSearchHistory(newHistory);
  };

  const performSemanticSearch = async (query: string) => {
    // Basit semantic search - gerçek uygulamada AI API kullanılır
    const semanticKeywords: { [key: string]: string[] } = {
      'toplantı': ['meeting', 'görüşme', 'randevu', 'planlama', 'agenda'],
      'rapor': ['report', 'analiz', 'sunum', 'presentation', 'doküman'],
      'proje': ['project', 'çalışma', 'iş', 'task', 'görev'],
      'müşteri': ['customer', 'client', 'alıcı', 'kullanıcı', 'user'],
      'satış': ['sale', 'sales', 'satışlar', 'gelir', 'revenue'],
      'pazarlama': ['marketing', 'reklam', 'campaign', 'kampanya'],
      'finans': ['finance', 'bütçe', 'budget', 'para', 'money'],
      'insan kaynakları': ['hr', 'human resources', 'personel', 'çalışan']
    };

    const foundKeywords: string[] = [];
    Object.entries(semanticKeywords).forEach(([key, values]) => {
      if (query.toLowerCase().includes(key) || values.some(value => query.toLowerCase().includes(value))) {
        foundKeywords.push(key, ...values);
      }
    });

    return foundKeywords;
  };

  const performSearch = async (query?: string) => {
    const searchQuery = query || searchTerm;
    const startTime = Date.now();
    setIsSearching(true);
    
    try {
      // Arama geçmişine ekle
      addToSearchHistory(searchQuery);

      // Semantic search aktifse
      let searchKeywords = [searchQuery];
      if (semanticSearchEnabled) {
        const semanticKeywords = await performSemanticSearch(searchQuery);
        searchKeywords = [...searchKeywords, ...semanticKeywords];
      }

      // Mock arama sonuçları - gerçek uygulamada Supabase'den gelecek
      const mockSearchResults: ChatMessage[] = [
        {
          id: 'search_1',
          content: 'Bu ayki satış raporu hazır',
          senderId: '2',
          senderName: 'Fatma Demir',
          senderRole: 'Muhasebe Uzmanı',
          senderAvatar: 'FD',
          channelId: 'general',
          messageType: 'text',
          timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000),
          isDirectMessage: false,
          attachments: ['rapor.pdf'],
          isPinned: false,
          isEdited: false,
          reactions: { '👍': ['1', '3'] }
        },
        {
          id: 'search_2',
          content: 'Yeni çalışan oryantasyonu için toplantı',
          senderId: '1',
          senderName: 'Ahmet Yılmaz',
          senderRole: 'İK Müdürü',
          senderAvatar: 'AY',
          channelId: 'hr',
          messageType: 'text',
          timestamp: new Date(Date.now() - 1 * 60 * 60 * 1000),
          isDirectMessage: false,
          isPinned: true,
          isEdited: false,
          reactions: {}
        }
      ];

      // Gelişmiş filtreleme
      let filteredResults = mockSearchResults.filter(message => {
        // Semantic search ile içerik arama
        const contentMatch = searchKeywords.some(keyword => 
          message.content.toLowerCase().includes(keyword.toLowerCase())
        );
        
        if (!contentMatch) {
          return false;
        }
        
        // Gönderen filtreleme
        if (searchFilters.sender && message.senderName.toLowerCase() !== searchFilters.sender.toLowerCase()) {
          return false;
        }
        
        // Tarih filtreleme
        if (searchFilters.dateFrom) {
          const fromDate = new Date(searchFilters.dateFrom);
          if (message.timestamp < fromDate) return false;
        }
        
        if (searchFilters.dateTo) {
          const toDate = new Date(searchFilters.dateTo);
          if (message.timestamp > toDate) return false;
        }
        
        // Mesaj türü filtreleme
        if (searchFilters.messageType !== 'all' && message.messageType !== searchFilters.messageType) {
          return false;
        }
        
        // Kanal filtreleme
        if (searchFilters.channel !== 'all' && message.channelId !== searchFilters.channel) {
          return false;
        }
        
        // Mesaj uzunluğu filtreleme
        if (searchFilters.messageLength !== 'all') {
          const length = message.content.length;
          if (searchFilters.messageLength === 'short' && length > 50) return false;
          if (searchFilters.messageLength === 'medium' && (length <= 50 || length > 200)) return false;
          if (searchFilters.messageLength === 'long' && length <= 200) return false;
        }
        
        // Minimum reaksiyon sayısı filtreleme
        if (searchFilters.minReactions && message.reactions) {
          const totalReactions = Object.values(message.reactions).reduce((sum: number, reactions: any) => sum + reactions.length, 0);
          if (totalReactions < parseInt(searchFilters.minReactions)) return false;
        }
        
        // Mention edilen kişi filtreleme
        if (searchFilters.mentionedUser && message.content) {
          const mentionPattern = new RegExp(`@${searchFilters.mentionedUser}`, 'i');
          if (!mentionPattern.test(message.content)) return false;
        }

        // Ek dosya filtreleme
        if (searchFilters.hasAttachments && (!message.attachments || message.attachments.length === 0)) {
          return false;
        }

        // Pinlenmiş mesaj filtreleme
        if (searchFilters.isPinned && !message.isPinned) {
          return false;
        }

        // Düzenlenmiş mesaj filtreleme
        if (searchFilters.isEdited && !message.isEdited) {
          return false;
        }

        // Reaksiyon filtreleme
        if (searchFilters.hasReactions && (!message.reactions || Object.keys(message.reactions).length === 0)) {
          return false;
        }

        // Kategori filtreleme
        if (searchFilters.category !== 'all') {
          const messageCategory = messageCategories[message.id];
          if (messageCategory !== searchFilters.category) {
            return false;
          }
        }
        
        return true;
      });

      const endTime = Date.now();
      const searchTime = endTime - startTime;
      const filtersApplied = Object.values(searchFilters).filter(value => 
        value !== '' && value !== 'all' && value !== false
      ).length;

      setSearchResults(filteredResults);
      setSearchAnalytics({
        totalResults: filteredResults.length,
        searchTime,
        filtersApplied
      });
      setActiveView('search');
      
    } catch (error) {
      console.error('Arama hatası:', error);
      toast.error('Arama yapılırken hata oluştu');
    } finally {
      setIsSearching(false);
    }
  };

  const clearSearch = () => {
    setSearchTerm('');
    setSearchFilters({
      sender: '',
      dateFrom: '',
      dateTo: '',
      messageType: 'all',
      channel: 'all',
      messageLength: 'all',
      minReactions: '',
      mentionedUser: '',
      hasAttachments: false,
      isPinned: false,
      isEdited: false,
      hasReactions: false,
      priority: 'all',
      category: 'all'
    });
    setSearchResults([]);
    setActiveView('channels');
    setShowSearchSuggestions(false);
  };

  const renderAdvancedSearchModal = () => (
    <div className="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-50">
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl w-full max-w-3xl mx-4 max-h-[90vh] overflow-y-auto">
        <div className="flex items-center justify-between p-6 pt-16 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">Gelişmiş Arama</h2>
          <button
            onClick={() => setShowAdvancedSearch(false)}
            className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
          >
            <X className="w-5 h-5" />
          </button>
        </div>
        
        <div className="p-6 space-y-6">
          {/* Arama Terimi ve Sesli Arama */}
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Arama Terimi
              </label>
              <div className="relative">
                <input
                  type="text"
                  value={searchTerm}
                  onChange={(e) => {
                    const value = e.target.value;
                    setSearchTerm(value);
                    getSearchSuggestions(value);
                  }}
                  placeholder="Mesaj içeriğinde ara..."
                  className="w-full px-3 py-2 pr-12 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                />
                <div className="absolute right-2 top-1/2 transform -translate-y-1/2 flex items-center space-x-1">
                  <button
                    onClick={() => setShowVoiceSearchHelp(true)}
                    className="p-1 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-600 rounded transition-colors"
                    title="Sesli arama yardımı"
                  >
                    <HelpCircle className="w-4 h-4" />
                  </button>
                  <button
                    onClick={startVoiceSearch}
                    disabled={isVoiceSearchActive}
                    className={`p-1 rounded transition-colors ${
                      isVoiceSearchActive 
                        ? 'text-red-500 animate-pulse bg-red-50 dark:bg-red-900/20' 
                        : 'text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-600'
                    }`}
                    title={isVoiceSearchActive ? "Sesli arama aktif - Konuşun" : "Sesli arama başlat"}
                  >
                    <Mic className="w-4 h-4" />
                  </button>
                </div>
              </div>
              {isVoiceSearchActive && (
                <div className="mt-2 p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <div className="flex space-x-1">
                        <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce"></div>
                        <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                        <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                      </div>
                      <div className="flex flex-col">
                        <span className="text-sm font-medium text-blue-700 dark:text-blue-300">
                          {voiceSearchText}
                        </span>
                        <span className="text-xs text-blue-600 dark:text-blue-400">
                          Konuşmaya başlayın...
                        </span>
                      </div>
                    </div>
                    <button
                      onClick={() => {
                        setIsVoiceSearchActive(false);
                        setVoiceSearchText('');
                      }}
                      className="text-blue-500 hover:text-blue-700 dark:hover:text-blue-300"
                      title="Sesli aramayı durdur"
                    >
                      <X className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              )}
            </div>

            {/* Arama Geçmişi */}
            {searchHistory.length > 0 && (
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Son Aramalar
                </label>
                <div className="flex flex-wrap gap-2">
                  {searchHistory.slice(0, 5).map((query, index) => (
                    <button
                      key={index}
                      onClick={() => {
                        setSearchTerm(query);
                        performSearch();
                      }}
                      className="px-3 py-1 text-xs bg-gray-100 dark:bg-gray-600 text-gray-700 dark:text-gray-300 rounded-full hover:bg-gray-200 dark:hover:bg-gray-500 transition-colors"
                    >
                      {query}
                    </button>
                  ))}
                </div>
              </div>
            )}

            {/* Semantic Search Toggle */}
            <div className="flex items-center space-x-3">
              <input
                type="checkbox"
                id="semanticSearch"
                checked={semanticSearchEnabled}
                onChange={(e) => setSemanticSearchEnabled(e.target.checked)}
                className="w-4 h-4 text-primary border-gray-300 rounded focus:ring-primary"
              />
              <label htmlFor="semanticSearch" className="text-sm text-gray-700 dark:text-gray-300">
                Anlamsal Arama (AI destekli benzer kelimeleri de bul)
              </label>
            </div>
          </div>
          
          {/* Gelişmiş Filtreler */}
          <div className="space-y-4">
            <h3 className="text-md font-medium text-gray-900 dark:text-white">Filtreler</h3>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Gönderen
                </label>
                <select
                  value={searchFilters.sender}
                  onChange={(e) => setSearchFilters(prev => ({ ...prev, sender: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                >
                  <option value="">Tümü</option>
                  {employees.map(emp => (
                    <option key={emp.id} value={emp.name}>{emp.name}</option>
                  ))}
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Mesaj Türü
                </label>
                <select
                  value={searchFilters.messageType}
                  onChange={(e) => setSearchFilters(prev => ({ ...prev, messageType: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                >
                  <option value="all">Tümü</option>
                  <option value="text">Metin</option>
                  <option value="file">Dosya</option>
                  <option value="image">Resim</option>
                  <option value="voice">Ses</option>
                  <option value="video">Video</option>
                  <option value="system">Sistem</option>
                </select>
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Başlangıç Tarihi
                </label>
                <input
                  type="date"
                  value={searchFilters.dateFrom}
                  onChange={(e) => setSearchFilters(prev => ({ ...prev, dateFrom: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Bitiş Tarihi
                </label>
                <input
                  type="date"
                  value={searchFilters.dateTo}
                  onChange={(e) => setSearchFilters(prev => ({ ...prev, dateTo: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                />
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Kanal
                </label>
                <select
                  value={searchFilters.channel}
                  onChange={(e) => setSearchFilters(prev => ({ ...prev, channel: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                >
                  <option value="all">Tüm Kanallar</option>
                  {channels.map(channel => (
                    <option key={channel.id} value={channel.id}>#{channel.name}</option>
                  ))}
                </select>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Mesaj Uzunluğu
                </label>
                <select
                  value={searchFilters.messageLength || 'all'}
                  onChange={(e) => setSearchFilters(prev => ({ ...prev, messageLength: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                >
                  <option value="all">Tümü</option>
                  <option value="short">Kısa (1-50 karakter)</option>
                  <option value="medium">Orta (51-200 karakter)</option>
                  <option value="long">Uzun (200+ karakter)</option>
                </select>
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Minimum Reaksiyon Sayısı
                </label>
                <input
                  type="number"
                  min="0"
                  value={searchFilters.minReactions || ''}
                  onChange={(e) => setSearchFilters(prev => ({ ...prev, minReactions: e.target.value }))}
                  placeholder="0"
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Mention Edilen Kişi
                </label>
                <select
                  value={searchFilters.mentionedUser || ''}
                  onChange={(e) => setSearchFilters(prev => ({ ...prev, mentionedUser: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                >
                  <option value="">Tümü</option>
                  {employees.map(emp => (
                    <option key={emp.id} value={emp.name}>@{emp.name}</option>
                  ))}
                </select>
              </div>
            </div>
          </div>
          
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Başlangıç Tarihi
              </label>
              <input
                type="date"
                value={searchFilters.dateFrom}
                onChange={(e) => setSearchFilters(prev => ({ ...prev, dateFrom: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Bitiş Tarihi
              </label>
              <input
                type="date"
                value={searchFilters.dateTo}
                onChange={(e) => setSearchFilters(prev => ({ ...prev, dateTo: e.target.value }))}
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              />
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Kanal
            </label>
            <select
              value={searchFilters.channel}
              onChange={(e) => setSearchFilters(prev => ({ ...prev, channel: e.target.value }))}
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
            >
              <option value="all">Tüm Kanallar</option>
              {channels.map(channel => (
                <option key={channel.id} value={channel.id}>#{channel.name}</option>
              ))}
            </select>
          </div>
        </div>
        
        <div className="flex items-center justify-between p-6 border-t border-gray-200 dark:border-gray-700">
          <div className="flex items-center space-x-4">
            <button
              onClick={clearSearch}
              className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors"
            >
              Temizle
            </button>
            <button
              onClick={() => {
                // Arama geçmişini temizle
                localStorage.removeItem('searchHistory');
                setSearchHistory([]);
                toast.success('Arama geçmişi temizlendi');
              }}
              className="px-4 py-2 text-sm font-medium text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300 transition-colors"
            >
              Geçmişi Temizle
            </button>
          </div>
          
          <div className="flex items-center space-x-3">
            <button
              onClick={() => setShowAdvancedSearch(false)}
              className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors"
            >
              İptal
            </button>
            <button
              onClick={() => {
                performSearch();
                setShowAdvancedSearch(false);
              }}
              disabled={isSearching}
              className="px-4 py-2 bg-primary hover:bg-primary-600 text-white text-sm font-medium rounded-lg disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              {isSearching ? (
                <div className="flex items-center space-x-2">
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                  <span>Aranıyor...</span>
                </div>
              ) : (
                <div className="flex items-center space-x-2">
                  <Search className="w-4 h-4" />
                  <span>Ara</span>
                </div>
              )}
            </button>
          </div>
        </div>
      </div>
    </div>
  );

  const renderSearchResults = () => (
    <div className="flex-1 flex flex-col">
      <div className="bg-white dark:bg-gray-700 border-b border-gray-200 dark:border-gray-600 p-4 pt-16">
        {/* Arama Çubuğu */}
        <div className="mb-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
            <input
              id="search-input"
              type="text"
              value={searchTerm}
              onChange={(e) => {
                const value = e.target.value;
                setSearchTerm(value);
                if (value.trim()) {
                  performSearch(value);
                } else {
                  setSearchResults([]);
                }
              }}
              onKeyPress={(e) => {
                if (e.key === 'Enter' && searchTerm.trim()) {
                  performSearch();
                }
              }}
              placeholder="Mesajlarda ara..."
              className="w-full pl-10 pr-20 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
            />
            
            {/* Sesli Arama Butonu */}
            <button
              onClick={startVoiceSearch}
              disabled={isVoiceSearchActive}
              className={`absolute right-3 top-1/2 transform -translate-y-1/2 p-1 rounded transition-colors ${
                isVoiceSearchActive 
                  ? 'text-red-500 animate-pulse bg-red-50 dark:bg-red-900/20' 
                  : 'text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-600'
              }`}
              title={isVoiceSearchActive ? "Sesli arama aktif - Konuşun" : "Sesli arama başlat"}
            >
              <Mic className="w-4 h-4" />
            </button>
            
            {/* Sesli Arama Yardım Butonu */}
            <button
              onClick={() => setShowVoiceSearchHelp(true)}
              className="absolute right-10 top-1/2 transform -translate-y-1/2 p-1 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-600 rounded transition-colors"
              title="Sesli arama yardımı"
            >
              <HelpCircle className="w-4 h-4" />
            </button>
            
            {searchTerm && !isVoiceSearchActive && (
              <button
                onClick={() => {
                  setSearchTerm('');
                  setSearchResults([]);
                }}
                className="absolute right-16 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
              >
                <X className="w-4 h-4" />
              </button>
            )}
          </div>
          
          {/* Sesli Arama Durumu */}
          {isVoiceSearchActive && (
            <div className="mt-2 p-3 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                  <div className="flex flex-col">
                    <span className="text-sm font-medium text-blue-700 dark:text-blue-300">
                      {voiceSearchText || 'Konuşmaya başlayın...'}
                    </span>
                    <span className="text-xs text-blue-600 dark:text-blue-400">
                      Sesli arama aktif
                    </span>
                  </div>
                </div>
                <button
                  onClick={() => {
                    setIsVoiceSearchActive(false);
                    setVoiceSearchText('');
                  }}
                  className="text-blue-500 hover:text-blue-700 dark:hover:text-blue-300"
                  title="Sesli aramayı durdur"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
            </div>
          )}
        </div>
        
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Search className="w-5 h-5 text-gray-400" />
            <div>
              <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
                Arama Sonuçları
              </h2>
              <div className="flex items-center space-x-4 text-sm text-gray-500 dark:text-gray-400">
                <span>{searchResults.length} sonuç bulundu</span>
                {searchTerm && (
                  <span className="bg-gray-100 dark:bg-gray-600 px-2 py-1 rounded">
                    "{searchTerm}"
                  </span>
                )}
                {isVoiceSearchActive && (
                  <span className="bg-blue-100 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 px-2 py-1 rounded flex items-center space-x-1">
                    <Mic className="w-3 h-3" />
                    <span>Sesli Arama</span>
                  </span>
                )}
                {semanticSearchEnabled && (
                  <span className="bg-blue-100 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 px-2 py-1 rounded">
                    AI Arama
                  </span>
                )}
                {searchAnalytics.searchTime > 0 && (
                  <span className="bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-300 px-2 py-1 rounded">
                    {searchAnalytics.searchTime}ms
                  </span>
                )}
                {searchAnalytics.filtersApplied > 0 && (
                  <span className="bg-purple-100 dark:bg-purple-900/20 text-purple-700 dark:text-purple-300 px-2 py-1 rounded">
                    {searchAnalytics.filtersApplied} filtre
                  </span>
                )}
              </div>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <button
              onClick={() => setShowAdvancedSearch(true)}
              className="px-3 py-1 text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white flex items-center space-x-1"
            >
              <Filter className="w-4 h-4" />
              <span>Filtreler</span>
            </button>
            <button
              onClick={clearSearch}
              className="px-3 py-1 text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors"
            >
              Temizle
            </button>
          </div>
        </div>
      </div>
      
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {searchResults.length === 0 ? (
          <div className="flex items-center justify-center h-full">
            <div className="text-center">
              <Search className="w-16 h-16 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                {searchTerm ? 'Sonuç Bulunamadı' : 'Arama Yapın'}
              </h3>
              <p className="text-gray-500 dark:text-gray-400 mb-4">
                {searchTerm 
                  ? `"${searchTerm}" için sonuç bulunamadı. Farklı anahtar kelimeler deneyin.`
                  : 'Mesajlarda arama yapmak için yukarıdaki arama çubuğunu kullanın.'
                }
              </p>
              <div className="flex items-center justify-center space-x-2">
                <button
                  onClick={() => setShowAdvancedSearch(true)}
                  className="px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary-600 transition-colors"
                >
                  Gelişmiş Arama
                </button>
                <button
                  onClick={clearSearch}
                  className="px-4 py-2 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors"
                >
                  Temizle
                </button>
              </div>
            </div>
          </div>
        ) : (
          searchResults.map((message) => (
            <div key={message.id} className="flex items-start space-x-3 p-3 bg-white dark:bg-gray-700 rounded-lg border border-gray-200 dark:border-gray-600">
              <div className="flex-shrink-0">
                <div className="w-8 h-8 bg-primary text-white rounded-full flex items-center justify-center text-sm font-medium">
                  {message.senderAvatar}
                </div>
              </div>
              
              <div className="flex-1 min-w-0">
                <div className="flex items-center space-x-2 mb-1">
                  <span className="text-sm font-medium text-gray-900 dark:text-white">
                    {message.senderName}
                  </span>
                  <span className="text-xs text-gray-500 dark:text-gray-400">
                    {message.senderRole}
                  </span>
                  <span className="text-xs text-gray-400 dark:text-gray-500">
                    {format(message.timestamp, 'dd.MM.yyyy HH:mm', { locale: tr })}
                  </span>
                  <span className="text-xs text-primary">
                    #{channels.find(c => c.id === message.channelId)?.name || 'bilinmeyen'}
                  </span>
                </div>
                
                <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-3">
                  <div 
                    className="text-sm text-gray-900 dark:text-white"
                    dangerouslySetInnerHTML={{ __html: formatMessageContent(message.content) }}
                  />
                </div>
              </div>
            </div>
          ))
        )}
      </div>
    </div>
  );



  const editMessage = (messageId: string, newContent: string) => {
    if (!newContent.trim()) return;

    setMessages(prev => prev.map(message => {
      if (message.id === messageId && message.senderId === currentUserId) {
        return {
          ...message,
          content: newContent,
          isEdited: true,
          editedAt: new Date()
        };
      }
      return message;
    }));

    setEditingMessage(null);
    setEditMessageContent('');
    toast.success('Mesaj düzenlendi');
  };

  const deleteMessage = (messageId: string) => {
    setMessages(prev => prev.filter(message => 
      !(message.id === messageId && message.senderId === currentUserId)
    ));
    toast.success('Mesaj silindi');
  };

  const pinMessage = (message: ChatMessage) => {
    if (pinnedMessages.some(pm => pm.id === message.id)) {
      setPinnedMessages(prev => prev.filter(pm => pm.id !== message.id));
      toast.success('Mesaj pin kaldırıldı');
    } else {
      setPinnedMessages(prev => [...prev, message]);
      toast.success('Mesaj pinlendi');
    }
  };

  const startEditingMessage = (message: ChatMessage) => {
    if (message.senderId === currentUserId) {
      setEditingMessage(message.id);
      setEditMessageContent(message.content);
    }
  };

  const cancelEditing = () => {
    setEditingMessage(null);
    setEditMessageContent('');
  };

  const renderVoiceRecorder = () => (
    <div className="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-50">
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl w-96 mx-4">
        <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white flex items-center space-x-2">
            <Mic className="w-5 h-5 text-red-500" />
            <span>Sesli Mesaj Kaydet</span>
          </h2>
          <button
            onClick={() => setShowVoiceRecorder(false)}
            className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
          >
            <X className="w-5 h-5" />
          </button>
        </div>
        
        <div className="p-6">
          <div className="text-center">
            {isRecordingVoice ? (
              <div className="space-y-4">
                <div className="w-20 h-20 bg-red-500 rounded-full mx-auto flex items-center justify-center animate-pulse">
                  <Mic className="w-8 h-8 text-white" />
                </div>
                <div className="text-2xl font-mono text-gray-900 dark:text-white">
                  {Math.floor(recordingDuration / 60)}:{(recordingDuration % 60).toString().padStart(2, '0')}
                </div>
                <p className="text-sm text-gray-600 dark:text-gray-400">Kayıt devam ediyor...</p>
                <button
                  onClick={stopVoiceRecording}
                  className="px-6 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors"
                >
                  Kaydı Durdur
                </button>
              </div>
            ) : (
              <div className="space-y-4">
                <div className="w-20 h-20 bg-gray-200 dark:bg-gray-600 rounded-full mx-auto flex items-center justify-center">
                  <Mic className="w-8 h-8 text-gray-500" />
                </div>
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  Sesli mesaj kaydetmek için başlat butonuna tıklayın
                </p>
                <button
                  onClick={startVoiceRecording}
                  className="px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
                >
                  Kaydı Başlat
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );

  const renderVoiceMessage = (voiceMessage: typeof voiceMessages[0]) => (
    <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-3 border border-blue-200 dark:border-blue-800">
      <div className="flex items-center space-x-3">
        <div className="flex items-center space-x-2">
          <button
            onClick={() => playVoiceMessage(voiceMessage.id)}
            className="w-10 h-10 bg-blue-500 text-white rounded-full flex items-center justify-center hover:bg-blue-600 transition-colors"
          >
            {voiceMessage.isPlaying ? (
              <Square className="w-4 h-4" />
            ) : (
              <Play className="w-4 h-4" />
            )}
          </button>
          
          <div className="flex items-center space-x-2">
            <span className="text-sm text-gray-600 dark:text-gray-400">
              {Math.floor(voiceMessage.duration / 60)}:{(voiceMessage.duration % 60).toString().padStart(2, '0')}
            </span>
            
            <select
              value={voiceMessage.playbackRate}
              onChange={(e) => setPlaybackRate(voiceMessage.id, parseFloat(e.target.value))}
              className="text-xs border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700"
            >
              <option value={0.5}>0.5x</option>
              <option value={1}>1x</option>
              <option value={1.5}>1.5x</option>
              <option value={2}>2x</option>
            </select>
          </div>
        </div>
        
        <div className="flex-1">
          <p className="text-sm text-gray-900 dark:text-white font-medium">
            {voiceMessage.senderName}
          </p>
          <p className="text-xs text-gray-500">
            {voiceMessage.timestamp.toLocaleTimeString()}
          </p>
        </div>
        
        <div className="flex items-center space-x-1">
          {!voiceMessage.transcription && (
            <button
              onClick={() => transcribeVoiceMessage(voiceMessage.id)}
              className="p-1 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
              title="Transkripsiyon"
            >
              <FileText className="w-4 h-4" />
            </button>
          )}
          <button className="p-1 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
            <Download className="w-4 h-4" />
          </button>
        </div>
      </div>
      
      {voiceMessage.transcription && (
        <div className="mt-2 p-2 bg-white dark:bg-gray-800 rounded border border-gray-200 dark:border-gray-700">
          <p className="text-xs text-gray-600 dark:text-gray-400">
            <strong>Transkripsiyon:</strong> {voiceMessage.transcription}
          </p>
        </div>
      )}
    </div>
  );

  const renderExtractedTasks = () => (
    <div className="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-50">
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl w-full max-w-4xl mx-4 h-[80vh] flex flex-col">
        <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white flex items-center space-x-2">
            <Target className="w-5 h-5 text-green-500" />
            <span>Otomatik Çıkarılan Görevler</span>
            <span className="text-sm bg-green-100 text-green-800 px-2 py-1 rounded-full">
              {extractedTasks.length}
            </span>
          </h2>
          <button
            onClick={() => setShowExtractedTasks(false)}
            className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
          >
            <X className="w-5 h-5" />
          </button>
        </div>
        
        <div className="flex-1 p-6 overflow-auto">
          <div className="space-y-4">
            {extractedTasks.map(task => (
              <div key={task.id} className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-4">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-2">
                      <h3 className="font-medium text-gray-900 dark:text-white">{task.title}</h3>
                      <span className={`px-2 py-1 text-xs rounded-full ${getPriorityColor(task.priority)}`}>
                        {task.priority}
                      </span>
                      <span className={`px-2 py-1 text-xs rounded-full ${
                        task.status === 'completed' ? 'bg-green-100 text-green-800' :
                        task.status === 'in-progress' ? 'bg-blue-100 text-blue-800' :
                        task.status === 'cancelled' ? 'bg-red-100 text-red-800' :
                        'bg-gray-100 text-gray-800'
                      }`}>
                        {task.status}
                      </span>
                    </div>
                    
                    <p className="text-sm text-gray-600 dark:text-gray-400 mb-3">{task.description}</p>
                    
                    <div className="flex items-center space-x-4 text-xs text-gray-500">
                      <span>Atanan: {task.assignee}</span>
                      {task.dueDate && (
                        <span>Son Tarih: {task.dueDate.toLocaleDateString()}</span>
                      )}
                      <span>Oluşturulma: {task.createdAt.toLocaleDateString()}</span>
                      <span>Kaynak: {task.sourceChannel}</span>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <select
                      value={task.status}
                      onChange={(e) => updateTaskStatus(task.id, e.target.value as any)}
                      className="px-2 py-1 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-xs"
                    >
                      <option value="pending">Bekliyor</option>
                      <option value="in-progress">Devam Ediyor</option>
                      <option value="completed">Tamamlandı</option>
                      <option value="cancelled">İptal</option>
                    </select>
                    
                    <button className="p-1 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
                      <Edit className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              </div>
            ))}
            
            {extractedTasks.length === 0 && (
              <div className="text-center py-8">
                <Target className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-500 dark:text-gray-400">Henüz otomatik görev çıkarılmadı</p>
                <p className="text-sm text-gray-400 dark:text-gray-500 mt-2">
                  Mesajlarda görev anahtar kelimeleri kullanarak görevler otomatik oluşturulacak
                </p>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );

  const renderFileManager = () => (
    <div className="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-50">
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl w-full max-w-6xl mx-4 h-[80vh] flex flex-col">
        <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white flex items-center space-x-2">
            <FolderOpen className="w-5 h-5 text-blue-500" />
            <span>Dosya Yöneticisi</span>
          </h2>
          <div className="flex items-center space-x-2">
            <button
              onClick={() => createFileFolder('Yeni Klasör')}
              className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
              title="Yeni klasör oluştur"
            >
              <FolderPlus className="w-4 h-4" />
            </button>
            <button
              onClick={closeFileManager}
              className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
        </div>
        
        <div className="flex-1 flex">
          {/* Sol Sidebar - Klasörler */}
          <div className="w-64 border-r border-gray-200 dark:border-gray-700 p-4">
            <h3 className="text-sm font-medium text-gray-900 dark:text-white mb-3">Klasörler</h3>
            <div className="space-y-2">
              {fileFolders.map(folder => (
                <div key={folder.id} className="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <Folder className="w-4 h-4 text-blue-500" />
                    <span className="text-sm text-gray-700 dark:text-gray-300">{folder.name}</span>
                    <span className="text-xs text-gray-500">({folder.files.length})</span>
                  </div>
                </div>
              ))}
            </div>
          </div>
          
          {/* Ana İçerik */}
          <div className="flex-1 p-4">
            {/* Üst Araç Çubuğu */}
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center space-x-4">
                {/* Görünüm Seçenekleri */}
                <div className="flex items-center space-x-1">
                  <button
                    onClick={() => setFileManagerView('list')}
                    className={`p-2 rounded ${fileManagerView === 'list' ? 'bg-blue-100 dark:bg-blue-900' : 'bg-gray-100 dark:bg-gray-800'}`}
                    title="Liste görünümü"
                  >
                    <List className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => setFileManagerView('grid')}
                    className={`p-2 rounded ${fileManagerView === 'grid' ? 'bg-blue-100 dark:bg-blue-900' : 'bg-gray-100 dark:bg-gray-800'}`}
                    title="Grid görünümü"
                  >
                    <Grid className="w-4 h-4" />
                  </button>
                  <button
                    onClick={() => setFileManagerView('timeline')}
                    className={`p-2 rounded ${fileManagerView === 'timeline' ? 'bg-blue-100 dark:bg-blue-900' : 'bg-gray-100 dark:bg-gray-800'}`}
                    title="Zaman çizelgesi"
                  >
                    <Clock className="w-4 h-4" />
                  </button>
                </div>
                
                {/* Sıralama */}
                <select
                  value={fileManagerSort}
                  onChange={(e) => setFileManagerSort(e.target.value as any)}
                  className="px-3 py-1 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-sm"
                >
                  <option value="name">İsme göre</option>
                  <option value="size">Boyuta göre</option>
                  <option value="date">Tarihe göre</option>
                  <option value="type">Türe göre</option>
                </select>
              </div>
              
              <div className="flex items-center space-x-2">
                <input
                  type="text"
                  placeholder="Dosya ara..."
                  className="px-3 py-1 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-sm w-48"
                />
                <button className="p-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600">
                  <Search className="w-4 h-4" />
                </button>
              </div>
            </div>
            
            {/* Filtreler */}
            <div className="flex items-center space-x-4 mb-4 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg">
              <select
                value={fileManagerFilter.type}
                onChange={(e) => setFileManagerFilter(prev => ({ ...prev, type: e.target.value }))}
                className="px-2 py-1 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-xs"
              >
                <option value="all">Tüm türler</option>
                <option value="image">Resimler</option>
                <option value="video">Videolar</option>
                <option value="audio">Sesler</option>
                <option value="application">Belgeler</option>
                <option value="text">Metinler</option>
              </select>
              
              <select
                value={fileManagerFilter.size}
                onChange={(e) => setFileManagerFilter(prev => ({ ...prev, size: e.target.value }))}
                className="px-2 py-1 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-xs"
              >
                <option value="all">Tüm boyutlar</option>
                <option value="small">Küçük (&lt;1MB)</option>
                <option value="medium">Orta (1-10MB)</option>
                <option value="large">Büyük (&gt;10MB)</option>
              </select>
              
              <select
                value={fileManagerFilter.date}
                onChange={(e) => setFileManagerFilter(prev => ({ ...prev, date: e.target.value }))}
                className="px-2 py-1 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-xs"
              >
                <option value="all">Tüm tarihler</option>
                <option value="today">Bugün</option>
                <option value="week">Bu hafta</option>
                <option value="month">Bu ay</option>
                <option value="year">Bu yıl</option>
              </select>
            </div>
            
            {/* Dosya Listesi */}
            <div className="flex-1 overflow-auto">
              {fileManagerView === 'list' && (
                <div className="space-y-2">
                  {getFilteredFiles().map(file => (
                    <div key={file.id} className="flex items-center justify-between p-3 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
                      <div className="flex items-center space-x-3">
                        <span className="text-lg">{getFileIcon(getFileType({ type: file.type } as File))}</span>
                        <div>
                          <div className="font-medium text-gray-900 dark:text-white">{file.name}</div>
                          <div className="text-sm text-gray-500">
                            {formatFileSize(file.size)} • {file.uploadedAt.toLocaleDateString()}
                          </div>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <button className="p-1 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
                          <Download className="w-4 h-4" />
                        </button>
                        <button className="p-1 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
                          <Share className="w-4 h-4" />
                        </button>
                        <button className="p-1 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
                          <MoreVertical className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
              
              {fileManagerView === 'grid' && (
                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                  {getFilteredFiles().map(file => (
                    <div key={file.id} className="p-4 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 text-center">
                      <div className="text-3xl mb-2">{getFileIcon(getFileType({ type: file.type } as File))}</div>
                      <div className="text-sm font-medium text-gray-900 dark:text-white truncate">{file.name}</div>
                      <div className="text-xs text-gray-500 mt-1">{formatFileSize(file.size)}</div>
                    </div>
                  ))}
                </div>
              )}
              
              {fileManagerView === 'timeline' && (
                <div className="space-y-4">
                  {getFilteredFiles().map(file => (
                    <div key={file.id} className="flex items-center space-x-4 p-3 bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700">
                      <div className="text-center">
                        <div className="text-sm font-medium text-gray-900 dark:text-white">
                          {file.uploadedAt.toLocaleDateString()}
                        </div>
                        <div className="text-xs text-gray-500">
                          {file.uploadedAt.toLocaleTimeString()}
                        </div>
                      </div>
                      <div className="flex-1 flex items-center space-x-3">
                        <span className="text-lg">{getFileIcon(getFileType({ type: file.type } as File))}</span>
                        <div>
                          <div className="font-medium text-gray-900 dark:text-white">{file.name}</div>
                          <div className="text-sm text-gray-500">{formatFileSize(file.size)}</div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderKeyboardShortcuts = () => (
    <div className="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-50">
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl w-full max-w-2xl mx-4">
        <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white flex items-center space-x-2">
            <span className="text-2xl">⌨️</span>
            <span>Klavye Kısayolları</span>
          </h2>
          <button
            onClick={() => setShowKeyboardShortcuts(false)}
            className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
          >
            <X className="w-5 h-5" />
          </button>
        </div>
        
        <div className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Mesajlaşma */}
            <div>
              <h3 className="text-md font-medium text-gray-900 dark:text-white mb-3">Mesajlaşma</h3>
              <div className="space-y-2">
                <div className="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded-lg">
                  <span className="text-sm text-gray-700 dark:text-gray-300">Mesaj gönder</span>
                  <kbd className="px-2 py-1 text-xs bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded">Enter</kbd>
                </div>
                <div className="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded-lg">
                  <span className="text-sm text-gray-700 dark:text-gray-300">Yeni satır</span>
                  <kbd className="px-2 py-1 text-xs bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded">Shift + Enter</kbd>
                </div>
                <div className="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded-lg">
                  <span className="text-sm text-gray-700 dark:text-gray-300">Input'a focus</span>
                  <kbd className="px-2 py-1 text-xs bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded">Ctrl + L</kbd>
                </div>
                <div className="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded-lg">
                  <span className="text-sm text-gray-700 dark:text-gray-300">Input'u temizle</span>
                  <kbd className="px-2 py-1 text-xs bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded">Escape</kbd>
                </div>
              </div>
            </div>

            {/* Arama ve Navigasyon */}
            <div>
              <h3 className="text-md font-medium text-gray-900 dark:text-white mb-3">Arama ve Navigasyon</h3>
              <div className="space-y-2">
                <div className="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded-lg">
                  <span className="text-sm text-gray-700 dark:text-gray-300">Arama</span>
                  <kbd className="px-2 py-1 text-xs bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded">Ctrl + K</kbd>
                </div>
                <div className="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded-lg">
                  <span className="text-sm text-gray-700 dark:text-gray-300">Sidebar toggle</span>
                  <kbd className="px-2 py-1 text-xs bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded">Ctrl + B</kbd>
                </div>
                <div className="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded-lg">
                  <span className="text-sm text-gray-700 dark:text-gray-300">Yeni kanal</span>
                  <kbd className="px-2 py-1 text-xs bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded">Ctrl + N</kbd>
                </div>
                <div className="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded-lg">
                  <span className="text-sm text-gray-700 dark:text-gray-300">Direkt mesaj</span>
                  <kbd className="px-2 py-1 text-xs bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded">Ctrl + D</kbd>
                </div>
              </div>
            </div>

            {/* Medya ve Özellikler */}
            <div>
              <h3 className="text-md font-medium text-gray-900 dark:text-white mb-3">Medya ve Özellikler</h3>
              <div className="space-y-2">
                <div className="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded-lg">
                  <span className="text-sm text-gray-700 dark:text-gray-300">Dosya yükle</span>
                  <kbd className="px-2 py-1 text-xs bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded">Ctrl + U</kbd>
                </div>
                <div className="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded-lg">
                  <span className="text-sm text-gray-700 dark:text-gray-300">Emoji</span>
                  <kbd className="px-2 py-1 text-xs bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded">Ctrl + E</kbd>
                </div>
                <div className="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded-lg">
                  <span className="text-sm text-gray-700 dark:text-gray-300">İş akışı</span>
                  <kbd className="px-2 py-1 text-xs bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded">Ctrl + W</kbd>
                </div>
              </div>
            </div>

            {/* Ayarlar */}
            <div>
              <h3 className="text-md font-medium text-gray-900 dark:text-white mb-3">Ayarlar</h3>
              <div className="space-y-2">
                <div className="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-800 rounded-lg">
                  <span className="text-sm text-gray-700 dark:text-gray-300">Tema değiştir</span>
                  <kbd className="px-2 py-1 text-xs bg-gray-200 dark:bg-gray-600 text-gray-800 dark:text-gray-200 rounded">Ctrl + T</kbd>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div className="flex justify-end p-6 border-t border-gray-200 dark:border-gray-700">
          <button
            onClick={() => setShowKeyboardShortcuts(false)}
            className="px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary-600 transition-colors"
          >
            Anladım
          </button>
        </div>
      </div>
    </div>
  );

  const renderVoiceSearchHelp = () => (
    <div className="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-50">
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl w-full max-w-md mx-4">
        <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white flex items-center space-x-2">
            <Mic className="w-5 h-5 text-blue-500" />
            <span>Sesli Arama Yardımı</span>
          </h2>
          <button
            onClick={() => setShowVoiceSearchHelp(false)}
            className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
          >
            <X className="w-5 h-5" />
          </button>
        </div>
        
        <div className="p-6 space-y-4">
          <div className="space-y-3">
            <h3 className="font-medium text-gray-900 dark:text-white">Gereksinimler:</h3>
            <ul className="space-y-2 text-sm text-gray-600 dark:text-gray-400">
              <li className="flex items-start space-x-2">
                <div className="w-1.5 h-1.5 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                <span>HTTPS bağlantısı (localhost hariç)</span>
              </li>
              <li className="flex items-start space-x-2">
                <div className="w-1.5 h-1.5 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                <span>Chrome, Edge veya Safari tarayıcısı</span>
              </li>
              <li className="flex items-start space-x-2">
                <div className="w-1.5 h-1.5 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                <span>Mikrofon izni</span>
              </li>
              <li className="flex items-start space-x-2">
                <div className="w-1.5 h-1.5 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                <span>İnternet bağlantısı</span>
              </li>
            </ul>
          </div>
          
          <div className="space-y-3">
            <h3 className="font-medium text-gray-900 dark:text-white">Kullanım:</h3>
            <ul className="space-y-2 text-sm text-gray-600 dark:text-gray-400">
              <li className="flex items-start space-x-2">
                <div className="w-1.5 h-1.5 bg-green-500 rounded-full mt-2 flex-shrink-0"></div>
                <span>Mikrofon butonuna tıklayın</span>
              </li>
              <li className="flex items-start space-x-2">
                <div className="w-1.5 h-1.5 bg-green-500 rounded-full mt-2 flex-shrink-0"></div>
                <span>Net ve yavaş konuşun</span>
              </li>
              <li className="flex items-start space-x-2">
                <div className="w-1.5 h-1.5 bg-green-500 rounded-full mt-2 flex-shrink-0"></div>
                <span>Türkçe kelimeler kullanın</span>
              </li>
            </ul>
          </div>
          
          <div className="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-3">
            <div className="flex items-start space-x-2">
              <div className="w-5 h-5 text-yellow-600 dark:text-yellow-400 flex-shrink-0 mt-0.5">
                ⚠️
              </div>
              <div className="text-sm text-yellow-800 dark:text-yellow-200">
                <p className="font-medium mb-1">Önemli:</p>
                <p>Sesli arama için Google'ın ses tanıma servisi kullanılır. İnternet bağlantınızın stabil olduğundan emin olun.</p>
              </div>
            </div>
          </div>
        </div>
        
        <div className="flex justify-end p-6 border-t border-gray-200 dark:border-gray-700">
          <button
            onClick={() => setShowVoiceSearchHelp(false)}
            className="px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary-600 transition-colors"
          >
            Anladım
          </button>
        </div>
      </div>
    </div>
  );

  const renderPinnedMessages = () => (
    <div className="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-50">
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl w-full max-w-4xl max-h-[80vh] mx-4 flex flex-col">
        <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
            Pinlenmiş Mesajlar ({pinnedMessages.length})
          </h2>
          <button
            onClick={() => setShowPinnedMessages(false)}
            className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
          >
            <X className="w-5 h-5" />
          </button>
        </div>
        
        <div className="flex-1 overflow-y-auto p-6">
          {pinnedMessages.length === 0 ? (
            <div className="text-center py-8">
              <Pin className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                Pinlenmiş Mesaj Yok
              </h3>
              <p className="text-gray-500 dark:text-gray-400">
                Önemli mesajları pinleyerek burada görüntüleyebilirsiniz
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              {pinnedMessages.map((message) => (
                <div key={message.id} className="flex items-start space-x-3 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                  <div className="flex-shrink-0">
                    <div className="w-8 h-8 bg-primary text-white rounded-full flex items-center justify-center text-sm font-medium">
                      {message.senderAvatar}
                    </div>
                  </div>
                  
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center space-x-2 mb-1">
                      <span className="text-sm font-medium text-gray-900 dark:text-white">
                        {message.senderName}
                      </span>
                      <span className="text-xs text-gray-500 dark:text-gray-400">
                        {message.senderRole}
                      </span>
                      <span className="text-xs text-gray-400 dark:text-gray-500">
                        {format(message.timestamp, 'dd.MM.yyyy HH:mm', { locale: tr })}
                      </span>
                      <Pin className="w-3 h-3 text-yellow-500" />
                    </div>
                    
                    <div className="bg-white dark:bg-gray-700 rounded-lg p-3 shadow-sm">
                      {editingMessage === message.id ? (
                        <div className="space-y-2">
                          <textarea
                            value={editMessageContent}
                            onChange={(e) => setEditMessageContent(e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white resize-none"
                            rows={2}
                          />
                          <div className="flex items-center space-x-2">
                            <button
                              onClick={() => editMessage(message.id, editMessageContent)}
                              className="px-3 py-1 text-xs bg-primary text-white rounded hover:bg-primary-600"
                            >
                              Kaydet
                            </button>
                            <button
                              onClick={cancelEditing}
                              className="px-3 py-1 text-xs text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300"
                            >
                              İptal
                            </button>
                          </div>
                        </div>
                      ) : (
                        <div 
                          className="text-sm text-gray-900 dark:text-white"
                          dangerouslySetInnerHTML={{ __html: formatMessageContent(message.content) }}
                        />
                      )}
                    </div>
                  </div>
                  
                  <button
                    onClick={() => pinMessage(message)}
                    className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
                  >
                    <X className="w-4 h-4" />
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );

  const toggleFavoriteMessage = (messageId: string) => {
    setFavoriteMessages(prev => 
      prev.includes(messageId) 
        ? prev.filter(id => id !== messageId)
        : [...prev, messageId]
    );
  };

  const categorizeMessage = (messageId: string, category: 'announcement' | 'question' | 'suggestion' | 'general') => {
    setMessageCategories(prev => ({
      ...prev,
      [messageId]: category
    }));
  };

  // 3 noktalı menü fonksiyonları
  const openEmployeeMenu = (employeeId: string, event: React.MouseEvent) => {
    event.stopPropagation();
    event.preventDefault();
    
    // Eğer aynı çalışanın menüsü zaten açıksa, kapat
    if (showEmployeeMenu === employeeId) {
      closeEmployeeMenu();
      return;
    }
    
    // Tıklanan butonun pozisyonunu al
    const button = event.currentTarget as HTMLElement;
    const rect = button.getBoundingClientRect();
    
    // Menü pozisyonunu hesapla - butonun sağ tarafında açılsın
    let x = rect.right + 5; // Butonun sağ kenarından 5px uzakta
    let y = rect.top; // Butonun üst kenarıyla aynı hizada
    
    // Mobil cihazlarda menüyü butonun altında göster
    const isMobile = window.innerWidth < 768;
    if (isMobile) {
      x = rect.left; // Butonun sol kenarından başla
      y = rect.bottom + 5; // Butonun altında
    }
    
    setShowEmployeeMenu(employeeId);
    setEmployeeMenuPosition({ x, y });
  };

  const closeEmployeeMenu = () => {
    setShowEmployeeMenu(null);
  };

  const startDirectMessageFromMenu = (employee: Employee) => {
    startDirectMessage(employee);
    closeEmployeeMenu();
  };

  const viewEmployeeProfile = (employee: Employee) => {
    // Önceki görünümü kaydet
    if (selectedChannel) {
      setPreviousView('channel');
    } else if (selectedEmployee) {
      setPreviousView('employee');
    } else {
      setPreviousView('search');
    }
    
    // Profil modalını aç
    setSelectedProfileEmployee(employee);
    setShowEmployeeProfile(true);
    closeEmployeeMenu();
  };

  const sendFileToEmployee = (employee: Employee) => {
    toast.success(`${employee.name} için dosya gönderme seçeneği açılıyor`);
    closeEmployeeMenu();
    // Burada dosya seçme dialogu açılabilir
  };

  const scheduleMeetingWithEmployee = (employee: Employee) => {
    toast.success(`${employee.name} ile toplantı planlanıyor`);
    closeEmployeeMenu();
    // Burada takvim entegrasyonu ile toplantı planlama açılabilir
  };

  const addEmployeeToFavorites = (employee: Employee) => {
    if (favoriteEmployees.includes(employee.id)) {
      setFavoriteEmployees(prev => prev.filter(id => id !== employee.id));
      toast.success(`${employee.name} favorilerden çıkarıldı`);
    } else {
      setFavoriteEmployees(prev => [...prev, employee.id]);
      toast.success(`${employee.name} favorilere eklendi`);
    }
    closeEmployeeMenu();
  };

  const changeEmployeeStatus = (employee: Employee, newStatus: 'online' | 'away' | 'busy' | 'offline') => {
    setEmployees(prev => prev.map(emp => 
      emp.id === employee.id ? { ...emp, status: newStatus } : emp
    ));
    toast.success(`${employee.name} durumu "${newStatus}" olarak değiştirildi`);
    closeEmployeeMenu();
  };

  const isEmployeeFavorite = (employeeId: string) => {
    return favoriteEmployees.includes(employeeId);
  };

  const getMessageCategoryColor = (category: string) => {
    switch (category) {
      case 'announcement': return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200';
      case 'question': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';
      case 'suggestion': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200';
    }
  };

  const getMessageCategoryIcon = (category: string) => {
    switch (category) {
      case 'announcement': return '📢';
      case 'question': return '❓';
      case 'suggestion': return '💡';
      default: return '💬';
    }
  };



  const renderFavoritesPanel = () => (
    <div className="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-50">
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl w-full max-w-4xl max-h-[80vh] mx-4 flex flex-col">
        <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
            Favori Mesajlar ({favoriteMessages.length})
          </h2>
          <button
            onClick={() => setShowFavorites(false)}
            className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
          >
            <X className="w-5 h-5" />
          </button>
        </div>
        
        <div className="flex-1 overflow-y-auto p-6">
          {favoriteMessages.length === 0 ? (
            <div className="text-center py-8">
              <Star className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-2">
                Favori Mesaj Yok
              </h3>
              <p className="text-gray-500 dark:text-gray-400">
                Önemli mesajları favorilere ekleyerek burada görüntüleyebilirsiniz
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              {messages
                .filter(message => favoriteMessages.includes(message.id))
                .map((message) => (
                  <div key={message.id} className="flex items-start space-x-3 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <div className="flex-shrink-0">
                      <div className="w-8 h-8 bg-primary text-white rounded-full flex items-center justify-center text-sm font-medium">
                        {message.senderAvatar}
                      </div>
                    </div>
                    
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center space-x-2 mb-1">
                        <span className="text-sm font-medium text-gray-900 dark:text-white">
                          {message.senderName}
                        </span>
                        <span className="text-xs text-gray-500 dark:text-gray-400">
                          {message.senderRole}
                        </span>
                        <span className="text-xs text-gray-400 dark:text-gray-500">
                          {format(message.timestamp, 'dd.MM.yyyy HH:mm', { locale: tr })}
                        </span>
                        <Star className="w-3 h-3 text-yellow-500 fill-current" />
                        {messageCategories[message.id] && (
                          <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs ${getMessageCategoryColor(messageCategories[message.id])}`}>
                            {getMessageCategoryIcon(messageCategories[message.id])} {messageCategories[message.id]}
                          </span>
                        )}
                      </div>
                      
                      <div className="bg-white dark:bg-gray-700 rounded-lg p-3">
                        <div 
                          className="text-sm text-gray-900 dark:text-white"
                          dangerouslySetInnerHTML={{ __html: formatMessageContent(message.content) }}
                        />
                      </div>
                    </div>
                    
                    <button
                      onClick={() => toggleFavoriteMessage(message.id)}
                      className="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
                    >
                      <X className="w-4 h-4" />
                    </button>
                  </div>
                ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );

  const inviteToChannel = async (channelId: string, email: string) => {
    try {
      // Mock davet işlemi
      const newMember = employees.find(emp => emp.name.toLowerCase().includes(email.toLowerCase()));
      if (newMember) {
        setChannelMembers(prev => ({
          ...prev,
          [channelId]: [...(prev[channelId] || []), newMember]
        }));
        setInviteEmail('');
        setShowInviteModal(false);
        toast.success('Davet gönderildi');
      } else {
        toast.error('Kullanıcı bulunamadı');
      }
    } catch (error) {
      console.error('Davet hatası:', error);
      toast.error('Davet gönderilirken hata oluştu');
    }
  };

  const removeFromChannel = (channelId: string, memberId: string) => {
    setChannelMembers(prev => ({
      ...prev,
      [channelId]: (prev[channelId] || []).filter(member => member.id !== memberId)
    }));
    toast.success('Üye kanaldan çıkarıldı');
  };

  const archiveChannel = (channelId: string) => {
    setChannels(prev => prev.filter(channel => channel.id !== channelId));
    toast.success('Kanal arşivlendi');
  };

  const getChannelStats = (channelId: string) => {
    const stats = channelStats[channelId] || {
      messageCount: Math.floor(Math.random() * 100),
      memberCount: channelMembers[channelId]?.length || 0,
      lastActivity: new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000)
    };
    return stats;
  };

  const renderChannelSettings = () => (
    <div className="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-50">
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl w-full max-w-2xl mx-4">
        <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
            Kanal Ayarları - #{selectedChannel?.name}
          </h2>
          <button
            onClick={() => setShowChannelSettings(false)}
            className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
          >
            <X className="w-5 h-5" />
          </button>
        </div>
        
        <div className="p-6 space-y-6">
          {/* Kanal İstatistikleri */}
          <div>
            <h3 className="text-md font-medium text-gray-900 dark:text-white mb-3">İstatistikler</h3>
            <div className="grid grid-cols-3 gap-4">
              <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-3 text-center">
                <div className="text-2xl font-bold text-primary">
                  {getChannelStats(selectedChannel?.id || '').messageCount}
                </div>
                <div className="text-sm text-gray-600 dark:text-gray-400">Mesaj</div>
              </div>
              <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-3 text-center">
                <div className="text-2xl font-bold text-primary">
                  {getChannelStats(selectedChannel?.id || '').memberCount}
                </div>
                <div className="text-sm text-gray-600 dark:text-gray-400">Üye</div>
              </div>
              <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-3 text-center">
                <div className="text-2xl font-bold text-primary">
                  {format(getChannelStats(selectedChannel?.id || '').lastActivity, 'dd/MM', { locale: tr })}
                </div>
                <div className="text-sm text-gray-600 dark:text-gray-400">Son Aktivite</div>
              </div>
            </div>
          </div>

          {/* Üye Yönetimi */}
          <div>
            <div className="flex items-center justify-between mb-3">
              <h3 className="text-md font-medium text-gray-900 dark:text-white">Üyeler</h3>
              <button
                onClick={() => setShowInviteModal(true)}
                className="px-3 py-1 text-sm bg-primary text-white rounded hover:bg-primary-600"
              >
                Davet Et
              </button>
            </div>
            <div className="space-y-2 max-h-40 overflow-y-auto">
              {(channelMembers[selectedChannel?.id || ''] || []).map((member) => (
                <div key={member.id} className="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-700 rounded-lg">
                  <div className="flex items-center space-x-2">
                    <div className="w-6 h-6 bg-primary text-white rounded-full flex items-center justify-center text-xs font-medium">
                      {member.avatar}
                    </div>
                    <span className="text-sm text-gray-900 dark:text-white">{member.name}</span>
                    <span className="text-xs text-gray-500 dark:text-gray-400">{member.role}</span>
                  </div>
                  <button
                    onClick={() => removeFromChannel(selectedChannel?.id || '', member.id)}
                    className="text-red-500 hover:text-red-700 text-xs"
                  >
                    Çıkar
                  </button>
                </div>
              ))}
            </div>
          </div>

          {/* Kanal Aksiyonları */}
          <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
            <button
              onClick={() => archiveChannel(selectedChannel?.id || '')}
              className="w-full px-4 py-2 text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 border border-red-300 dark:border-red-600 rounded-lg hover:bg-red-50 dark:hover:bg-red-900/20 transition-colors"
            >
              Kanalı Arşivle
            </button>
          </div>
        </div>
      </div>
    </div>
  );

  const renderInviteModal = () => (
    <div className="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-50">
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl w-full max-w-md mx-4">
        <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">Üye Davet Et</h2>
          <button
            onClick={() => setShowInviteModal(false)}
            className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
          >
            <X className="w-5 h-5" />
          </button>
        </div>
        
        <div className="p-6 space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              E-posta Adresi
            </label>
            <input
              type="email"
              value={inviteEmail}
              onChange={(e) => setInviteEmail(e.target.value)}
              placeholder="ornek@firma.com"
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
            />
          </div>
        </div>
        
        <div className="flex items-center justify-end space-x-3 p-6 border-t border-gray-200 dark:border-gray-700">
          <button
            onClick={() => setShowInviteModal(false)}
            className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors"
          >
            İptal
          </button>
          <button
            onClick={() => inviteToChannel(selectedChannel?.id || '', inviteEmail)}
            disabled={!inviteEmail.trim()}
            className="px-4 py-2 bg-primary hover:bg-primary-600 text-white text-sm font-medium rounded-lg disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            Davet Gönder
          </button>
        </div>
      </div>
    </div>
  );

  const blockUser = (userId: string) => {
    setBlockedUsers(prev => [...prev, userId]);
    toast.success('Kullanıcı engellendi');
  };

  const unblockUser = (userId: string) => {
    setBlockedUsers(prev => prev.filter(id => id !== userId));
    toast.success('Kullanıcı engeli kaldırıldı');
  };

  const isUserBlocked = (userId: string) => {
    return blockedUsers.includes(userId);
  };

  const clearMessageHistory = () => {
    setMessages([]);
    toast.success('Mesaj geçmişi temizlendi');
  };

  const renderPrivacySettings = () => (
    <div className="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-50">
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl w-full max-w-md mx-4">
        <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">Gizlilik Ayarları</h2>
          <button
            onClick={() => setShowPrivacySettings(false)}
            className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
          >
            <X className="w-5 h-5" />
          </button>
        </div>
        
        <div className="p-6 space-y-4">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-sm font-medium text-gray-900 dark:text-white">Çevrimiçi Durumu</h3>
              <p className="text-xs text-gray-500 dark:text-gray-400">Diğer kullanıcılar çevrimiçi durumunuzu görebilir</p>
            </div>
            <button
              onClick={() => setPrivacySettings(prev => ({ ...prev, showOnlineStatus: !prev.showOnlineStatus }))}
              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                privacySettings.showOnlineStatus ? 'bg-primary' : 'bg-gray-200 dark:bg-gray-600'
              }`}
            >
              <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                privacySettings.showOnlineStatus ? 'translate-x-6' : 'translate-x-1'
              }`} />
            </button>
          </div>

          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-sm font-medium text-gray-900 dark:text-white">Direkt Mesajlar</h3>
              <p className="text-xs text-gray-500 dark:text-gray-400">Diğer kullanıcılar size direkt mesaj gönderebilir</p>
            </div>
            <button
              onClick={() => setPrivacySettings(prev => ({ ...prev, allowDirectMessages: !prev.allowDirectMessages }))}
              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                privacySettings.allowDirectMessages ? 'bg-primary' : 'bg-gray-200 dark:bg-gray-600'
              }`}
            >
              <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                privacySettings.allowDirectMessages ? 'translate-x-6' : 'translate-x-1'
              }`} />
            </button>
          </div>

          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-sm font-medium text-gray-900 dark:text-white">Mention'lar</h3>
              <p className="text-xs text-gray-500 dark:text-gray-400">Diğer kullanıcılar sizi mention edebilir</p>
            </div>
            <button
              onClick={() => setPrivacySettings(prev => ({ ...prev, allowMentions: !prev.allowMentions }))}
              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                privacySettings.allowMentions ? 'bg-primary' : 'bg-gray-200 dark:bg-gray-600'
              }`}
            >
              <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                privacySettings.allowMentions ? 'translate-x-6' : 'translate-x-1'
              }`} />
            </button>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Mesaj Geçmişi
            </label>
            <select
              value={privacySettings.messageHistory}
              onChange={(e) => setPrivacySettings(prev => ({ ...prev, messageHistory: e.target.value as any }))}
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
            >
              <option value="7days">7 gün</option>
              <option value="30days">30 gün</option>
              <option value="90days">90 gün</option>
              <option value="forever">Süresiz</option>
            </select>
          </div>

          <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
            <button
              onClick={clearMessageHistory}
              className="w-full px-4 py-2 text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 border border-red-300 dark:border-red-600 rounded-lg hover:bg-red-50 dark:hover:bg-red-900/20 transition-colors"
            >
              Mesaj Geçmişini Temizle
            </button>
          </div>
        </div>
      </div>
    </div>
  );

  const renderBlockedUsers = () => (
    <div className="p-4 space-y-3">
      <h3 className="text-sm font-medium text-gray-900 dark:text-white">Engellenen Kullanıcılar</h3>
      {blockedUsers.length === 0 ? (
        <p className="text-xs text-gray-500 dark:text-gray-400">Engellenen kullanıcı yok</p>
      ) : (
        <div className="space-y-2">
          {employees
            .filter(emp => blockedUsers.includes(emp.id))
            .map((user) => (
              <div key={user.id} className="flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-700 rounded-lg">
                <div className="flex items-center space-x-2">
                  <div className="w-6 h-6 bg-primary text-white rounded-full flex items-center justify-center text-xs font-medium">
                    {user.avatar}
                  </div>
                  <span className="text-sm text-gray-900 dark:text-white">{user.name}</span>
                </div>
                <button
                  onClick={() => unblockUser(user.id)}
                  className="text-xs text-primary hover:text-primary-600"
                >
                  Engeli Kaldır
                </button>
              </div>
            ))}
        </div>
      )}
    </div>
  );

  const toggleIntegration = (integration: keyof typeof integrations) => {
    setIntegrations(prev => ({ ...prev, [integration]: !prev[integration] }));
    toast.success(`${integration === 'calendar' ? 'Takvim' : integration === 'tasks' ? 'Görevler' : 'Dosya Depolama'} entegrasyonu ${integrations[integration] ? 'devre dışı' : 'etkin'} bırakıldı`);
  };



  const shareFileSimple = (file: File) => {
    toast.success(`${file.name} dosyası paylaşıldı`);
    // Dosya paylaşım entegrasyonu burada olacak
  };

  const createTask = (title: string, assignee: string) => {
    toast.success(`${assignee} için "${title}" görevi oluşturuldu`);
    // Görev yönetimi entegrasyonu burada olacak
  };

  // İş Akışı Entegrasyonları Fonksiyonları
  const openWorkflowModal = (type: 'task' | 'meeting' | 'approval' | 'project') => {
    setWorkflowType(type);
    setWorkflowData({
      title: '',
      description: '',
      assignee: '',
      dueDate: '',
      priority: 'medium',
      meetingTime: '',
      participants: [],
      approvalType: 'simple',
      projectName: '',
      projectStatus: 'planning'
    });
    setShowWorkflowModal(true);
  };

  const createWorkflowItem = () => {
    if (!workflowData.title.trim()) {
      toast.error('Başlık gereklidir');
      return;
    }

    try {
      switch (workflowType) {
        case 'task':
          if (!workflowData.assignee) {
            toast.error('Görev atanacak kişi seçilmelidir');
            return;
          }
          createTask(workflowData.title, workflowData.assignee);
          break;
          
        case 'meeting':
          if (!workflowData.meetingTime) {
            toast.error('Toplantı saati seçilmelidir');
            return;
          }
          const meeting = {
            id: `meeting_${Date.now()}`,
            title: workflowData.title,
            time: new Date(workflowData.meetingTime),
            participants: workflowData.participants,
            description: workflowData.description
          };
          setMeetingReminders(prev => [...prev, meeting]);
          toast.success('Toplantı planlandı');
          break;
          
        case 'approval':
          const approval = {
            id: `approval_${Date.now()}`,
            title: workflowData.title,
            type: workflowData.approvalType,
            status: 'pending',
            createdBy: currentUserId,
            createdAt: new Date()
          };
          toast.success('Onay isteği oluşturuldu');
          break;
          
        case 'project':
          if (!workflowData.projectName) {
            toast.error('Proje adı gereklidir');
            return;
          }
          const project = {
            id: `project_${Date.now()}`,
            name: workflowData.projectName,
            status: workflowData.projectStatus,
            description: workflowData.description,
            createdBy: currentUserId,
            createdAt: new Date()
          };
          toast.success('Proje oluşturuldu');
          break;
      }
      
      setShowWorkflowModal(false);
      setWorkflowData({
        title: '',
        description: '',
        assignee: '',
        dueDate: '',
        priority: 'medium',
        meetingTime: '',
        participants: [],
        approvalType: 'simple',
        projectName: '',
        projectStatus: 'planning'
      });
    } catch (error) {
      console.error('İş akışı oluşturma hatası:', error);
      toast.error('İş akışı oluşturulurken hata oluştu');
    }
  };

  // Otomatik Görev Çıkarma Fonksiyonları
  const extractTaskFromMessage = (message: ChatMessage): void => {
    if (!autoTaskExtraction.enabled) return;
    
    const content = message.content.toLowerCase();
    const hasTaskKeyword = autoTaskExtraction.keywords.some(keyword => 
      content.includes(keyword.toLowerCase())
    );
    
    if (!hasTaskKeyword) return;
    
    // Görev başlığını çıkar
    const taskTitle = extractTaskTitle(message.content);
    if (!taskTitle) return;
    
    // Görev atanacak kişiyi belirle
    const assignee = autoTaskExtraction.autoAssign 
      ? autoTaskExtraction.defaultAssignee || message.senderId
      : message.senderId;
    
    // Önceliği belirle
    const priority = determineTaskPriority(message.content);
    
    // Son tarihi çıkar
    const dueDate = extractDueDate(message.content);
    
    const extractedTask = {
      id: `extracted_${Date.now()}_${Math.random()}`,
      title: taskTitle,
      description: message.content,
      assignee: assignee,
      priority: priority,
      dueDate: dueDate,
      sourceMessage: message.content,
      sourceChannel: message.channelId,
      sourceUser: message.senderId,
      status: 'pending' as const,
      createdAt: new Date()
    };
    
    setExtractedTasks(prev => [...prev, extractedTask]);
    
    if (autoTaskExtraction.notificationEnabled) {
      toast.success(`"${taskTitle}" görevi otomatik olarak oluşturuldu`);
    }
  };

  const extractTaskTitle = (content: string): string | null => {
    // Basit görev başlığı çıkarma algoritması
    const lines = content.split('\n');
    for (const line of lines) {
      const trimmedLine = line.trim();
      if (trimmedLine.length > 3 && trimmedLine.length < 100) {
        // Görev anahtar kelimelerini içeren satırı bul
        const hasKeyword = autoTaskExtraction.keywords.some(keyword => 
          trimmedLine.toLowerCase().includes(keyword.toLowerCase())
        );
        if (hasKeyword) {
          return trimmedLine.replace(/^[-*•]\s*/, '').trim();
        }
      }
    }
    
    // Eğer özel satır bulunamazsa, ilk cümleyi al
    const firstSentence = content.split(/[.!?]/)[0].trim();
    return firstSentence.length > 3 ? firstSentence : null;
  };

  const determineTaskPriority = (content: string): 'low' | 'medium' | 'high' | 'urgent' => {
    const contentLower = content.toLowerCase();
    
    if (contentLower.includes('acil') || contentLower.includes('urgent') || contentLower.includes('kritik')) {
      return 'urgent';
    }
    if (contentLower.includes('önemli') || contentLower.includes('important') || contentLower.includes('yüksek')) {
      return 'high';
    }
    if (contentLower.includes('düşük') || contentLower.includes('low') || contentLower.includes('az öncelik')) {
      return 'low';
    }
    
    return autoTaskExtraction.defaultPriority;
  };

  const extractDueDate = (content: string): Date | undefined => {
    const contentLower = content.toLowerCase();
    
    // Bugün
    if (contentLower.includes('bugün') || contentLower.includes('today')) {
      return new Date();
    }
    
    // Yarın
    if (contentLower.includes('yarın') || contentLower.includes('tomorrow')) {
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      return tomorrow;
    }
    
    // Bu hafta
    if (contentLower.includes('bu hafta') || contentLower.includes('this week')) {
      const endOfWeek = new Date();
      endOfWeek.setDate(endOfWeek.getDate() + (7 - endOfWeek.getDay()));
      return endOfWeek;
    }
    
    // Bu ay
    if (contentLower.includes('bu ay') || contentLower.includes('this month')) {
      const endOfMonth = new Date();
      endOfMonth.setMonth(endOfMonth.getMonth() + 1, 0);
      return endOfMonth;
    }
    
    // Tarih formatı: DD/MM/YYYY veya YYYY-MM-DD
    const dateRegex = /(\d{1,2}[\/\-]\d{1,2}[\/\-]\d{4})|(\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2})/;
    const dateMatch = content.match(dateRegex);
    if (dateMatch) {
      return new Date(dateMatch[0]);
    }
    
    return undefined;
  };

  const updateTaskStatus = (taskId: string, status: 'pending' | 'in-progress' | 'completed' | 'cancelled') => {
    setExtractedTasks(prev => prev.map(task => {
      if (task.id === taskId) {
        return {
          ...task,
          status: status,
          completedAt: status === 'completed' ? new Date() : undefined
        };
      }
      return task;
    }));
    
    toast.success('Görev durumu güncellendi');
  };

  // Gelişmiş Proje Yönetimi Fonksiyonları
  const createProjectTemplate = (template: {
    name: string;
    description: string;
    phases: Array<{
      name: string;
      duration: number;
      tasks: Array<{
        title: string;
        description: string;
        assignee?: string;
        priority: 'low' | 'medium' | 'high' | 'urgent';
      }>;
    }>;
  }) => {
    const newTemplate = {
      id: `template_${Date.now()}`,
      ...template,
      createdAt: new Date(),
      createdBy: currentUserId
    };
    
    setProjectTemplates(prev => [...prev, newTemplate]);
    toast.success(`"${template.name}" proje şablonu oluşturuldu`);
  };

  const createProjectFromTemplate = (templateId: string, projectName: string) => {
    const template = projectTemplates.find(t => t.id === templateId);
    if (!template) {
      toast.error('Şablon bulunamadı');
      return;
    }
    
    const projectId = `project_${Date.now()}`;
    const startDate = new Date();
    
    // Proje ilerlemesini başlat
    const progress = {
      overallProgress: 0,
      phaseProgress: {},
      taskProgress: {},
      timeSpent: 0,
      budgetUsed: 0,
      teamMembers: [],
      milestones: template.phases.map((phase, index) => ({
        id: `milestone_${index}`,
        name: phase.name,
        description: `${phase.name} aşaması tamamlandı`,
        dueDate: new Date(startDate.getTime() + phase.duration * 24 * 60 * 60 * 1000),
        completed: false
      })),
      risks: []
    };
    
    setProjectProgress(prev => ({
      ...prev,
      [projectId]: progress
    }));
    
    // Proje analitiklerini başlat
    const analytics = {
      totalTasks: template.phases.reduce((sum, phase) => sum + phase.tasks.length, 0),
      completedTasks: 0,
      overdueTasks: 0,
      averageTaskDuration: 0,
      teamProductivity: 0,
      budgetUtilization: 0,
      riskLevel: 'low' as const,
      completionTrend: []
    };
    
    setProjectAnalytics(prev => ({
      ...prev,
      [projectId]: analytics
    }));
    
    toast.success(`"${projectName}" projesi şablondan oluşturuldu`);
  };

  const updateProjectProgress = (projectId: string, updates: {
    phaseProgress?: { [phaseName: string]: number };
    taskProgress?: { [taskId: string]: number };
    timeSpent?: number;
    budgetUsed?: number;
  }) => {
    setProjectProgress(prev => {
      const current = prev[projectId];
      if (!current) return prev;
      
      const updated = { ...current, ...updates };
      
      // Genel ilerlemeyi hesapla
      const totalPhases = Object.keys(updated.phaseProgress).length;
      const completedPhases = Object.values(updated.phaseProgress).filter(p => p === 100).length;
      updated.overallProgress = totalPhases > 0 ? (completedPhases / totalPhases) * 100 : 0;
      
      return {
        ...prev,
        [projectId]: updated
      };
    });
  };

  const addProjectRisk = (projectId: string, risk: {
    title: string;
    description: string;
    severity: 'low' | 'medium' | 'high' | 'critical';
    assignedTo?: string;
  }) => {
    setProjectProgress(prev => {
      const current = prev[projectId];
      if (!current) return prev;
      
      const newRisk = {
        id: `risk_${Date.now()}`,
        ...risk,
        status: 'open' as const
      };
      
      return {
        ...prev,
        [projectId]: {
          ...current,
          risks: [...current.risks, newRisk]
        }
      };
    });
    
    toast.success('Proje riski eklendi');
  };

  const updateProjectAnalytics = (projectId: string) => {
    const progress = projectProgress[projectId];
    if (!progress) return;
    
    const analytics = projectAnalytics[projectId];
    if (!analytics) return;
    
    // Tamamlanan görev sayısını hesapla
    const completedTasks = Object.values(progress.taskProgress).filter(p => p === 100).length;
    
    // Risk seviyesini hesapla
    const openRisks = progress.risks.filter(r => r.status === 'open');
    const criticalRisks = openRisks.filter(r => r.severity === 'critical').length;
    const highRisks = openRisks.filter(r => r.severity === 'high').length;
    
    let riskLevel: 'low' | 'medium' | 'high' = 'low';
    if (criticalRisks > 0 || highRisks > 2) {
      riskLevel = 'high';
    } else if (highRisks > 0 || openRisks.length > 3) {
      riskLevel = 'medium';
    }
    
    const updatedAnalytics = {
      ...analytics,
      completedTasks,
      riskLevel,
      completionTrend: [
        ...analytics.completionTrend,
        {
          date: new Date().toISOString().split('T')[0],
          completed: completedTasks,
          total: analytics.totalTasks
        }
      ]
    };
    
    setProjectAnalytics(prev => ({
      ...prev,
      [projectId]: updatedAnalytics
    }));
  };

  // Sesli Mesajlar Fonksiyonları
  const startVoiceRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const recorder = new MediaRecorder(stream);
      const chunks: Blob[] = [];
      
      recorder.ondataavailable = (event) => {
        if (event.data.size > 0) {
          chunks.push(event.data);
        }
      };
      
      recorder.onstop = () => {
        const audioBlob = new Blob(chunks, { type: 'audio/wav' });
        const audioUrl = URL.createObjectURL(audioBlob);
        
        const voiceMessage = {
          id: `voice_${Date.now()}`,
          senderId: currentUserId,
          senderName: currentUserName,
          channelId: selectedChannel?.id || '',
          audioUrl: audioUrl,
          duration: recordingDuration,
          timestamp: new Date(),
          isPlaying: false,
          playbackRate: 1
        };
        
        setVoiceMessages(prev => [...prev, voiceMessage]);
        setAudioChunks([]);
        setIsRecordingVoice(false);
        setRecordingDuration(0);
        setRecordingStartTime(null);
        
        toast.success('Sesli mesaj kaydedildi');
      };
      
      recorder.start();
      setMediaRecorder(recorder);
      setIsRecordingVoice(true);
      setRecordingStartTime(new Date());
      setAudioChunks([]);
      
      // Kayıt süresini takip et
      const interval = setInterval(() => {
        setRecordingDuration(prev => prev + 1);
      }, 1000);
      
      // 5 dakika sonra otomatik durdur
      setTimeout(() => {
        if (isRecordingVoice) {
          stopVoiceRecording();
        }
        clearInterval(interval);
      }, 300000);
      
    } catch (error) {
      console.error('Mikrofon erişim hatası:', error);
      toast.error('Mikrofon erişimi sağlanamadı');
    }
  };

  const stopVoiceRecording = () => {
    if (mediaRecorder && isRecordingVoice) {
      mediaRecorder.stop();
      mediaRecorder.stream.getTracks().forEach(track => track.stop());
    }
  };

  const playVoiceMessage = (voiceMessageId: string) => {
    setVoiceMessages(prev => prev.map(msg => ({
      ...msg,
      isPlaying: msg.id === voiceMessageId ? !msg.isPlaying : false
    })));
  };

  const setPlaybackRate = (voiceMessageId: string, rate: number) => {
    setVoiceMessages(prev => prev.map(msg => 
      msg.id === voiceMessageId ? { ...msg, playbackRate: rate } : msg
    ));
  };

  const transcribeVoiceMessage = async (voiceMessageId: string) => {
    const voiceMessage = voiceMessages.find(msg => msg.id === voiceMessageId);
    if (!voiceMessage) return;
    
    try {
      // Mock transkripsiyon - gerçek uygulamada API kullanılır
      const mockTranscription = "Bu bir örnek transkripsiyon metnidir.";
      
      setVoiceMessages(prev => prev.map(msg => 
        msg.id === voiceMessageId 
          ? { ...msg, transcription: mockTranscription }
          : msg
      ));
      
      toast.success('Sesli mesaj transkripsiyonu tamamlandı');
    } catch (error) {
      console.error('Transkripsiyon hatası:', error);
      toast.error('Transkripsiyon sırasında hata oluştu');
    }
  };

  // Bulk İşlemler Fonksiyonları
  const toggleMessageSelection = (messageId: string) => {
    setSelectedMessages(prev => 
      prev.includes(messageId) 
        ? prev.filter(id => id !== messageId)
        : [...prev, messageId]
    );
  };

  const selectAllMessages = () => {
    const allMessageIds = messages.map(msg => msg.id);
    setSelectedMessages(allMessageIds);
  };

  const clearMessageSelection = () => {
    setSelectedMessages([]);
  };

  const bulkDeleteMessages = () => {
    if (selectedMessages.length === 0) {
      toast.error('Silinecek mesaj seçilmedi');
      return;
    }
    
    setMessages(prev => prev.filter(msg => !selectedMessages.includes(msg.id)));
    setSelectedMessages([]);
    setIsBulkMode(false);
    toast.success(`${selectedMessages.length} mesaj silindi`);
  };

  const bulkArchiveMessages = () => {
    if (selectedMessages.length === 0) {
      toast.error('Arşivlenecek mesaj seçilmedi');
      return;
    }
    
    // Arşivleme işlemi burada yapılacak
    setSelectedMessages([]);
    setIsBulkMode(false);
    toast.success(`${selectedMessages.length} mesaj arşivlendi`);
  };

  const bulkCreateTasks = () => {
    if (selectedMessages.length === 0) {
      toast.error('Görev oluşturulacak mesaj seçilmedi');
      return;
    }
    
    const selectedMsgs = messages.filter(msg => selectedMessages.includes(msg.id));
    selectedMsgs.forEach(msg => {
      extractTaskFromMessage(msg);
    });
    
    setSelectedMessages([]);
    setIsBulkMode(false);
    toast.success(`${selectedMessages.length} mesajdan görev oluşturuldu`);
  };

  // Gelişmiş İş Akışı Fonksiyonları
  const autoCategorizeMessage = (message: ChatMessage): string => {
    if (!autoCategorization.enabled) return 'genel';
    
    const content = message.content.toLowerCase();
    
    for (const [category, keywords] of Object.entries(autoCategorization.keywords)) {
      if (keywords.some(keyword => content.includes(keyword))) {
        return category;
      }
    }
    
    return 'genel';
  };

  const applyWorkflowRules = (message: ChatMessage) => {
    const sortedRules = workflowRules
      .filter(rule => rule.enabled)
      .sort((a, b) => b.priority - a.priority);
    
    for (const rule of sortedRules) {
      const content = message.content.toLowerCase();
      
      if (rule.condition.includes('contains')) {
        const keywords = rule.condition.match(/"([^"]+)"/g)?.map(k => k.replace(/"/g, '')) || [];
        if (keywords.some(keyword => content.includes(keyword))) {
          executeWorkflowAction(rule.action, message);
        }
      }
    }
  };

  const executeWorkflowAction = (action: string, message: ChatMessage) => {
    switch (action) {
      case 'forward to manager':
        toast.success('Mesaj yöneticiye yönlendirildi');
        break;
      case 'categorize as project':
        setMessageCategories(prev => ({
          ...prev,
          [message.id]: 'proje'
        }));
        break;
      default:
        console.log('Bilinmeyen iş akışı aksiyonu:', action);
    }
  };

  const checkAutoResponse = (message: ChatMessage): string | null => {
    const content = message.content.toLowerCase();
    
    for (const autoResponse of autoResponses) {
      if (autoResponse.enabled && content.includes(autoResponse.trigger)) {
        return autoResponse.response;
      }
    }
    
    return null;
  };

  // Gelişmiş Arama Fonksiyonları
  const performSemanticSearch = async (query: string) => {
    const startTime = Date.now();
    
    // Mock semantic search - gerçek uygulamada AI API kullanılır
    const semanticResults = messages.filter(msg => {
      const content = msg.content.toLowerCase();
      const queryLower = query.toLowerCase();
      
      // Basit semantic matching
      const queryWords = queryLower.split(' ');
      const contentWords = content.split(' ');
      
      const matchScore = queryWords.filter(word => 
        contentWords.some(contentWord => 
          contentWord.includes(word) || word.includes(contentWord)
        )
      ).length / queryWords.length;
      
      return matchScore > 0.3;
    });
    
    const searchTime = Date.now() - startTime;
    
    setAdvancedSearchResults({
      messages: semanticResults,
      voiceMessages: voiceMessages.filter(msg => 
        msg.transcription?.toLowerCase().includes(query.toLowerCase())
      ),
      files: getFilteredFiles().filter(file => 
        file.name.toLowerCase().includes(query.toLowerCase())
      ),
      totalResults: semanticResults.length,
      searchTime,
      relevance: 0.85
    });
    
    // Arama geçmişine ekle
    setSemanticSearch(prev => ({
      ...prev,
      searchHistory: [query, ...prev.searchHistory.slice(0, 9)]
    }));
  };

  const getSearchSuggestions = (query: string) => {
    if (query.length < 2) return [];
    
    const suggestions = [
      ...semanticSearch.searchHistory.filter(hist => hist.includes(query)),
      ...autoCategorization.categories.filter(cat => cat.includes(query)),
      ...autoCategorization.keywords.genel.filter(keyword => keyword.includes(query))
    ];
    
    return [...new Set(suggestions)].slice(0, 5);
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'low': return 'text-green-600 bg-green-100 dark:text-green-400 dark:bg-green-900/20';
      case 'medium': return 'text-yellow-600 bg-yellow-100 dark:text-yellow-400 dark:bg-yellow-900/20';
      case 'high': return 'text-orange-600 bg-orange-100 dark:text-orange-400 dark:bg-orange-900/20';
      case 'urgent': return 'text-red-600 bg-red-100 dark:text-red-400 dark:bg-red-900/20';
      default: return 'text-gray-600 bg-gray-100 dark:text-gray-400 dark:bg-gray-900/20';
    }
  };

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case 'low': return '🟢';
      case 'medium': return '🟡';
      case 'high': return '🟠';
      case 'urgent': return '🔴';
      default: return '⚪';
    }
  };

  const renderWorkflowModal = () => {
    if (!showWorkflowModal) return null;

    const getWorkflowTitle = () => {
      switch (workflowType) {
        case 'task': return 'Görev Oluştur';
        case 'meeting': return 'Toplantı Planla';
        case 'approval': return 'Onay İsteği Oluştur';
        case 'project': return 'Proje Oluştur';
        default: return 'İş Akışı';
      }
    };

    const getWorkflowIcon = () => {
      switch (workflowType) {
        case 'task': return '📋';
        case 'meeting': return '📅';
        case 'approval': return '✅';
        case 'project': return '📊';
        default: return '⚙️';
      }
    };

    return (
      <div className="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-50">
        <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl w-full max-w-2xl mx-4 max-h-[90vh] overflow-hidden">
          <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
            <div className="flex items-center space-x-3">
              <span className="text-2xl">{getWorkflowIcon()}</span>
              <h2 className="text-lg font-semibold text-gray-900 dark:text-white">{getWorkflowTitle()}</h2>
            </div>
            <button
              onClick={() => setShowWorkflowModal(false)}
              className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
          
          <div className="p-6 overflow-y-auto max-h-[70vh] space-y-6">
            {/* İş Akışı Türü Seçimi */}
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3">
                İş Akışı Türü
              </label>
              <div className="grid grid-cols-2 gap-3">
                <button
                  onClick={() => setWorkflowType('task')}
                  className={`p-3 rounded-lg border-2 transition-colors ${
                    workflowType === 'task'
                      ? 'border-primary bg-primary/10 text-primary'
                      : 'border-gray-200 dark:border-gray-600 hover:border-gray-300 dark:hover:border-gray-500'
                  }`}
                >
                  <div className="flex items-center space-x-2">
                    <span className="text-xl">📋</span>
                    <div className="text-left">
                      <div className="font-medium">Görev</div>
                      <div className="text-xs text-gray-500 dark:text-gray-400">Yeni görev oluştur</div>
                    </div>
                  </div>
                </button>
                
                <button
                  onClick={() => setWorkflowType('meeting')}
                  className={`p-3 rounded-lg border-2 transition-colors ${
                    workflowType === 'meeting'
                      ? 'border-primary bg-primary/10 text-primary'
                      : 'border-gray-200 dark:border-gray-600 hover:border-gray-300 dark:hover:border-gray-500'
                  }`}
                >
                  <div className="flex items-center space-x-2">
                    <span className="text-xl">📅</span>
                    <div className="text-left">
                      <div className="font-medium">Toplantı</div>
                      <div className="text-xs text-gray-500 dark:text-gray-400">Toplantı planla</div>
                    </div>
                  </div>
                </button>
                
                <button
                  onClick={() => setWorkflowType('approval')}
                  className={`p-3 rounded-lg border-2 transition-colors ${
                    workflowType === 'approval'
                      ? 'border-primary bg-primary/10 text-primary'
                      : 'border-gray-200 dark:border-gray-600 hover:border-gray-300 dark:hover:border-gray-500'
                  }`}
                >
                  <div className="flex items-center space-x-2">
                    <span className="text-xl">✅</span>
                    <div className="text-left">
                      <div className="font-medium">Onay</div>
                      <div className="text-xs text-gray-500 dark:text-gray-400">Onay isteği oluştur</div>
                    </div>
                  </div>
                </button>
                
                <button
                  onClick={() => setWorkflowType('project')}
                  className={`p-3 rounded-lg border-2 transition-colors ${
                    workflowType === 'project'
                      ? 'border-primary bg-primary/10 text-primary'
                      : 'border-gray-200 dark:border-gray-600 hover:border-gray-300 dark:hover:border-gray-500'
                  }`}
                >
                  <div className="flex items-center space-x-2">
                    <span className="text-xl">📊</span>
                    <div className="text-left">
                      <div className="font-medium">Proje</div>
                      <div className="text-xs text-gray-500 dark:text-gray-400">Yeni proje oluştur</div>
                    </div>
                  </div>
                </button>
              </div>
            </div>

            {/* Başlık */}
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Başlık *
              </label>
              <input
                type="text"
                value={workflowData.title}
                onChange={(e) => setWorkflowData(prev => ({ ...prev, title: e.target.value }))}
                placeholder={`${workflowType === 'task' ? 'Görev' : workflowType === 'meeting' ? 'Toplantı' : workflowType === 'approval' ? 'Onay' : 'Proje'} başlığı...`}
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
              />
            </div>

            {/* Açıklama */}
            <div>
              <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                Açıklama
              </label>
              <textarea
                value={workflowData.description}
                onChange={(e) => setWorkflowData(prev => ({ ...prev, description: e.target.value }))}
                placeholder="Detayları buraya yazın..."
                rows={3}
                className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent resize-none"
              />
            </div>

            {/* Görev Özel Alanları */}
            {workflowType === 'task' && (
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Atanacak Kişi *
                  </label>
                  <select
                    value={workflowData.assignee}
                    onChange={(e) => setWorkflowData(prev => ({ ...prev, assignee: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                  >
                    <option value="">Kişi seçin...</option>
                    {employees.map(emp => (
                      <option key={emp.id} value={emp.id}>{emp.name} - {emp.role}</option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Bitiş Tarihi
                  </label>
                  <input
                    type="datetime-local"
                    value={workflowData.dueDate}
                    onChange={(e) => setWorkflowData(prev => ({ ...prev, dueDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Öncelik
                  </label>
                  <div className="grid grid-cols-4 gap-2">
                    {['low', 'medium', 'high', 'urgent'].map(priority => (
                      <button
                        key={priority}
                        onClick={() => setWorkflowData(prev => ({ ...prev, priority: priority as any }))}
                        className={`p-2 rounded-lg border-2 transition-colors ${
                          workflowData.priority === priority
                            ? 'border-primary bg-primary/10 text-primary'
                            : 'border-gray-200 dark:border-gray-600 hover:border-gray-300 dark:hover:border-gray-500'
                        }`}
                      >
                        <div className="text-center">
                          <div className="text-lg">{getPriorityIcon(priority)}</div>
                          <div className="text-xs capitalize">{priority}</div>
                        </div>
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {/* Toplantı Özel Alanları */}
            {workflowType === 'meeting' && (
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Toplantı Saati *
                  </label>
                  <input
                    type="datetime-local"
                    value={workflowData.meetingTime}
                    onChange={(e) => setWorkflowData(prev => ({ ...prev, meetingTime: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Katılımcılar
                  </label>
                  <div className="space-y-2 max-h-32 overflow-y-auto">
                    {employees.map(emp => (
                      <label key={emp.id} className="flex items-center space-x-2">
                        <input
                          type="checkbox"
                          checked={workflowData.participants.includes(emp.id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setWorkflowData(prev => ({ 
                                ...prev, 
                                participants: [...prev.participants, emp.id] 
                              }));
                            } else {
                              setWorkflowData(prev => ({ 
                                ...prev, 
                                participants: prev.participants.filter(id => id !== emp.id) 
                              }));
                            }
                          }}
                          className="rounded border-gray-300 text-primary focus:ring-primary"
                        />
                        <span className="text-sm text-gray-700 dark:text-gray-300">{emp.name} - {emp.role}</span>
                      </label>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {/* Onay Özel Alanları */}
            {workflowType === 'approval' && (
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Onay Türü
                </label>
                <div className="grid grid-cols-2 gap-3">
                  <button
                    onClick={() => setWorkflowData(prev => ({ ...prev, approvalType: 'simple' }))}
                    className={`p-3 rounded-lg border-2 transition-colors ${
                      workflowData.approvalType === 'simple'
                        ? 'border-primary bg-primary/10 text-primary'
                        : 'border-gray-200 dark:border-gray-600 hover:border-gray-300 dark:hover:border-gray-500'
                    }`}
                  >
                    <div className="text-center">
                      <div className="text-lg">✅</div>
                      <div className="font-medium">Basit Onay</div>
                      <div className="text-xs text-gray-500 dark:text-gray-400">Tek adımda onay</div>
                    </div>
                  </button>
                  
                  <button
                    onClick={() => setWorkflowData(prev => ({ ...prev, approvalType: 'multi-step' }))}
                    className={`p-3 rounded-lg border-2 transition-colors ${
                      workflowData.approvalType === 'multi-step'
                        ? 'border-primary bg-primary/10 text-primary'
                        : 'border-gray-200 dark:border-gray-600 hover:border-gray-300 dark:hover:border-gray-500'
                    }`}
                  >
                    <div className="text-center">
                      <div className="text-lg">🔄</div>
                      <div className="font-medium">Çok Adımlı</div>
                      <div className="text-xs text-gray-500 dark:text-gray-400">Sıralı onay süreci</div>
                    </div>
                  </button>
                </div>
              </div>
            )}

            {/* Proje Özel Alanları */}
            {workflowType === 'project' && (
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Proje Adı *
                  </label>
                  <input
                    type="text"
                    value={workflowData.projectName}
                    onChange={(e) => setWorkflowData(prev => ({ ...prev, projectName: e.target.value }))}
                    placeholder="Proje adını girin..."
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Proje Durumu
                  </label>
                  <div className="grid grid-cols-2 gap-3">
                    {[
                      { value: 'planning', label: 'Planlama', icon: '📋' },
                      { value: 'active', label: 'Aktif', icon: '🚀' },
                      { value: 'on-hold', label: 'Beklemede', icon: '⏸️' },
                      { value: 'completed', label: 'Tamamlandı', icon: '✅' }
                    ].map(status => (
                      <button
                        key={status.value}
                        onClick={() => setWorkflowData(prev => ({ ...prev, projectStatus: status.value as any }))}
                        className={`p-3 rounded-lg border-2 transition-colors ${
                          workflowData.projectStatus === status.value
                            ? 'border-primary bg-primary/10 text-primary'
                            : 'border-gray-200 dark:border-gray-600 hover:border-gray-300 dark:hover:border-gray-500'
                        }`}
                      >
                        <div className="text-center">
                          <div className="text-lg">{status.icon}</div>
                          <div className="font-medium">{status.label}</div>
                        </div>
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            )}
          </div>
          
          <div className="flex items-center justify-end space-x-3 p-6 border-t border-gray-200 dark:border-gray-700">
            <button
              onClick={() => setShowWorkflowModal(false)}
              className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors"
            >
              İptal
            </button>
            <button
              onClick={createWorkflowItem}
              disabled={!workflowData.title.trim()}
              className="px-4 py-2 bg-primary hover:bg-primary-600 text-white text-sm font-medium rounded-lg disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              {workflowType === 'task' ? 'Görev Oluştur' : 
               workflowType === 'meeting' ? 'Toplantı Planla' : 
               workflowType === 'approval' ? 'Onay İsteği Oluştur' : 
               'Proje Oluştur'}
            </button>
          </div>
        </div>
      </div>
    );
  };

  const renderIntegrationsPanel = () => (
    <div className="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-50">
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl w-full max-w-2xl mx-4">
        <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">Entegrasyonlar</h2>
          <button
            onClick={() => setShowIntegrations(false)}
            className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
          >
            <X className="w-5 h-5" />
          </button>
        </div>
        
        <div className="p-6 space-y-6">
          {/* Takvim Entegrasyonu */}
          <div className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
            <div className="flex items-center space-x-3">
              <Calendar className="w-8 h-8 text-blue-500" />
              <div>
                <h3 className="text-sm font-medium text-gray-900 dark:text-white">Takvim Entegrasyonu</h3>
                <p className="text-xs text-gray-500 dark:text-gray-400">Toplantı hatırlatmaları ve takvim senkronizasyonu</p>
              </div>
            </div>
            <button
              onClick={() => toggleIntegration('calendar')}
              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                integrations.calendar ? 'bg-primary' : 'bg-gray-200 dark:bg-gray-600'
              }`}
            >
              <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                integrations.calendar ? 'translate-x-6' : 'translate-x-1'
              }`} />
            </button>
          </div>

          {/* Görev Yönetimi */}
          <div className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
            <div className="flex items-center space-x-3">
              <Target className="w-8 h-8 text-green-500" />
              <div>
                <h3 className="text-sm font-medium text-gray-900 dark:text-white">Görev Yönetimi</h3>
                <p className="text-xs text-gray-500 dark:text-gray-400">Görev oluşturma ve takip</p>
              </div>
            </div>
            <button
              onClick={() => toggleIntegration('tasks')}
              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                integrations.tasks ? 'bg-primary' : 'bg-gray-200 dark:bg-gray-600'
              }`}
            >
              <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                integrations.tasks ? 'translate-x-6' : 'translate-x-1'
              }`} />
            </button>
          </div>

          {/* Dosya Depolama */}
          <div className="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
            <div className="flex items-center space-x-3">
              <File className="w-8 h-8 text-purple-500" />
              <div>
                <h3 className="text-sm font-medium text-gray-900 dark:text-white">Dosya Depolama</h3>
                <p className="text-xs text-gray-500 dark:text-gray-400">Google Drive, OneDrive entegrasyonu</p>
              </div>
            </div>
            <button
              onClick={() => toggleIntegration('drive')}
              className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                integrations.drive ? 'bg-primary' : 'bg-gray-200 dark:bg-gray-600'
              }`}
            >
              <span className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                integrations.drive ? 'translate-x-6' : 'translate-x-1'
              }`} />
            </button>
          </div>



          {/* Toplantı Hatırlatmaları */}
          {integrations.calendar && meetingReminders.length > 0 && (
            <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
              <h3 className="text-sm font-medium text-gray-900 dark:text-white mb-3">Yaklaşan Toplantılar</h3>
              <div className="space-y-2">
                {meetingReminders.map((meeting) => (
                  <div key={meeting.id} className="flex items-center justify-between p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
                    <div>
                      <h4 className="text-sm font-medium text-gray-900 dark:text-white">{meeting.title}</h4>
                      <p className="text-xs text-gray-500 dark:text-gray-400">
                        {format(meeting.time, 'dd.MM.yyyy HH:mm', { locale: tr })} • {meeting.participants.length} katılımcı
                      </p>
                    </div>
                    <button
                      onClick={() => toast.success('Toplantıya katılım başlatılıyor...')}
                      className="px-3 py-1 text-xs bg-primary text-white rounded hover:bg-primary-600"
                    >
                      Katıl
                    </button>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );

  const generateAnalytics = () => {
    // Mock analitik verileri
    const mockData = {
      totalMessages: messages.length,
      activeUsers: onlineEmployees.length,
      popularChannels: [
        { name: 'genel', messageCount: 45 },
        { name: 'ik', messageCount: 23 },
        { name: 'teknoloji', messageCount: 18 },
        { name: 'satış', messageCount: 12 }
      ],
      messageTrends: [
        { date: 'Pazartesi', count: 15 },
        { date: 'Salı', count: 22 },
        { date: 'Çarşamba', count: 18 },
        { date: 'Perşembe', count: 25 },
        { date: 'Cuma', count: 20 }
      ],
      topUsers: [
        { name: 'Ahmet Yılmaz', messageCount: 34 },
        { name: 'Fatma Demir', messageCount: 28 },
        { name: 'Mehmet Kaya', messageCount: 22 },
        { name: 'Ayşe Özkan', messageCount: 19 }
      ]
    };
    setAnalyticsData(mockData);
  };

  const exportReport = (type: 'pdf' | 'excel' | 'csv') => {
    toast.success(`${type.toUpperCase()} raporu indiriliyor...`);
    // Rapor indirme işlemi burada olacak
  };

  const renderAnalyticsPanel = () => (
    <div className="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-50">
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl w-full max-w-6xl max-h-[90vh] mx-4 flex flex-col">
        <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">Analitik ve Raporlar</h2>
          <div className="flex items-center space-x-2">
            <button
              onClick={() => generateAnalytics()}
              className="px-3 py-1 text-sm bg-primary text-white rounded hover:bg-primary-600"
            >
              Yenile
            </button>
            <button
              onClick={() => setShowAnalytics(false)}
              className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
        </div>
        
        <div className="flex-1 overflow-y-auto p-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Genel İstatistikler */}
            <div className="space-y-4">
              <h3 className="text-md font-medium text-gray-900 dark:text-white">Genel İstatistikler</h3>
              <div className="grid grid-cols-2 gap-4">
                <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4 text-center">
                  <div className="text-2xl font-bold text-primary">{analyticsData.totalMessages}</div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">Toplam Mesaj</div>
                </div>
                <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4 text-center">
                  <div className="text-2xl font-bold text-primary">{analyticsData.activeUsers}</div>
                  <div className="text-sm text-gray-600 dark:text-gray-400">Aktif Kullanıcı</div>
                </div>
              </div>
            </div>

            {/* Popüler Kanallar */}
            <div className="space-y-4">
              <h3 className="text-md font-medium text-gray-900 dark:text-white">Popüler Kanallar</h3>
              <div className="space-y-2">
                {analyticsData.popularChannels.map((channel, index) => (
                  <div key={index} className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <div className="flex items-center space-x-2">
                      <span className="text-sm font-medium text-gray-900 dark:text-white">#{channel.name}</span>
                    </div>
                    <span className="text-sm text-gray-600 dark:text-gray-400">{channel.messageCount} mesaj</span>
                  </div>
                ))}
              </div>
            </div>

            {/* Mesaj Trendleri */}
            <div className="space-y-4">
              <h3 className="text-md font-medium text-gray-900 dark:text-white">Mesaj Trendleri</h3>
              <div className="space-y-2">
                {analyticsData.messageTrends.map((trend, index) => (
                  <div key={index} className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <span className="text-sm text-gray-900 dark:text-white">{trend.date}</span>
                    <div className="flex items-center space-x-2">
                      <div className="w-20 h-2 bg-gray-200 dark:bg-gray-600 rounded-full overflow-hidden">
                        <div 
                          className="h-full bg-primary transition-all duration-300"
                          style={{ width: `${(trend.count / 25) * 100}%` }}
                        />
                      </div>
                      <span className="text-sm text-gray-600 dark:text-gray-400">{trend.count}</span>
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* En Aktif Kullanıcılar */}
            <div className="space-y-4">
              <h3 className="text-md font-medium text-gray-900 dark:text-white">En Aktif Kullanıcılar</h3>
              <div className="space-y-2">
                {analyticsData.topUsers.map((user, index) => (
                  <div key={index} className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <div className="flex items-center space-x-2">
                      <span className="text-sm font-medium text-gray-900 dark:text-white">{user.name}</span>
                    </div>
                    <span className="text-sm text-gray-600 dark:text-gray-400">{user.messageCount} mesaj</span>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Rapor İndirme */}
          <div className="mt-6 border-t border-gray-200 dark:border-gray-700 pt-4">
            <h3 className="text-md font-medium text-gray-900 dark:text-white mb-3">Rapor İndir</h3>
            <div className="flex items-center space-x-2">
              <button
                onClick={() => exportReport('pdf')}
                className="px-4 py-2 text-sm bg-red-500 text-white rounded hover:bg-red-600"
              >
                PDF
              </button>
              <button
                onClick={() => exportReport('excel')}
                className="px-4 py-2 text-sm bg-green-500 text-white rounded hover:bg-green-600"
              >
                Excel
              </button>
              <button
                onClick={() => exportReport('csv')}
                className="px-4 py-2 text-sm bg-blue-500 text-white rounded hover:bg-blue-600"
              >
                CSV
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const toggleTheme = () => {
    const newTheme = theme === 'light' ? 'dark' : 'light';
    setTheme(newTheme);
    document.documentElement.classList.toggle('dark', newTheme === 'dark');
    toast.success(`${newTheme === 'dark' ? 'Koyu' : 'Açık'} tema etkinleştirildi`);
  };

  const saveDraft = (channelId: string, content: string) => {
    if (content.trim()) {
      setDraftMessages(prev => ({ ...prev, [channelId]: content }));
    }
  };

  const loadDraft = (channelId: string) => {
    const draft = draftMessages[channelId];
    if (draft) {
      setNewMessage(draft);
      setDraftMessages(prev => {
        const newDrafts = { ...prev };
        delete newDrafts[channelId];
        return newDrafts;
      });
      toast.success('Taslak mesaj yüklendi');
    }
  };

  const handleKeyboardShortcut = (e: KeyboardEvent) => {
    // Ctrl+K: Arama
    if (e.ctrlKey && e.key === 'k') {
      e.preventDefault();
      setShowAdvancedSearch(true);
    }
    // Ctrl+E: Emoji
    else if (e.ctrlKey && e.key === 'e') {
      e.preventDefault();
      setShowEmojiPicker(true);
    }
    // Ctrl+N: Yeni kanal
    else if (e.ctrlKey && e.key === 'n') {
      e.preventDefault();
      setShowCreateChannel(true);
    }
    // Ctrl+D: Yeni direkt mesaj (ilk çalışanı seç)
    else if (e.ctrlKey && e.key === 'd') {
      e.preventDefault();
      if (employees.length > 0) {
        startDirectMessage(employees[0]);
      }
    }
    // Ctrl+B: Sidebar toggle
    else if (e.ctrlKey && e.key === 'b') {
      e.preventDefault();
      setShowChannelList(!showChannelList);
      setShowMemberList(!showMemberList);
    }
    // Ctrl+T: Tema değiştir
    else if (e.ctrlKey && e.key === 't') {
      e.preventDefault();
      toggleTheme();
    }
    // Ctrl+L: Input'a focus
    else if (e.ctrlKey && e.key === 'l') {
      e.preventDefault();
      document.getElementById('message-input')?.focus();
    }
    // Escape: Input'u temizle
    else if (e.key === 'Escape') {
      if (document.activeElement?.id === 'message-input') {
        setNewMessage('');
        setAttachments([]);
      }
    }
    // Ctrl+U: Dosya yükle
    else if (e.ctrlKey && e.key === 'u') {
      e.preventDefault();
      fileInputRef.current?.click();
    }
    // Ctrl+W: İş akışı
    else if (e.ctrlKey && e.key === 'w') {
      e.preventDefault();
      openWorkflowModal('task');
    }
  };

  useEffect(() => {
    document.addEventListener('keydown', handleKeyboardShortcut);
    return () => document.removeEventListener('keydown', handleKeyboardShortcut);
  }, []);

  const renderThemeToggle = () => (
    <button
      onClick={toggleTheme}
      className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg transition-colors"
      title={theme === 'light' ? 'Koyu temaya geç' : 'Açık temaya geç'}
    >
      {theme === 'light' ? (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
        </svg>
      ) : (
        <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
        </svg>
      )}
    </button>
  );

  const renderNotificationsPanel = () => {
    if (!showNotifications) return null;

    return (
      <div className="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-50">
        <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl w-full max-w-md mx-4 max-h-[80vh] overflow-hidden">
          <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
            <h2 className="text-lg font-semibold text-gray-900 dark:text-white">Bildirimler</h2>
            <button
              onClick={() => setShowNotifications(false)}
              className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
          
          <div className="p-6 overflow-y-auto max-h-[60vh]">
            {unreadNotifications > 0 ? (
              <div className="space-y-4">
                <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
                  <div className="flex items-center space-x-3">
                    <Bell className="w-5 h-5 text-blue-600 dark:text-blue-400" />
                    <div>
                      <h3 className="text-sm font-medium text-blue-900 dark:text-blue-100">
                        Yeni Mesaj Bildirimi
                      </h3>
                      <p className="text-xs text-blue-700 dark:text-blue-300">
                        {unreadNotifications} okunmamış mesajınız var
                      </p>
                    </div>
                  </div>
                </div>
                
                <div className="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4">
                  <div className="flex items-center space-x-3">
                    <CheckCircle className="w-5 h-5 text-green-600 dark:text-green-400" />
                    <div>
                      <h3 className="text-sm font-medium text-green-900 dark:text-green-100">
                        Sistem Bildirimi
                      </h3>
                      <p className="text-xs text-green-700 dark:text-green-300">
                        Sistem güncellemeleri ve önemli duyurular
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            ) : (
              <div className="text-center py-8">
                <Bell className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                <p className="text-gray-500 dark:text-gray-400">
                  Henüz bildiriminiz yok
                </p>
              </div>
            )}
          </div>
          
          <div className="p-6 border-t border-gray-200 dark:border-gray-700">
            <button
              onClick={() => {
                setUnreadNotifications(0);
                setShowNotifications(false);
                toast.success('Tüm bildirimler okundu olarak işaretlendi');
              }}
              className="w-full px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary-600 transition-colors"
            >
              Tümünü Okundu İşaretle
            </button>
          </div>
        </div>
      </div>
    );
  };

  const renderNotificationSettingsModal = () => {
    return (
      <div className="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-50">
        <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl w-full max-w-2xl mx-4 max-h-[90vh] overflow-hidden">
          <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
            <h2 className="text-lg font-semibold text-gray-900 dark:text-white">Push Bildirim Ayarları</h2>
            <button
              onClick={() => setShowNotificationSettings(false)}
              className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
          
          <div className="p-6 overflow-y-auto max-h-[70vh] space-y-6">
            {/* Bildirim İzni */}
            <div className="space-y-4">
              <h3 className="text-md font-medium text-gray-900 dark:text-white">Bildirim İzni</h3>
              <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-700 dark:text-gray-300">
                      Tarayıcı push bildirimleri
                    </p>
                    <p className="text-xs text-gray-500 dark:text-gray-400">
                      Sayfa kapalıyken bile bildirim alabilirsiniz
                    </p>
                  </div>
                  <div className="flex items-center space-x-2">
                    {!notificationPermission.granted ? (
                      <button
                        onClick={requestNotificationPermission}
                        className="px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary-600 transition-colors"
                      >
                        İzin Ver
                      </button>
                    ) : (
                      <>
                        <div className="flex items-center space-x-2">
                          <CheckCircle className="w-5 h-5 text-green-500" />
                          <span className="text-sm text-green-600 dark:text-green-400">İzin Verildi</span>
                        </div>
                        <button
                          onClick={testNotification}
                          className="px-3 py-1 bg-green-500 text-white rounded text-sm hover:bg-green-600 transition-colors"
                        >
                          Test Et
                        </button>
                      </>
                    )}
                  </div>
                </div>
              </div>
            </div>

            {/* Genel Ayarlar */}
            <div className="space-y-4">
              <h3 className="text-md font-medium text-gray-900 dark:text-white">Genel Ayarlar</h3>
              <div className="space-y-3">
                <label className="flex items-center space-x-3">
                  <input
                    type="checkbox"
                    checked={notificationSettings.enabled}
                    onChange={(e) => updateNotificationSettings({ enabled: e.target.checked })}
                    className="rounded border-gray-300 text-primary focus:ring-primary"
                  />
                  <span className="text-sm text-gray-700 dark:text-gray-300">Bildirimleri etkinleştir</span>
                </label>
                
                <label className="flex items-center space-x-3">
                  <input
                    type="checkbox"
                    checked={notificationSettings.doNotDisturb}
                    onChange={(e) => updateNotificationSettings({ doNotDisturb: e.target.checked })}
                    className="rounded border-gray-300 text-primary focus:ring-primary"
                  />
                  <span className="text-sm text-gray-700 dark:text-gray-300">Rahatsız etme modu</span>
                </label>
                
                <label className="flex items-center space-x-3">
                  <input
                    type="checkbox"
                    checked={notificationSettings.soundEnabled}
                    onChange={(e) => updateNotificationSettings({ soundEnabled: e.target.checked })}
                    className="rounded border-gray-300 text-primary focus:ring-primary"
                  />
                  <span className="text-sm text-gray-700 dark:text-gray-300">Ses bildirimleri</span>
                </label>
                
                <label className="flex items-center space-x-3">
                  <input
                    type="checkbox"
                    checked={notificationSettings.showPreview}
                    onChange={(e) => updateNotificationSettings({ showPreview: e.target.checked })}
                    className="rounded border-gray-300 text-primary focus:ring-primary"
                  />
                  <span className="text-sm text-gray-700 dark:text-gray-300">Mesaj önizlemesi göster</span>
                </label>
              </div>
            </div>

            {/* Sessiz Saatler */}
            <div className="space-y-4">
              <h3 className="text-md font-medium text-gray-900 dark:text-white">Sessiz Saatler</h3>
              <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 space-y-4">
                <label className="flex items-center space-x-3">
                  <input
                    type="checkbox"
                    checked={notificationSettings.silentHours.enabled}
                    onChange={(e) => updateNotificationSettings({
                      silentHours: { ...notificationSettings.silentHours, enabled: e.target.checked }
                    })}
                    className="rounded border-gray-300 text-primary focus:ring-primary"
                  />
                  <span className="text-sm text-gray-700 dark:text-gray-300">Sessiz saatleri etkinleştir</span>
                </label>
                
                {notificationSettings.silentHours.enabled && (
                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-xs text-gray-500 dark:text-gray-400 mb-1">Başlangıç</label>
                      <input
                        type="time"
                        value={notificationSettings.silentHours.start}
                        onChange={(e) => updateNotificationSettings({
                          silentHours: { ...notificationSettings.silentHours, start: e.target.value }
                        })}
                        className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                      />
                    </div>
                    <div>
                      <label className="block text-xs text-gray-500 dark:text-gray-400 mb-1">Bitiş</label>
                      <input
                        type="time"
                        value={notificationSettings.silentHours.end}
                        onChange={(e) => updateNotificationSettings({
                          silentHours: { ...notificationSettings.silentHours, end: e.target.value }
                        })}
                        className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                      />
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Bildirim Türleri */}
            <div className="space-y-4">
              <h3 className="text-md font-medium text-gray-900 dark:text-white">Bildirim Türleri</h3>
              <div className="space-y-3">
                <label className="flex items-center space-x-3">
                  <input
                    type="checkbox"
                    checked={notificationSettings.notificationTypes.newMessage}
                    onChange={(e) => updateNotificationSettings({
                      notificationTypes: { ...notificationSettings.notificationTypes, newMessage: e.target.checked }
                    })}
                    className="rounded border-gray-300 text-primary focus:ring-primary"
                  />
                  <span className="text-sm text-gray-700 dark:text-gray-300">Yeni mesajlar</span>
                </label>
                
                <label className="flex items-center space-x-3">
                  <input
                    type="checkbox"
                    checked={notificationSettings.notificationTypes.mention}
                    onChange={(e) => updateNotificationSettings({
                      notificationTypes: { ...notificationSettings.notificationTypes, mention: e.target.checked }
                    })}
                    className="rounded border-gray-300 text-primary focus:ring-primary"
                  />
                  <span className="text-sm text-gray-700 dark:text-gray-300">Etiketlemeler (@mention)</span>
                </label>
                
                <label className="flex items-center space-x-3">
                  <input
                    type="checkbox"
                    checked={notificationSettings.notificationTypes.directMessage}
                    onChange={(e) => updateNotificationSettings({
                      notificationTypes: { ...notificationSettings.notificationTypes, directMessage: e.target.checked }
                    })}
                    className="rounded border-gray-300 text-primary focus:ring-primary"
                  />
                  <span className="text-sm text-gray-700 dark:text-gray-300">Özel mesajlar</span>
                </label>
                
                <label className="flex items-center space-x-3">
                  <input
                    type="checkbox"
                    checked={notificationSettings.notificationTypes.channelAnnouncement}
                    onChange={(e) => updateNotificationSettings({
                      notificationTypes: { ...notificationSettings.notificationTypes, channelAnnouncement: e.target.checked }
                    })}
                    className="rounded border-gray-300 text-primary focus:ring-primary"
                  />
                  <span className="text-sm text-gray-700 dark:text-gray-300">Kanal duyuruları</span>
                </label>
              </div>
            </div>

            {/* Acil Kelimeler */}
            <div className="space-y-4">
              <h3 className="text-md font-medium text-gray-900 dark:text-white">Acil Kelimeler</h3>
              <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4">
                <p className="text-xs text-gray-500 dark:text-gray-400 mb-3">
                  Bu kelimeleri içeren mesajlar sessiz saatlerde bile bildirim olarak gelir
                </p>
                <div className="flex flex-wrap gap-2">
                  {notificationSettings.urgentKeywords.map((keyword, index) => (
                    <div key={index} className="flex items-center space-x-2 bg-white dark:bg-gray-700 px-3 py-1 rounded-full border">
                      <span className="text-sm text-gray-700 dark:text-gray-300">{keyword}</span>
                      <button
                        onClick={() => {
                          const newKeywords = notificationSettings.urgentKeywords.filter((_, i) => i !== index);
                          updateNotificationSettings({ urgentKeywords: newKeywords });
                        }}
                        className="text-red-500 hover:text-red-700 text-xs"
                      >
                        ×
                      </button>
                    </div>
                  ))}
                  <button
                    onClick={() => {
                      const newKeyword = prompt('Yeni acil kelime ekle:');
                      if (newKeyword && !notificationSettings.urgentKeywords.includes(newKeyword)) {
                        updateNotificationSettings({
                          urgentKeywords: [...notificationSettings.urgentKeywords, newKeyword]
                        });
                      }
                    }}
                    className="px-3 py-1 border border-dashed border-gray-300 dark:border-gray-600 rounded-full text-sm text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300"
                  >
                    + Ekle
                  </button>
                </div>
              </div>
            </div>

            {/* Bildirim Geçmişi */}
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h3 className="text-md font-medium text-gray-900 dark:text-white">Bildirim Geçmişi</h3>
                <button
                  onClick={clearNotificationHistory}
                  className="text-sm text-red-500 hover:text-red-700"
                >
                  Geçmişi Temizle
                </button>
              </div>
              <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 max-h-40 overflow-y-auto">
                {notificationHistory.length > 0 ? (
                  <div className="space-y-2">
                    {notificationHistory.slice(0, 5).map((notification) => (
                      <div key={notification.id} className="flex items-center space-x-3 p-2 bg-white dark:bg-gray-700 rounded">
                        <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                        <div className="flex-1 min-w-0">
                          <p className="text-sm text-gray-900 dark:text-white truncate">{notification.title}</p>
                          <p className="text-xs text-gray-500 dark:text-gray-400 truncate">{notification.body}</p>
                        </div>
                        <span className="text-xs text-gray-400">
                          {format(notification.timestamp, 'HH:mm')}
                        </span>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p className="text-sm text-gray-500 dark:text-gray-400 text-center py-4">
                    Henüz bildirim geçmişi yok
                  </p>
                )}
              </div>
            </div>
          </div>
          
          <div className="p-6 border-t border-gray-200 dark:border-gray-700">
            <button
              onClick={() => setShowNotificationSettings(false)}
              className="w-full px-4 py-2 bg-primary text-white rounded-lg hover:bg-primary-600 transition-colors"
            >
              Kaydet ve Kapat
            </button>
          </div>
        </div>
      </div>
    );
  };

  const renderDraftIndicator = () => {
    const hasDrafts = Object.keys(draftMessages).length > 0;
    if (!hasDrafts) return null;

    return (
      <div className="fixed bottom-4 right-4 z-40">
        <div className="bg-yellow-100 dark:bg-yellow-900 border border-yellow-300 dark:border-yellow-700 rounded-lg p-3 shadow-lg">
          <div className="flex items-center space-x-2">
            <span className="text-yellow-800 dark:text-yellow-200 text-sm">
              {Object.keys(draftMessages).length} taslak mesaj
            </span>
            <button
              onClick={() => setDraftMessages({})}
              className="text-yellow-600 dark:text-yellow-400 hover:text-yellow-800 dark:hover:text-yellow-200 text-xs"
            >
              Temizle
            </button>
          </div>
        </div>
      </div>
    );
  };

  // Text formatting functions
  const applyTextFormatting = (format: 'bold' | 'italic' | 'underline') => {
    const div = document.getElementById('message-input') as HTMLDivElement;
    if (!div) return;

    const selection = window.getSelection();
    if (!selection || selection.rangeCount === 0) {
      toast.error('Lütfen formatlamak istediğiniz metni seçin');
      return;
    }

    const range = selection.getRangeAt(0);
    const selectedText = range.toString();
    
    if (selectedText.length === 0) {
      toast.error('Lütfen formatlamak istediğiniz metni seçin');
      return;
    }

    // Seçili metni HTML formatında değiştir
    const span = document.createElement('span');
    switch (format) {
      case 'bold':
        span.style.fontWeight = 'bold';
        break;
      case 'italic':
        span.style.fontStyle = 'italic';
        break;
      case 'underline':
        span.style.textDecoration = 'underline';
        break;
    }
    span.textContent = selectedText;
    
    range.deleteContents();
    range.insertNode(span);
    
    // Cursor'u span'ın sonuna taşı
    const newRange = document.createRange();
    newRange.setStartAfter(span);
    newRange.collapse(true);
    selection.removeAllRanges();
    selection.addRange(newRange);
    
    // State'i güncelle
    const newText = div.innerText;
    setNewMessage(newText);
    setCharacterCount(newText.length);
    
    div.focus();
  };

  const handleTextSelection = () => {
    const textarea = document.getElementById('message-input') as HTMLTextAreaElement;
    if (!textarea) return;

    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    setTextSelection({ start, end });

    // Seçili metni kontrol et ve format durumunu güncelle
    if (start !== end) {
      const selectedText = newMessage.substring(start, end);
      setIsBold(selectedText.startsWith('**') && selectedText.endsWith('**'));
      setIsItalic(selectedText.startsWith('*') && selectedText.endsWith('*') && !selectedText.startsWith('**'));
      setIsUnderline(selectedText.startsWith('__') && selectedText.endsWith('__'));
    }
  };

  // Markdown formatlamasını HTML'e çeviren fonksiyon
  const formatMessageContent = (content: string) => {
    if (!content) return '';

    // Önce mention'ları geçici olarak değiştir
    let formattedContent = content;
    const mentions: string[] = [];
    let mentionIndex = 0;
    
    // Mention'ları geçici olarak değiştir
    formattedContent = formattedContent.replace(/(@[^@\s]+)/g, (match) => {
      mentions.push(match);
      return `__MENTION_${mentionIndex++}__`;
    });

    // Markdown formatlamasını uygula
    formattedContent = formattedContent
      // Bold: **text** -> <strong>text</strong>
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      // Italic: *text* -> <em>text</em> (bold olmayan)
      .replace(/(?<!\*)\*([^*]+?)\*(?!\*)/g, '<em>$1</em>')
      // Underline: __text__ -> <u>text</u>
      .replace(/__(.*?)__/g, '<u>$1</u>');

    // Mention'ları geri ekle ve formatla
    mentions.forEach((mention, index) => {
      const mentionedName = mention.substring(1);
      const mentionedEmployee = employees.find(emp => 
        emp.name.toLowerCase().includes(mentionedName.toLowerCase()) ||
        generateUsername(emp.name) === mentionedName.toLowerCase()
      );
      
      const formattedMention = mentionedEmployee ? 
        `<span class="inline-flex items-center space-x-1 bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 px-1 rounded">
          <span>@${mentionedEmployee.name}</span>
          <span class="text-xs text-blue-500 dark:text-blue-400">
            (${mentionedEmployee.role})
          </span>
        </span>` : 
        `<span class="text-blue-600 dark:text-blue-400">${mention}</span>`;
      
      formattedContent = formattedContent.replace(`__MENTION_${index}__`, formattedMention);
    });

    return formattedContent;
  };

  const renderEmployeeProfile = () => {
    if (!selectedProfileEmployee) return null;

    const handleBack = () => {
      setShowEmployeeProfile(false);
      setSelectedProfileEmployee(null);
      
      // Önceki görünüme geri dön
      if (previousView === 'channel' && selectedChannel) {
        // Kanal görünümünde kal
      } else if (previousView === 'employee' && selectedEmployee) {
        // Çalışan görünümünde kal
      } else {
        // Ana görünüme dön
        setSelectedChannel(null);
        setSelectedEmployee(null);
      }
    };

    const handleStartChat = () => {
      setSelectedEmployee(selectedProfileEmployee);
      setShowEmployeeProfile(false);
      setSelectedProfileEmployee(null);
    };

    return (
      <div className="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-50">
        <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl w-full max-w-2xl mx-4 max-h-[90vh] overflow-hidden">
          <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
            <div className="flex items-center space-x-3">
              <button
                onClick={handleBack}
                className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600"
                title="Geri"
              >
                <ArrowLeft className="w-5 h-5" />
              </button>
              <h2 className="text-lg font-semibold text-gray-900 dark:text-white">
                Çalışan Profili
              </h2>
            </div>
            <button
              onClick={handleBack}
              className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
          
          <div className="p-6 overflow-y-auto max-h-[70vh]">
            <div className="flex items-center space-x-4 mb-6">
              <div className="relative">
                <div className="w-20 h-20 bg-primary text-white rounded-full flex items-center justify-center text-2xl font-medium">
                  {selectedProfileEmployee.avatar}
                </div>
                <div className={`absolute -bottom-1 -right-1 w-6 h-6 rounded-full border-4 border-white dark:border-gray-700 ${
                  selectedProfileEmployee.status === 'online' ? 'bg-green-500' :
                  selectedProfileEmployee.status === 'away' ? 'bg-yellow-500' :
                  selectedProfileEmployee.status === 'busy' ? 'bg-red-500' : 'bg-gray-400'
                }`} />
              </div>
              
              <div className="flex-1">
                <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-1">
                  {selectedProfileEmployee.name}
                </h3>
                <p className="text-gray-600 dark:text-gray-400 mb-2">
                  {selectedProfileEmployee.role} • {selectedProfileEmployee.department}
                </p>
                <div className="flex items-center space-x-2">
                  <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                    selectedProfileEmployee.status === 'online' ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400' :
                    selectedProfileEmployee.status === 'away' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400' :
                    selectedProfileEmployee.status === 'busy' ? 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400' :
                    'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400'
                  }`}>
                    {selectedProfileEmployee.status === 'online' ? 'Çevrimiçi' :
                     selectedProfileEmployee.status === 'away' ? 'Uzakta' :
                     selectedProfileEmployee.status === 'busy' ? 'Meşgul' : 'Çevrimdışı'}
                  </span>
                  {isEmployeeFavorite(selectedProfileEmployee.id) && (
                    <Star className="w-4 h-4 text-yellow-500 fill-current" />
                  )}
                </div>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* İletişim Bilgileri */}
              <div className="space-y-4">
                <h4 className="text-lg font-medium text-gray-900 dark:text-white">İletişim Bilgileri</h4>
                <div className="space-y-3">
                  <div className="flex items-center space-x-3">
                    <Mail className="w-4 h-4 text-gray-400" />
                    <span className="text-gray-600 dark:text-gray-400">
                      {selectedProfileEmployee.name.toLowerCase().replace(/\s+/g, '.')}@sirket.com
                    </span>
                  </div>
                  <div className="flex items-center space-x-3">
                    <Phone className="w-4 h-4 text-gray-400" />
                    <span className="text-gray-600 dark:text-gray-400">+90 555 123 4567</span>
                  </div>
                  <div className="flex items-center space-x-3">
                    <MapPin className="w-4 h-4 text-gray-400" />
                    <span className="text-gray-600 dark:text-gray-400">İstanbul, Türkiye</span>
                  </div>
                </div>
              </div>

              {/* İstatistikler */}
              <div className="space-y-4">
                <h4 className="text-lg font-medium text-gray-900 dark:text-white">İstatistikler</h4>
                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-gray-50 dark:bg-gray-600 rounded-lg p-3">
                    <div className="text-2xl font-bold text-primary">127</div>
                    <div className="text-sm text-gray-600 dark:text-gray-400">Toplam Mesaj</div>
                  </div>
                  <div className="bg-gray-50 dark:bg-gray-600 rounded-lg p-3">
                    <div className="text-2xl font-bold text-green-500">89%</div>
                    <div className="text-sm text-gray-600 dark:text-gray-400">Yanıt Oranı</div>
                  </div>
                  <div className="bg-gray-50 dark:bg-gray-600 rounded-lg p-3">
                    <div className="text-2xl font-bold text-blue-500">15</div>
                    <div className="text-sm text-gray-600 dark:text-gray-400">Aktif Proje</div>
                  </div>
                  <div className="bg-gray-50 dark:bg-gray-600 rounded-lg p-3">
                    <div className="text-2xl font-bold text-purple-500">4.8</div>
                    <div className="text-sm text-gray-600 dark:text-gray-400">Performans</div>
                  </div>
                </div>
              </div>
            </div>

            {/* Aksiyon Butonları */}
            <div className="flex items-center justify-center space-x-4 mt-8 pt-6 border-t border-gray-200 dark:border-gray-600">
              <button
                onClick={handleStartChat}
                className="px-6 py-3 bg-primary text-white rounded-lg hover:bg-primary-600 transition-colors flex items-center space-x-2"
              >
                <MessageSquare className="w-4 h-4" />
                <span>Sohbet Başlat</span>
              </button>
              
              <button
                onClick={() => {
                  addEmployeeToFavorites(selectedProfileEmployee);
                }}
                className={`px-6 py-3 rounded-lg transition-colors flex items-center space-x-2 ${
                  isEmployeeFavorite(selectedProfileEmployee.id)
                    ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400'
                    : 'bg-gray-100 text-gray-700 dark:bg-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-500'
                }`}
              >
                <Star className={`w-4 h-4 ${isEmployeeFavorite(selectedProfileEmployee.id) ? 'fill-current' : ''}`} />
                <span>{isEmployeeFavorite(selectedProfileEmployee.id) ? 'Favorilerden Çıkar' : 'Favorilere Ekle'}</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  const createPoll = (question: string, options: string[]) => {
    const newPoll = {
      id: `poll_${Date.now()}`,
      question,
      options: options.map(option => ({ text: option, votes: 0, voters: [] })),
      createdBy: currentUserId,
      createdAt: new Date(),
      isActive: true
    };
    setPolls(prev => [...prev, newPoll]);
    toast.success('Anket oluşturuldu');
  };

  const votePoll = (pollId: string, optionIndex: number) => {
    setPolls(prev => prev.map(poll => {
      if (poll.id === pollId) {
        const newOptions = poll.options.map((option, index) => {
          if (index === optionIndex) {
            const hasVoted = option.voters.includes(currentUserId);
            if (hasVoted) {
              return { ...option, votes: option.votes - 1, voters: option.voters.filter(v => v !== currentUserId) };
            } else {
              return { ...option, votes: option.votes + 1, voters: [...option.voters, currentUserId] };
            }
          }
          return option;
        });
        return { ...poll, options: newOptions };
      }
      return poll;
    }));
  };

  const useTemplate = (template: { content: string }) => {
    setNewMessage(template.content);
    setShowTemplates(false);
    toast.success('Şablon kullanıldı');
  };

  const renderPollCreator = () => (
    <div className="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-50">
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl w-full max-w-md mx-4">
        <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">Anket Oluştur</h2>
          <button
            onClick={() => setShowPolls(false)}
            className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
          >
            <X className="w-5 h-5" />
          </button>
        </div>
        
        <div className="p-6 space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Soru
            </label>
            <input
              type="text"
              placeholder="Anket sorusunu yazın..."
              className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
            />
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Seçenekler
            </label>
            <div className="space-y-2">
              {[1, 2, 3, 4].map((index) => (
                <input
                  key={index}
                  type="text"
                  placeholder={`Seçenek ${index}`}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
                />
              ))}
            </div>
          </div>
        </div>
        
        <div className="flex items-center justify-end space-x-3 p-6 border-t border-gray-200 dark:border-gray-700">
          <button
            onClick={() => setShowPolls(false)}
            className="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white transition-colors"
          >
            İptal
          </button>
          <button
            onClick={() => createPoll('Örnek soru', ['Seçenek 1', 'Seçenek 2', 'Seçenek 3', 'Seçenek 4'])}
            className="px-4 py-2 bg-primary hover:bg-primary-600 text-white text-sm font-medium rounded-lg transition-colors"
          >
            Anket Oluştur
          </button>
        </div>
      </div>
    </div>
  );

  const renderTemplatesPanel = () => (
    <div className="fixed inset-0 z-[9999] flex items-center justify-center bg-black bg-opacity-50">
      <div className="bg-white dark:bg-gray-700 rounded-lg shadow-xl w-full max-w-2xl mx-4">
        <div className="flex items-center justify-between p-6 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-lg font-semibold text-gray-900 dark:text-white">Mesaj Şablonları</h2>
          <button
            onClick={() => setShowTemplates(false)}
            className="p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-lg"
          >
            <X className="w-5 h-5" />
          </button>
        </div>
        
        <div className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {messageTemplates.map((template) => (
              <div key={template.id} className="p-4 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer transition-colors">
                <div className="flex items-center justify-between mb-2">
                  <h3 className="text-sm font-medium text-gray-900 dark:text-white">{template.title}</h3>
                  <span className="text-xs text-gray-500 dark:text-gray-400">{template.category}</span>
                </div>
                <p className="text-sm text-gray-600 dark:text-gray-400 mb-3">{template.content}</p>
                <button
                  onClick={() => useTemplate(template)}
                  className="text-xs text-primary hover:text-primary-600"
                >
                  Kullan
                </button>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );

  // Bildirim gönderme fonksiyonu - Dashboard bildirimleriyle senkronize
  const sendNotification = (notification: {
    type: 'message' | 'mention' | 'reaction' | 'channel';
    title: string;
    message: string;
    channelId?: string;
    messageId?: string;
  }) => {
    // Dashboard bildirimlerine gönder
    if (onNotification) {
      onNotification({
        id: `chat_${Date.now()}`,
        title: notification.title,
        message: notification.message,
        type: notification.type,
        created_at: new Date().toISOString(),
        is_read: false
      });
    }
  };

  // Mention sistemi fonksiyonları
  const handleMentionInput = (value: string, cursorPosition: number) => {
    console.log('🔍 handleMentionInput çağrıldı:', { value, cursorPosition });
    
    const beforeCursor = value.substring(0, cursorPosition);
    console.log('📝 beforeCursor:', beforeCursor);
    
    // Türkçe karakterleri de destekleyen regex - @ işaretinden sonraki tüm karakterleri yakala
    const mentionMatch = beforeCursor.match(/@([a-zA-ZçğıöşüÇĞIİÖŞÜ\s]*)$/);
    console.log('🔍 mentionMatch:', mentionMatch);
    
    if (mentionMatch) {
      const query = mentionMatch[1].toLowerCase().trim();
      console.log('🔍 query:', query);
      
      setMentionQuery(query);
      setMentionPosition({ 
        start: beforeCursor.lastIndexOf('@'), 
        end: cursorPosition 
      });
      
      console.log('👥 employees sayısı:', employees.length);
      console.log('👥 employees:', employees);
      
      // Çalışanları filtrele - gelişmiş filtreleme
      const filtered = employees.filter(emp => {
        const normalizedName = emp.name.toLowerCase()
          .replace(/[çğıöşü]/g, (match) => {
            const replacements: { [key: string]: string } = {
              'ç': 'c', 'ğ': 'g', 'ı': 'i', 'ö': 'o', 'ş': 's', 'ü': 'u'
            };
            return replacements[match] || match;
          });
        
        const normalizedQuery = query
          .replace(/[çğıöşü]/g, (match) => {
            const replacements: { [key: string]: string } = {
              'ç': 'c', 'ğ': 'g', 'ı': 'i', 'ö': 'o', 'ş': 's', 'ü': 'u'
            };
            return replacements[match] || match;
          });
        
        // Eğer query boşsa (sadece @ yazılmışsa), tüm çalışanları göster
        if (!query) {
          return true;
        }
        
        // İsim ile başlayan arama (öncelikli)
        const nameStartsWith = emp.name.toLowerCase().startsWith(query) || 
                              normalizedName.startsWith(normalizedQuery);
        
        // İçinde geçen arama
        const nameContains = emp.name.toLowerCase().includes(query) ||
                            normalizedName.includes(normalizedQuery);
        
        // Boşluksuz arama
        const nameWithoutSpaces = emp.name.toLowerCase().replace(/\s+/g, '').includes(query) ||
                                 normalizedName.replace(/\s+/g, '').includes(normalizedQuery);
        
        // İlk harflerle arama (örn: "ay" -> "Ahmet Yılmaz")
        const firstLetters = emp.name.toLowerCase()
          .split(' ')
          .map(word => word.charAt(0))
          .join('')
          .includes(query);
        
        const matches = nameStartsWith || nameContains || nameWithoutSpaces || firstLetters;
        console.log(`👤 ${emp.name} - matches: ${matches} (query: "${query}")`);
        
        return matches;
      });
      
      console.log('✅ filtered employees:', filtered);
      console.log('✅ showMentionSuggestions:', filtered.length > 0);
      
      setFilteredEmployees(filtered);
      setShowMentionSuggestions(filtered.length > 0);
    } else {
      console.log('❌ mentionMatch bulunamadı');
      setShowMentionSuggestions(false);
    }
  };

  const selectMention = (employee: Employee) => {
    const beforeMention = newMessage.substring(0, mentionPosition.start);
    const afterMention = newMessage.substring(mentionPosition.end);
    const mentionText = `@${employee.name}`;
    
    setNewMessage(beforeMention + mentionText + afterMention);
    setShowMentionSuggestions(false);
    setCharacterCount(beforeMention.length + mentionText.length + afterMention.length);
    
    // Input'a focus ol
    setTimeout(() => {
      const input = document.getElementById('message-input') as HTMLTextAreaElement;
      if (input) {
        const newPosition = beforeMention.length + mentionText.length;
        input.focus();
        input.setSelectionRange(newPosition, newPosition);
      }
    }, 0);
  };

  // Kullanıcı adı otomatik oluşturma
  const generateUsername = (fullName: string): string => {
    return fullName
      .toLowerCase()
      .replace(/[çğıöşü]/g, (match) => {
        const replacements: { [key: string]: string } = {
          'ç': 'c', 'ğ': 'g', 'ı': 'i', 'ö': 'o', 'ş': 's', 'ü': 'u'
        };
        return replacements[match] || match;
      })
      .replace(/\s+/g, '')
      .replace(/[^a-z0-9]/g, '');
  };

  return (
    <div className={`flex h-screen bg-gray-50 dark:bg-gray-900 overflow-hidden relative p-4 pt-8 ${className}`}>
      <style>{contentEditableStyles}</style>
      {/* Sol Sidebar - Kanallar */}
      <div className={`${showChannelList ? 'flex-shrink-0' : 'hidden lg:flex-shrink-0'} ${showChannelList ? 'block' : 'hidden lg:block'}`}>
        {renderChannelList()}
      </div>

      {/* Orta Alan - Chat */}
      <div className="flex-1 flex flex-col min-w-0 mx-2">
        {activeView === 'channels' && renderChatArea()}
        {activeView === 'direct' && (selectedEmployee || selectedChannel) && renderChatArea()}
        {activeView === 'search' && renderSearchResults()}
      </div>

      {/* Sağ Sidebar - Üyeler */}
      <div className={`${showMemberList ? 'flex-shrink-0' : 'hidden lg:flex-shrink-0'} ${showMemberList ? 'block' : 'hidden lg:block'}`}>
        {renderMemberList()}
      </div>

      {/* Mobil Menü Butonları */}
      <div className="lg:hidden fixed bottom-4 right-4 z-50 flex flex-col space-y-2">
        {!showChannelList && (
          <button
            onClick={() => setShowChannelList(true)}
            className="p-3 bg-primary text-white rounded-full shadow-lg hover:bg-primary-600 transition-colors"
            title="Kanalları göster"
          >
            <Hash className="w-5 h-5" />
          </button>
        )}
        {!showMemberList && (
          <button
            onClick={() => setShowMemberList(true)}
            className="p-3 bg-primary text-white rounded-full shadow-lg hover:bg-primary-600 transition-colors"
            title="Üyeleri göster"
          >
            <Users className="w-5 h-5" />
          </button>
        )}
      </div>

      {/* Mobil Overlay - Sidebar'ları kapatmak için */}
      {(showChannelList || showMemberList) && (
        <div 
          className="lg:hidden fixed inset-0 bg-black bg-opacity-50 z-40"
          onClick={() => {
            setShowChannelList(false);
            setShowMemberList(false);
          }}
        />
      )}

      {/* Kanal Oluşturma Modal */}
      {showCreateChannel && renderCreateChannelModal()}

      {/* Emoji Picker */}
      {showEmojiPicker && renderEmojiPicker()}

      {/* Çalışan Menüsü */}
      {renderEmployeeMenu()}

      {/* Dosya Önizleme Modal */}
      {filePreview && renderFilePreview()}
      
      {/* Gelişmiş Dosya Önizleme Modal */}
      {renderAdvancedFilePreview()}

      {/* Gelişmiş Arama Modal */}
      {showAdvancedSearch && renderAdvancedSearchModal()}
      {showVoiceSearchHelp && renderVoiceSearchHelp()}
      {showKeyboardShortcuts && renderKeyboardShortcuts()}
      {showFileManager && renderFileManager()}
      {showExtractedTasks && renderExtractedTasks()}
      {showVoiceRecorder && renderVoiceRecorder()}

      {/* Pinlenmiş Mesajlar Modal */}
      {showPinnedMessages && renderPinnedMessages()}

      {/* Favori Mesajlar Modal */}
      {showFavorites && renderFavoritesPanel()}

      {/* Kanal Ayarları Modal */}
      {showChannelSettings && renderChannelSettings()}

      {/* Üye Davet Et Modal */}
      {showInviteModal && renderInviteModal()}

      {/* Gizlilik Ayarları Modal */}
      {showPrivacySettings && renderPrivacySettings()}

      {/* Engellenen Kullanıcılar Modal */}
      {renderBlockedUsers()}

      {/* Entegrasyonlar Modal */}
      {showIntegrations && renderIntegrationsPanel()}

      {/* Analitik ve Raporlar Modal */}
      {showAnalytics && renderAnalyticsPanel()}

      {/* Anket Oluşturma Modal */}
      {showPolls && renderPollCreator()}

      {/* Mesaj Şablonları Modal */}
      {showTemplates && renderTemplatesPanel()}
      
      {/* İş Akışı Modal */}
      {renderWorkflowModal()}

      {/* Bildirimler Panel */}
      {renderNotificationsPanel()}

      {/* Push Notification Settings Modal */}
      {showNotificationSettings && renderNotificationSettingsModal()}

      {/* Taslak Mesaj İndicator */}
      {renderDraftIndicator()}

      {/* Çalışan Profili Modal */}
      {showEmployeeProfile && selectedProfileEmployee && renderEmployeeProfile()}
    </div>
  );
};

export default EmployeeChat;