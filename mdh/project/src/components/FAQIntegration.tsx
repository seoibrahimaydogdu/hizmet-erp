import React, { useState, useEffect } from 'react';
import { HelpCircle, Search, ChevronDown, ChevronRight, ExternalLink, BookOpen } from 'lucide-react';

interface FAQIntegrationProps {
  category: string;
  searchTerm?: string;
  className?: string;
}

interface FAQItem {
  id: string;
  question: string;
  answer: string;
  category: string;
  tags: string[];
  helpful: number;
  notHelpful: number;
}

const FAQIntegration: React.FC<FAQIntegrationProps> = ({
  category,
  searchTerm = '',
  className = ''
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [expandedFAQ, setExpandedFAQ] = useState<string | null>(null);
  const [faqs, setFaqs] = useState<FAQItem[]>([]);
  const [filteredFaqs, setFilteredFaqs] = useState<FAQItem[]>([]);
  const [loading, setLoading] = useState(false);

  // √ñrnek FAQ verileri (ger√ßek uygulamada API'den gelecek)
  const sampleFAQs: FAQItem[] = [
    {
      id: '1',
      question: '√ñdeme yaparken hata alƒ±yorum, ne yapmalƒ±yƒ±m?',
      answer: '√ñdeme hatalarƒ±nda √∂ncelikle kart bilgilerinizi kontrol edin. Kartƒ±nƒ±zƒ±n limitinin yeterli olduƒüundan emin olun. Sorun devam ederse farklƒ± bir tarayƒ±cƒ± deneyin veya mobil uygulamamƒ±zƒ± kullanƒ±n.',
      category: 'payment',
      tags: ['√∂deme', 'hata', 'kart'],
      helpful: 45,
      notHelpful: 3
    },
    {
      id: '2',
      question: 'Fatura bilgilerimi nasƒ±l g√ºncelleyebilirim?',
      answer: 'Hesap ayarlarƒ±ndan "Fatura Bilgileri" b√∂l√ºm√ºne giderek bilgilerinizi g√ºncelleyebilirsiniz. Deƒüi≈üiklikler anƒ±nda sisteme yansƒ±yacaktƒ±r.',
      category: 'billing',
      tags: ['fatura', 'g√ºncelleme', 'hesap'],
      helpful: 32,
      notHelpful: 1
    },
    {
      id: '3',
      question: '≈ûifremi unuttum, nasƒ±l sƒ±fƒ±rlayabilirim?',
      answer: 'Giri≈ü sayfasƒ±nda "≈ûifremi Unuttum" linkine tƒ±klayƒ±n. E-posta adresinize g√∂nderilen link ile ≈üifrenizi sƒ±fƒ±rlayabilirsiniz.',
      category: 'account',
      tags: ['≈üifre', 'sƒ±fƒ±rlama', 'giri≈ü'],
      helpful: 67,
      notHelpful: 2
    },
    {
      id: '4',
      question: 'Yeni √∂zellik √∂nerisi nasƒ±l yapabilirim?',
      answer: 'Destek sayfasƒ±ndan "√ñzellik √ñnerisi" kategorisini se√ßerek √∂nerinizi detaylƒ± bir ≈üekilde a√ßƒ±klayabilirsiniz. √ñnerileriniz deƒüerlendirilerek size geri bildirim verilecektir.',
      category: 'feature_request',
      tags: ['√∂zellik', '√∂neri', 'geli≈ütirme'],
      helpful: 28,
      notHelpful: 4
    },
    {
      id: '5',
      question: 'Sistem yava≈ü √ßalƒ±≈üƒ±yor, ne yapabilirim?',
      answer: '√ñncelikle internet baƒülantƒ±nƒ±zƒ± kontrol edin. Tarayƒ±cƒ± √∂nbelleƒüini temizleyin ve sayfayƒ± yenileyin. Sorun devam ederse farklƒ± bir tarayƒ±cƒ± deneyin.',
      category: 'technical',
      tags: ['performans', 'yava≈ü', 'sistem'],
      helpful: 39,
      notHelpful: 5
    },
    {
      id: '6',
      question: 'Hata raporu nasƒ±l g√∂nderebilirim?',
      answer: 'Destek sayfasƒ±ndan "Hata Bildirimi" kategorisini se√ßin. Hatanƒ±n ne olduƒüunu, hangi adƒ±mlarƒ± takip ettiƒüinizi ve sistem bilgilerinizi detaylƒ± olarak a√ßƒ±klayƒ±n.',
      category: 'bug',
      tags: ['hata', 'rapor', 'bildirim'],
      helpful: 41,
      notHelpful: 2
    },
    {
      id: '7',
      question: 'Proje durumumu nasƒ±l takip edebilirim?',
      answer: 'Proje panelinizden t√ºm projelerinizin durumunu, ilerleme y√ºzdesini ve g√ºncellemeleri g√∂rebilirsiniz. E-posta bildirimleri de alabilirsiniz.',
      category: 'project',
      tags: ['proje', 'takip', 'durum'],
      helpful: 23,
      notHelpful: 1
    },
    {
      id: '8',
      question: 'Hesabƒ±mƒ± nasƒ±l silebilirim?',
      answer: 'Hesap ayarlarƒ±ndan "Hesap Silme" b√∂l√ºm√ºne gidin. T√ºm verilerinizin silineceƒüini onaylayƒ±n. Bu i≈ülem geri alƒ±namaz.',
      category: 'account',
      tags: ['hesap', 'silme', 'kapatma'],
      helpful: 15,
      notHelpful: 8
    }
  ];

  useEffect(() => {
    setFaqs(sampleFAQs);
  }, []);

  useEffect(() => {
    // Kategori ve arama terimine g√∂re FAQ'larƒ± filtrele
    let filtered = faqs.filter(faq => {
      const matchesCategory = category ? faq.category === category : true;
      const matchesSearch = searchTerm ? 
        faq.question.toLowerCase().includes(searchTerm.toLowerCase()) ||
        faq.answer.toLowerCase().includes(searchTerm.toLowerCase()) ||
        faq.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()))
        : true;
      
      return matchesCategory && matchesSearch;
    });

    // Kategoriye g√∂re sƒ±rala (e≈üle≈üenler √∂nce)
    if (category) {
      filtered.sort((a, b) => {
        if (a.category === category && b.category !== category) return -1;
        if (a.category !== category && b.category === category) return 1;
        return b.helpful - a.helpful; // Yardƒ±mcƒ± olma sayƒ±sƒ±na g√∂re sƒ±rala
      });
    }

    setFilteredFaqs(filtered.slice(0, 5)); // ƒ∞lk 5 FAQ'yu g√∂ster
  }, [faqs, category, searchTerm]);

  const toggleFAQ = (faqId: string) => {
    setExpandedFAQ(expandedFAQ === faqId ? null : faqId);
  };

  const getCategoryIcon = (cat: string) => {
    const icons = {
      payment: 'üí≥',
      billing: 'üìÑ',
      account: 'üë§',
      feature_request: '‚≠ê',
      technical: 'üîß',
      bug: 'üêõ',
      project: 'üìã'
    };
    return icons[cat as keyof typeof icons] || '‚ùì';
  };

  const getCategoryName = (cat: string) => {
    const names = {
      payment: '√ñdeme',
      billing: 'Faturalama',
      account: 'Hesap',
      feature_request: '√ñzellik √ñnerisi',
      technical: 'Teknik',
      bug: 'Hata',
      project: 'Proje'
    };
    return names[cat as keyof typeof names] || cat;
  };

  if (filteredFaqs.length === 0) return null;

  return (
    <div className={className}>
      {/* Ana Buton */}
      <button
        type="button"
        onClick={() => setIsOpen(!isOpen)}
        className="w-full flex items-center justify-between p-3 bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 border border-green-200 dark:border-green-800 rounded-lg hover:from-green-100 hover:to-emerald-100 dark:hover:from-green-900/30 dark:hover:to-emerald-900/30 transition-all"
      >
        <div className="flex items-center space-x-3">
          <HelpCircle className="w-5 h-5 text-green-600 dark:text-green-400" />
          <div className="text-left">
            <p className="text-sm font-medium text-green-900 dark:text-green-300">
              Sƒ±k Sorulan Sorular
            </p>
            <p className="text-xs text-green-700 dark:text-green-400">
              {filteredFaqs.length} ilgili soru bulundu
            </p>
          </div>
        </div>
        {isOpen ? (
          <ChevronDown className="w-4 h-4 text-green-600 dark:text-green-400" />
        ) : (
          <ChevronRight className="w-4 h-4 text-green-600 dark:text-green-400" />
        )}
      </button>

      {/* FAQ Listesi */}
      {isOpen && (
        <div className="mt-4 space-y-3">
          {filteredFaqs.map((faq) => (
            <div
              key={faq.id}
              className="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden"
            >
              <button
                type="button"
                onClick={() => toggleFAQ(faq.id)}
                className="w-full flex items-center justify-between p-4 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
              >
                <div className="flex items-start space-x-3 text-left">
                  <span className="text-lg">{getCategoryIcon(faq.category)}</span>
                  <div className="flex-1">
                    <h4 className="text-sm font-medium text-gray-900 dark:text-white">
                      {faq.question}
                    </h4>
                    <div className="flex items-center space-x-3 mt-1">
                      <span className="text-xs text-gray-500 dark:text-gray-400">
                        {getCategoryName(faq.category)}
                      </span>
                      <span className="text-xs text-green-600 dark:text-green-400">
                        {faq.helpful} ki≈üiye yardƒ±mcƒ± oldu
                      </span>
                    </div>
                  </div>
                </div>
                {expandedFAQ === faq.id ? (
                  <ChevronDown className="w-4 h-4 text-gray-500 flex-shrink-0" />
                ) : (
                  <ChevronRight className="w-4 h-4 text-gray-500 flex-shrink-0" />
                )}
              </button>

              {expandedFAQ === faq.id && (
                <div className="px-4 pb-4 border-t border-gray-200 dark:border-gray-700">
                  <div className="pt-3">
                    <p className="text-sm text-gray-700 dark:text-gray-300 leading-relaxed">
                      {faq.answer}
                    </p>
                    
                    {/* Etiketler */}
                    <div className="flex flex-wrap gap-1 mt-3">
                      {faq.tags.map((tag, index) => (
                        <span
                          key={index}
                          className="px-2 py-1 bg-blue-100 dark:bg-blue-900/20 text-blue-700 dark:text-blue-300 text-xs rounded-full"
                        >
                          {tag}
                        </span>
                      ))}
                    </div>

                    {/* Yardƒ±mcƒ± Olma Butonlarƒ± */}
                    <div className="flex items-center space-x-4 mt-3 pt-3 border-t border-gray-200 dark:border-gray-700">
                      <button
                        type="button"
                        className="flex items-center space-x-1 text-xs text-green-600 dark:text-green-400 hover:text-green-700 dark:hover:text-green-300"
                      >
                        <span>üëç</span>
                        <span>Yardƒ±mcƒ± ({faq.helpful})</span>
                      </button>
                      <button
                        type="button"
                        className="flex items-center space-x-1 text-xs text-red-600 dark:text-red-400 hover:text-red-700 dark:hover:text-red-300"
                      >
                        <span>üëé</span>
                        <span>Yardƒ±mcƒ± Deƒüil ({faq.notHelpful})</span>
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          ))}

          {/* Daha Fazla FAQ Linki */}
          <div className="text-center pt-2">
            <button
              type="button"
              className="inline-flex items-center space-x-1 text-sm text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300"
            >
              <BookOpen className="w-4 h-4" />
              <span>T√ºm FAQ'larƒ± G√∂r√ºnt√ºle</span>
              <ExternalLink className="w-3 h-3" />
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default FAQIntegration;
